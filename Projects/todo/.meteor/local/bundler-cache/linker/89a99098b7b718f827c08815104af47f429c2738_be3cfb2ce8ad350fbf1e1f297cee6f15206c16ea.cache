[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar EJSON = Package.ejson.EJSON;\nvar meteorInstall = Package.modules.meteorInstall;\nvar meteorBabelHelpers = Package.modules.meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\nvar Symbol = Package['ecmascript-runtime-client'].Symbol;\nvar Map = Package['ecmascript-runtime-client'].Map;\nvar Set = Package['ecmascript-runtime-client'].Set;\n\n/* Package-scope variables */\nvar check, Match;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"check\":{\"match.js\":function module(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                              //\n// packages/check/match.js                                                                                      //\n//                                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                //\nvar _toConsumableArray;\nmodule.link(\"@babel/runtime/helpers/toConsumableArray\", {\n  default: function (v) {\n    _toConsumableArray = v;\n  }\n}, 0);\nvar _typeof;\nmodule.link(\"@babel/runtime/helpers/typeof\", {\n  default: function (v) {\n    _typeof = v;\n  }\n}, 1);\nmodule.export({\n  check: function () {\n    return check;\n  },\n  Match: function () {\n    return Match;\n  }\n});\nvar isPlainObject;\nmodule.link(\"./isPlainObject\", {\n  isPlainObject: function (v) {\n    isPlainObject = v;\n  }\n}, 0);\n// Things we explicitly do NOT support:\n//    - heterogenous arrays\n\nvar currentArgumentChecker = new Meteor.EnvironmentVariable();\nvar hasOwn = Object.prototype.hasOwnProperty;\n\n/**\n * @summary Check that a value matches a [pattern](#matchpatterns).\n * If the value does not match the pattern, throw a `Match.Error`.\n *\n * Particularly useful to assert that arguments to a function have the right\n * types and structure.\n * @locus Anywhere\n * @param {Any} value The value to check\n * @param {MatchPattern} pattern The pattern to match `value` against\n */\nfunction check(value, pattern) {\n  // Record that check got called, if somebody cared.\n  //\n  // We use getOrNullIfOutsideFiber so that it's OK to call check()\n  // from non-Fiber server contexts; the downside is that if you forget to\n  // bindEnvironment on some random callback in your method/publisher,\n  // it might not find the argumentChecker and you'll get an error about\n  // not checking an argument that it looks like you're checking (instead\n  // of just getting a \"Node code must run in a Fiber\" error).\n  var argChecker = currentArgumentChecker.getOrNullIfOutsideFiber();\n  if (argChecker) {\n    argChecker.checking(value);\n  }\n  var result = testSubtree(value, pattern);\n  if (result) {\n    var err = new Match.Error(result.message);\n    if (result.path) {\n      err.message += \" in field \" + result.path;\n      err.path = result.path;\n    }\n    throw err;\n  }\n}\n;\n\n/**\n * @namespace Match\n * @summary The namespace for all Match types and methods.\n */\nvar Match = {\n  Optional: function (pattern) {\n    return new Optional(pattern);\n  },\n  Maybe: function (pattern) {\n    return new Maybe(pattern);\n  },\n  OneOf: function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    return new OneOf(args);\n  },\n  Any: ['__any__'],\n  Where: function (condition) {\n    return new Where(condition);\n  },\n  ObjectIncluding: function (pattern) {\n    return new ObjectIncluding(pattern);\n  },\n  ObjectWithValues: function (pattern) {\n    return new ObjectWithValues(pattern);\n  },\n  // Matches only signed 32-bit integers\n  Integer: ['__integer__'],\n  // XXX matchers should know how to describe themselves for errors\n  Error: Meteor.makeErrorType('Match.Error', function (msg) {\n    this.message = \"Match error: \" + msg;\n\n    // The path of the value that failed to match. Initially empty, this gets\n    // populated by catching and rethrowing the exception as it goes back up the\n    // stack.\n    // E.g.: \"vals[3].entity.created\"\n    this.path = '';\n\n    // If this gets sent over DDP, don't give full internal details but at least\n    // provide something better than 500 Internal server error.\n    this.sanitizedError = new Meteor.Error(400, 'Match failed');\n  }),\n  // Tests to see if value matches pattern. Unlike check, it merely returns true\n  // or false (unless an error other than Match.Error was thrown). It does not\n  // interact with _failIfArgumentsAreNotAllChecked.\n  // XXX maybe also implement a Match.match which returns more information about\n  //     failures but without using exception handling or doing what check()\n  //     does with _failIfArgumentsAreNotAllChecked and Meteor.Error conversion\n  /**\n   * @summary Returns true if the value matches the pattern.\n   * @locus Anywhere\n   * @param {Any} value The value to check\n   * @param {MatchPattern} pattern The pattern to match `value` against\n   */\n  test: function (value, pattern) {\n    return !testSubtree(value, pattern);\n  },\n  // Runs `f.apply(context, args)`. If check() is not called on every element of\n  // `args` (either directly or in the first level of an array), throws an error\n  // (using `description` in the message).\n  _failIfArgumentsAreNotAllChecked: function (f, context, args, description) {\n    var argChecker = new ArgumentChecker(args, description);\n    var result = currentArgumentChecker.withValue(argChecker, function () {\n      return f.apply(context, args);\n    });\n\n    // If f didn't itself throw, make sure it checked all of its arguments.\n    argChecker.throwUnlessAllArgumentsHaveBeenChecked();\n    return result;\n  }\n};\nvar Optional = function () {\n  function Optional(pattern) {\n    this.pattern = pattern;\n  }\n  return Optional;\n}();\nvar Maybe = function () {\n  function Maybe(pattern) {\n    this.pattern = pattern;\n  }\n  return Maybe;\n}();\nvar OneOf = function () {\n  function OneOf(choices) {\n    if (!choices || choices.length === 0) {\n      throw new Error('Must provide at least one choice to Match.OneOf');\n    }\n    this.choices = choices;\n  }\n  return OneOf;\n}();\nvar Where = function () {\n  function Where(condition) {\n    this.condition = condition;\n  }\n  return Where;\n}();\nvar ObjectIncluding = function () {\n  function ObjectIncluding(pattern) {\n    this.pattern = pattern;\n  }\n  return ObjectIncluding;\n}();\nvar ObjectWithValues = function () {\n  function ObjectWithValues(pattern) {\n    this.pattern = pattern;\n  }\n  return ObjectWithValues;\n}();\nvar stringForErrorMessage = function (value) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (value === null) {\n    return 'null';\n  }\n  if (options.onlyShowType) {\n    return _typeof(value);\n  }\n\n  // Your average non-object things.  Saves from doing the try/catch below for.\n  if (_typeof(value) !== 'object') {\n    return EJSON.stringify(value);\n  }\n  try {\n    // Find objects with circular references since EJSON doesn't support them yet (Issue #4778 + Unaccepted PR)\n    // If the native stringify is going to choke, EJSON.stringify is going to choke too.\n    JSON.stringify(value);\n  } catch (stringifyError) {\n    if (stringifyError.name === 'TypeError') {\n      return _typeof(value);\n    }\n  }\n  return EJSON.stringify(value);\n};\nvar typeofChecks = [[String, 'string'], [Number, 'number'], [Boolean, 'boolean'],\n// While we don't allow undefined/function in EJSON, this is good for optional\n// arguments with OneOf.\n[Function, 'function'], [undefined, 'undefined']];\n\n// Return `false` if it matches. Otherwise, return an object with a `message` and a `path` field.\nvar testSubtree = function (value, pattern) {\n  // Match anything!\n  if (pattern === Match.Any) {\n    return false;\n  }\n\n  // Basic atomic types.\n  // Do not match boxed objects (e.g. String, Boolean)\n  for (var i = 0; i < typeofChecks.length; ++i) {\n    if (pattern === typeofChecks[i][0]) {\n      if (_typeof(value) === typeofChecks[i][1]) {\n        return false;\n      }\n      return {\n        message: \"Expected \" + typeofChecks[i][1] + \", got \" + stringForErrorMessage(value, {\n          onlyShowType: true\n        }),\n        path: ''\n      };\n    }\n  }\n  if (pattern === null) {\n    if (value === null) {\n      return false;\n    }\n    return {\n      message: \"Expected null, got \" + stringForErrorMessage(value),\n      path: ''\n    };\n  }\n\n  // Strings, numbers, and booleans match literally. Goes well with Match.OneOf.\n  if (typeof pattern === 'string' || typeof pattern === 'number' || typeof pattern === 'boolean') {\n    if (value === pattern) {\n      return false;\n    }\n    return {\n      message: \"Expected \" + pattern + \", got \" + stringForErrorMessage(value),\n      path: ''\n    };\n  }\n\n  // Match.Integer is special type encoded with array\n  if (pattern === Match.Integer) {\n    // There is no consistent and reliable way to check if variable is a 64-bit\n    // integer. One of the popular solutions is to get reminder of division by 1\n    // but this method fails on really large floats with big precision.\n    // E.g.: 1.348192308491824e+23 % 1 === 0 in V8\n    // Bitwise operators work consistantly but always cast variable to 32-bit\n    // signed integer according to JavaScript specs.\n    if (typeof value === 'number' && (value | 0) === value) {\n      return false;\n    }\n    return {\n      message: \"Expected Integer, got \" + stringForErrorMessage(value),\n      path: ''\n    };\n  }\n\n  // 'Object' is shorthand for Match.ObjectIncluding({});\n  if (pattern === Object) {\n    pattern = Match.ObjectIncluding({});\n  }\n\n  // Array (checked AFTER Any, which is implemented as an Array).\n  if (pattern instanceof Array) {\n    if (pattern.length !== 1) {\n      return {\n        message: \"Bad pattern: arrays must have one type element \" + stringForErrorMessage(pattern),\n        path: ''\n      };\n    }\n    if (!Array.isArray(value) && !isArguments(value)) {\n      return {\n        message: \"Expected array, got \" + stringForErrorMessage(value),\n        path: ''\n      };\n    }\n    for (var _i = 0, length = value.length; _i < length; _i++) {\n      var result = testSubtree(value[_i], pattern[0]);\n      if (result) {\n        result.path = _prependPath(_i, result.path);\n        return result;\n      }\n    }\n    return false;\n  }\n\n  // Arbitrary validation checks. The condition can return false or throw a\n  // Match.Error (ie, it can internally use check()) to fail.\n  if (pattern instanceof Where) {\n    var _result;\n    try {\n      _result = pattern.condition(value);\n    } catch (err) {\n      if (!(err instanceof Match.Error)) {\n        throw err;\n      }\n      return {\n        message: err.message,\n        path: err.path\n      };\n    }\n    if (_result) {\n      return false;\n    }\n\n    // XXX this error is terrible\n    return {\n      message: 'Failed Match.Where validation',\n      path: ''\n    };\n  }\n  if (pattern instanceof Maybe) {\n    pattern = Match.OneOf(undefined, null, pattern.pattern);\n  } else if (pattern instanceof Optional) {\n    pattern = Match.OneOf(undefined, pattern.pattern);\n  }\n  if (pattern instanceof OneOf) {\n    for (var _i2 = 0; _i2 < pattern.choices.length; ++_i2) {\n      var _result2 = testSubtree(value, pattern.choices[_i2]);\n      if (!_result2) {\n        // No error? Yay, return.\n        return false;\n      }\n\n      // Match errors just mean try another choice.\n    }\n\n    // XXX this error is terrible\n    return {\n      message: 'Failed Match.OneOf, Match.Maybe or Match.Optional validation',\n      path: ''\n    };\n  }\n\n  // A function that isn't something we special-case is assumed to be a\n  // constructor.\n  if (pattern instanceof Function) {\n    if (value instanceof pattern) {\n      return false;\n    }\n    return {\n      message: \"Expected \" + (pattern.name || 'particular constructor'),\n      path: ''\n    };\n  }\n  var unknownKeysAllowed = false;\n  var unknownKeyPattern;\n  if (pattern instanceof ObjectIncluding) {\n    unknownKeysAllowed = true;\n    pattern = pattern.pattern;\n  }\n  if (pattern instanceof ObjectWithValues) {\n    unknownKeysAllowed = true;\n    unknownKeyPattern = [pattern.pattern];\n    pattern = {}; // no required keys\n  }\n\n  if (_typeof(pattern) !== 'object') {\n    return {\n      message: 'Bad pattern: unknown pattern type',\n      path: ''\n    };\n  }\n\n  // An object, with required and optional keys. Note that this does NOT do\n  // structural matches against objects of special types that happen to match\n  // the pattern: this really needs to be a plain old {Object}!\n  if (_typeof(value) !== 'object') {\n    return {\n      message: \"Expected object, got \" + _typeof(value),\n      path: ''\n    };\n  }\n  if (value === null) {\n    return {\n      message: \"Expected object, got null\",\n      path: ''\n    };\n  }\n  if (!isPlainObject(value)) {\n    return {\n      message: \"Expected plain object\",\n      path: ''\n    };\n  }\n  var requiredPatterns = Object.create(null);\n  var optionalPatterns = Object.create(null);\n  Object.keys(pattern).forEach(function (key) {\n    var subPattern = pattern[key];\n    if (subPattern instanceof Optional || subPattern instanceof Maybe) {\n      optionalPatterns[key] = subPattern.pattern;\n    } else {\n      requiredPatterns[key] = subPattern;\n    }\n  });\n  for (var key in meteorBabelHelpers.sanitizeForInObject(Object(value))) {\n    var subValue = value[key];\n    if (hasOwn.call(requiredPatterns, key)) {\n      var _result3 = testSubtree(subValue, requiredPatterns[key]);\n      if (_result3) {\n        _result3.path = _prependPath(key, _result3.path);\n        return _result3;\n      }\n      delete requiredPatterns[key];\n    } else if (hasOwn.call(optionalPatterns, key)) {\n      var _result4 = testSubtree(subValue, optionalPatterns[key]);\n      if (_result4) {\n        _result4.path = _prependPath(key, _result4.path);\n        return _result4;\n      }\n    } else {\n      if (!unknownKeysAllowed) {\n        return {\n          message: 'Unknown key',\n          path: key\n        };\n      }\n      if (unknownKeyPattern) {\n        var _result5 = testSubtree(subValue, unknownKeyPattern[0]);\n        if (_result5) {\n          _result5.path = _prependPath(key, _result5.path);\n          return _result5;\n        }\n      }\n    }\n  }\n  var keys = Object.keys(requiredPatterns);\n  if (keys.length) {\n    return {\n      message: \"Missing key '\" + keys[0] + \"'\",\n      path: ''\n    };\n  }\n};\nvar ArgumentChecker = /*#__PURE__*/function () {\n  function ArgumentChecker(args, description) {\n    // Make a SHALLOW copy of the arguments. (We'll be doing identity checks\n    // against its contents.)\n    this.args = _toConsumableArray(args);\n\n    // Since the common case will be to check arguments in order, and we splice\n    // out arguments when we check them, make it so we splice out from the end\n    // rather than the beginning.\n    this.args.reverse();\n    this.description = description;\n  }\n  var _proto = ArgumentChecker.prototype;\n  _proto.checking = function () {\n    function checking(value) {\n      if (this._checkingOneValue(value)) {\n        return;\n      }\n\n      // Allow check(arguments, [String]) or check(arguments.slice(1), [String])\n      // or check([foo, bar], [String]) to count... but only if value wasn't\n      // itself an argument.\n      if (Array.isArray(value) || isArguments(value)) {\n        Array.prototype.forEach.call(value, this._checkingOneValue.bind(this));\n      }\n    }\n    return checking;\n  }();\n  _proto._checkingOneValue = function () {\n    function _checkingOneValue(value) {\n      for (var i = 0; i < this.args.length; ++i) {\n        // Is this value one of the arguments? (This can have a false positive if\n        // the argument is an interned primitive, but it's still a good enough\n        // check.)\n        // (NaN is not === to itself, so we have to check specially.)\n        if (value === this.args[i] || Number.isNaN(value) && Number.isNaN(this.args[i])) {\n          this.args.splice(i, 1);\n          return true;\n        }\n      }\n      return false;\n    }\n    return _checkingOneValue;\n  }();\n  _proto.throwUnlessAllArgumentsHaveBeenChecked = function () {\n    function throwUnlessAllArgumentsHaveBeenChecked() {\n      if (this.args.length > 0) throw new Error(\"Did not check() all arguments during \" + this.description);\n    }\n    return throwUnlessAllArgumentsHaveBeenChecked;\n  }();\n  return ArgumentChecker;\n}();\nvar _jsKeywords = ['do', 'if', 'in', 'for', 'let', 'new', 'try', 'var', 'case', 'else', 'enum', 'eval', 'false', 'null', 'this', 'true', 'void', 'with', 'break', 'catch', 'class', 'const', 'super', 'throw', 'while', 'yield', 'delete', 'export', 'import', 'public', 'return', 'static', 'switch', 'typeof', 'default', 'extends', 'finally', 'package', 'private', 'continue', 'debugger', 'function', 'arguments', 'interface', 'protected', 'implements', 'instanceof'];\n\n// Assumes the base of path is already escaped properly\n// returns key + base\nvar _prependPath = function (key, base) {\n  if (typeof key === 'number' || key.match(/^[0-9]+$/)) {\n    key = \"[\" + key + \"]\";\n  } else if (!key.match(/^[a-z_$][0-9a-z_$]*$/i) || _jsKeywords.indexOf(key) >= 0) {\n    key = JSON.stringify([key]);\n  }\n  if (base && base[0] !== '[') {\n    return key + \".\" + base;\n  }\n  return key + base;\n};\nvar isObject = function (value) {\n  return _typeof(value) === 'object' && value !== null;\n};\nvar baseIsArguments = function (item) {\n  return isObject(item) && Object.prototype.toString.call(item) === '[object Arguments]';\n};\nvar isArguments = baseIsArguments(function () {\n  return arguments;\n}()) ? baseIsArguments : function (value) {\n  return isObject(value) && typeof value.callee === 'function';\n};\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"isPlainObject.js\":function module(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                              //\n// packages/check/isPlainObject.js                                                                              //\n//                                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                //\nmodule.export({\n  isPlainObject: function () {\n    return isPlainObject;\n  }\n});\n// Copy of jQuery.isPlainObject for the server side from jQuery v3.1.1.\n\nvar class2type = {};\nvar toString = class2type.toString;\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar fnToString = hasOwn.toString;\nvar ObjectFunctionString = fnToString.call(Object);\nvar getProto = Object.getPrototypeOf;\nvar isPlainObject = function (obj) {\n  var proto;\n  var Ctor;\n\n  // Detect obvious negatives\n  // Use toString instead of jQuery.type to catch host objects\n  if (!obj || toString.call(obj) !== '[object Object]') {\n    return false;\n  }\n  proto = getProto(obj);\n\n  // Objects with no prototype (e.g., `Object.create( null )`) are plain\n  if (!proto) {\n    return true;\n  }\n\n  // Objects with prototype are plain iff they were constructed by a global Object function\n  Ctor = hasOwn.call(proto, 'constructor') && proto.constructor;\n  return typeof Ctor === 'function' && fnToString.call(Ctor) === ObjectFunctionString;\n};\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\n\nvar exports = require(\"/node_modules/meteor/check/match.js\");\n\n/* Exports */\nPackage._define(\"check\", exports, {\n  check: check,\n  Match: Match\n});\n\n})();\n","servePath":"/packages/check.js","sourceMap":{"version":3,"sources":["packages/check/match.js","packages/check/isPlainObject.js"],"names":["_toConsumableArray","module","link","default","v","_typeof","export","check","Match","isPlainObject","currentArgumentChecker","Meteor","EnvironmentVariable","hasOwn","Object","prototype","hasOwnProperty","value","pattern","argChecker","getOrNullIfOutsideFiber","checking","result","testSubtree","err","Error","message","path","Optional","Maybe","OneOf","args","Any","Where","condition","ObjectIncluding","ObjectWithValues","Integer","makeErrorType","msg","sanitizedError","test","_failIfArgumentsAreNotAllChecked","f","context","description","ArgumentChecker","withValue","apply","throwUnlessAllArgumentsHaveBeenChecked","choices","length","stringForErrorMessage","options","onlyShowType","EJSON","stringify","JSON","stringifyError","name","typeofChecks","String","Number","Boolean","Function","undefined","i","Array","isArray","isArguments","_prependPath","unknownKeysAllowed","unknownKeyPattern","requiredPatterns","create","optionalPatterns","keys","forEach","key","subPattern","subValue","call","reverse","_checkingOneValue","bind","isNaN","splice","_jsKeywords","base","match","indexOf","isObject","baseIsArguments","item","toString","arguments","callee","class2type","fnToString","ObjectFunctionString","getProto","getPrototypeOf","obj","proto","Ctor","constructor"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAIA,kBAAkB;AAACC,MAAM,CAACC,IAAI,CAAC,0CAA0C,EAAC;EAACC,OAAO,EAAC,UAASC,CAAC,EAAC;IAACJ,kBAAkB,GAACI,CAAC;EAAA;AAAC,CAAC,EAAC,CAAC,CAAC;AAAC,IAAIC,OAAO;AAACJ,MAAM,CAACC,IAAI,CAAC,+BAA+B,EAAC;EAACC,OAAO,EAAC,UAASC,CAAC,EAAC;IAACC,OAAO,GAACD,CAAC;EAAA;AAAC,CAAC,EAAC,CAAC,CAAC;AAAxNH,MAAM,CAACK,MAAM,CAAC;EAACC,KAAK,EAAC,YAAU;IAAC,OAAOA,KAAK;EAAA,CAAC;EAACC,KAAK,EAAC,YAAU;IAAC,OAAOA,KAAK;EAAA;AAAC,CAAC,CAAC;AAAC,IAAIC,aAAa;AAACR,MAAM,CAACC,IAAI,CAAC,iBAAiB,EAAC;EAACO,aAAa,EAAC,UAASL,CAAC,EAAC;IAACK,aAAa,GAACL,CAAC;EAAA;AAAC,CAAC,EAAC,CAAC,CAAC;AAG9K;AACA;;AAEA,IAAMM,sBAAsB,GAAG,IAAIC,MAAM,CAACC,mBAAmB;AAC7D,IAAMC,MAAM,GAAGC,MAAM,CAACC,SAAS,CAACC,cAAc;;AAE9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAAST,KAAK,CAACU,KAAK,EAAEC,OAAO,EAAE;EACpC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,IAAMC,UAAU,GAAGT,sBAAsB,CAACU,uBAAuB,EAAE;EACnE,IAAID,UAAU,EAAE;IACdA,UAAU,CAACE,QAAQ,CAACJ,KAAK,CAAC;EAC5B;EAEA,IAAMK,MAAM,GAAGC,WAAW,CAACN,KAAK,EAAEC,OAAO,CAAC;EAC1C,IAAII,MAAM,EAAE;IACV,IAAME,GAAG,GAAG,IAAIhB,KAAK,CAACiB,KAAK,CAACH,MAAM,CAACI,OAAO,CAAC;IAC3C,IAAIJ,MAAM,CAACK,IAAI,EAAE;MACfH,GAAG,CAACE,OAAO,mBAAiBJ,MAAM,CAACK,IAAM;MACzCH,GAAG,CAACG,IAAI,GAAGL,MAAM,CAACK,IAAI;IACxB;IAEA,MAAMH,GAAG;EACX;AACF;AAAC;;AAED;AACA;AACA;AACA;AACO,IAAMhB,KAAK,GAAG;EACnBoB,QAAQ,EAAE,UAASV,OAAO,EAAE;IAC1B,OAAO,IAAIU,QAAQ,CAACV,OAAO,CAAC;EAC9B,CAAC;EAEDW,KAAK,EAAE,UAASX,OAAO,EAAE;IACvB,OAAO,IAAIW,KAAK,CAACX,OAAO,CAAC;EAC3B,CAAC;EAEDY,KAAK,EAAE,YAAkB;IAAA,kCAANC,IAAI;MAAJA,IAAI;IAAA;IACrB,OAAO,IAAID,KAAK,CAACC,IAAI,CAAC;EACxB,CAAC;EAEDC,GAAG,EAAE,CAAC,SAAS,CAAC;EAChBC,KAAK,EAAE,UAASC,SAAS,EAAE;IACzB,OAAO,IAAID,KAAK,CAACC,SAAS,CAAC;EAC7B,CAAC;EAEDC,eAAe,EAAE,UAASjB,OAAO,EAAE;IACjC,OAAO,IAAIiB,eAAe,CAACjB,OAAO,CAAC;EACrC,CAAC;EAEDkB,gBAAgB,EAAE,UAASlB,OAAO,EAAE;IAClC,OAAO,IAAIkB,gBAAgB,CAAClB,OAAO,CAAC;EACtC,CAAC;EAED;EACAmB,OAAO,EAAE,CAAC,aAAa,CAAC;EAExB;EACAZ,KAAK,EAAEd,MAAM,CAAC2B,aAAa,CAAC,aAAa,EAAE,UAAUC,GAAG,EAAE;IACxD,IAAI,CAACb,OAAO,qBAAmBa,GAAK;;IAEpC;IACA;IACA;IACA;IACA,IAAI,CAACZ,IAAI,GAAG,EAAE;;IAEd;IACA;IACA,IAAI,CAACa,cAAc,GAAG,IAAI7B,MAAM,CAACc,KAAK,CAAC,GAAG,EAAE,cAAc,CAAC;EAC7D,CAAC,CAAC;EAEF;EACA;EACA;EACA;EACA;EACA;EAEA;AACF;AACA;AACA;AACA;AACA;EACEgB,IAAI,YAACxB,KAAK,EAAEC,OAAO,EAAE;IACnB,OAAO,CAACK,WAAW,CAACN,KAAK,EAAEC,OAAO,CAAC;EACrC,CAAC;EAED;EACA;EACA;EACAwB,gCAAgC,YAACC,CAAC,EAAEC,OAAO,EAAEb,IAAI,EAAEc,WAAW,EAAE;IAC9D,IAAM1B,UAAU,GAAG,IAAI2B,eAAe,CAACf,IAAI,EAAEc,WAAW,CAAC;IACzD,IAAMvB,MAAM,GAAGZ,sBAAsB,CAACqC,SAAS,CAC7C5B,UAAU,EACV;MAAA,OAAMwB,CAAC,CAACK,KAAK,CAACJ,OAAO,EAAEb,IAAI,CAAC;IAAA,EAC7B;;IAED;IACAZ,UAAU,CAAC8B,sCAAsC,EAAE;IACnD,OAAO3B,MAAM;EACf;AACF,CAAC;AAAC,IAEIM,QAAQ;EACZ,kBAAYV,OAAO,EAAE;IACnB,IAAI,CAACA,OAAO,GAAGA,OAAO;EACxB;EAAC;AAAA;AAAA,IAGGW,KAAK;EACT,eAAYX,OAAO,EAAE;IACnB,IAAI,CAACA,OAAO,GAAGA,OAAO;EACxB;EAAC;AAAA;AAAA,IAGGY,KAAK;EACT,eAAYoB,OAAO,EAAE;IACnB,IAAI,CAACA,OAAO,IAAIA,OAAO,CAACC,MAAM,KAAK,CAAC,EAAE;MACpC,MAAM,IAAI1B,KAAK,CAAC,iDAAiD,CAAC;IACpE;IAEA,IAAI,CAACyB,OAAO,GAAGA,OAAO;EACxB;EAAC;AAAA;AAAA,IAGGjB,KAAK;EACT,eAAYC,SAAS,EAAE;IACrB,IAAI,CAACA,SAAS,GAAGA,SAAS;EAC5B;EAAC;AAAA;AAAA,IAGGC,eAAe;EACnB,yBAAYjB,OAAO,EAAE;IACnB,IAAI,CAACA,OAAO,GAAGA,OAAO;EACxB;EAAC;AAAA;AAAA,IAGGkB,gBAAgB;EACpB,0BAAYlB,OAAO,EAAE;IACnB,IAAI,CAACA,OAAO,GAAGA,OAAO;EACxB;EAAC;AAAA;AAGH,IAAMkC,qBAAqB,GAAG,UAACnC,KAAK,EAAmB;EAAA,IAAjBoC,OAAO,uEAAG,CAAC,CAAC;EAChD,IAAKpC,KAAK,KAAK,IAAI,EAAG;IACpB,OAAO,MAAM;EACf;EAEA,IAAKoC,OAAO,CAACC,YAAY,EAAG;IAC1B,eAAcrC,KAAK;EACrB;;EAEA;EACA,IAAK,QAAOA,KAAK,MAAK,QAAQ,EAAG;IAC/B,OAAOsC,KAAK,CAACC,SAAS,CAACvC,KAAK,CAAC;EAC/B;EAEA,IAAI;IAEF;IACA;IACAwC,IAAI,CAACD,SAAS,CAACvC,KAAK,CAAC;EACvB,CAAC,CAAC,OAAOyC,cAAc,EAAE;IACvB,IAAKA,cAAc,CAACC,IAAI,KAAK,WAAW,EAAG;MACzC,eAAc1C,KAAK;IACrB;EACF;EAEA,OAAOsC,KAAK,CAACC,SAAS,CAACvC,KAAK,CAAC;AAC/B,CAAC;AAED,IAAM2C,YAAY,GAAG,CACnB,CAACC,MAAM,EAAE,QAAQ,CAAC,EAClB,CAACC,MAAM,EAAE,QAAQ,CAAC,EAClB,CAACC,OAAO,EAAE,SAAS,CAAC;AAEpB;AACA;AACA,CAACC,QAAQ,EAAE,UAAU,CAAC,EACtB,CAACC,SAAS,EAAE,WAAW,CAAC,CACzB;;AAED;AACA,IAAM1C,WAAW,GAAG,UAACN,KAAK,EAAEC,OAAO,EAAK;EAEtC;EACA,IAAIA,OAAO,KAAKV,KAAK,CAACwB,GAAG,EAAE;IACzB,OAAO,KAAK;EACd;;EAEA;EACA;EACA,KAAK,IAAIkC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,YAAY,CAACT,MAAM,EAAE,EAAEe,CAAC,EAAE;IAC5C,IAAIhD,OAAO,KAAK0C,YAAY,CAACM,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;MAClC,IAAI,QAAOjD,KAAK,MAAK2C,YAAY,CAACM,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;QACvC,OAAO,KAAK;MACd;MAEA,OAAO;QACLxC,OAAO,gBAAckC,YAAY,CAACM,CAAC,CAAC,CAAC,CAAC,CAAC,cAASd,qBAAqB,CAACnC,KAAK,EAAE;UAAEqC,YAAY,EAAE;QAAK,CAAC,CAAG;QACtG3B,IAAI,EAAE;MACR,CAAC;IACH;EACF;EAEA,IAAIT,OAAO,KAAK,IAAI,EAAE;IACpB,IAAID,KAAK,KAAK,IAAI,EAAE;MAClB,OAAO,KAAK;IACd;IAEA,OAAO;MACLS,OAAO,0BAAwB0B,qBAAqB,CAACnC,KAAK,CAAG;MAC7DU,IAAI,EAAE;IACR,CAAC;EACH;;EAEA;EACA,IAAI,OAAOT,OAAO,KAAK,QAAQ,IAAI,OAAOA,OAAO,KAAK,QAAQ,IAAI,OAAOA,OAAO,KAAK,SAAS,EAAE;IAC9F,IAAID,KAAK,KAAKC,OAAO,EAAE;MACrB,OAAO,KAAK;IACd;IAEA,OAAO;MACLQ,OAAO,gBAAcR,OAAO,cAASkC,qBAAqB,CAACnC,KAAK,CAAG;MACnEU,IAAI,EAAE;IACR,CAAC;EACH;;EAEA;EACA,IAAIT,OAAO,KAAKV,KAAK,CAAC6B,OAAO,EAAE;IAE7B;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,OAAOpB,KAAK,KAAK,QAAQ,IAAI,CAACA,KAAK,GAAG,CAAC,MAAMA,KAAK,EAAE;MACtD,OAAO,KAAK;IACd;IAEA,OAAO;MACLS,OAAO,6BAA2B0B,qBAAqB,CAACnC,KAAK,CAAG;MAChEU,IAAI,EAAE;IACR,CAAC;EACH;;EAEA;EACA,IAAIT,OAAO,KAAKJ,MAAM,EAAE;IACtBI,OAAO,GAAGV,KAAK,CAAC2B,eAAe,CAAC,CAAC,CAAC,CAAC;EACrC;;EAEA;EACA,IAAIjB,OAAO,YAAYiD,KAAK,EAAE;IAC5B,IAAIjD,OAAO,CAACiC,MAAM,KAAK,CAAC,EAAE;MACxB,OAAO;QACLzB,OAAO,sDAAoD0B,qBAAqB,CAAClC,OAAO,CAAG;QAC3FS,IAAI,EAAE;MACR,CAAC;IACH;IAEA,IAAI,CAACwC,KAAK,CAACC,OAAO,CAACnD,KAAK,CAAC,IAAI,CAACoD,WAAW,CAACpD,KAAK,CAAC,EAAE;MAChD,OAAO;QACLS,OAAO,2BAAyB0B,qBAAqB,CAACnC,KAAK,CAAG;QAC9DU,IAAI,EAAE;MACR,CAAC;IACH;IAEA,KAAK,IAAIuC,EAAC,GAAG,CAAC,EAAEf,MAAM,GAAGlC,KAAK,CAACkC,MAAM,EAAEe,EAAC,GAAGf,MAAM,EAAEe,EAAC,EAAE,EAAE;MACtD,IAAM5C,MAAM,GAAGC,WAAW,CAACN,KAAK,CAACiD,EAAC,CAAC,EAAEhD,OAAO,CAAC,CAAC,CAAC,CAAC;MAChD,IAAII,MAAM,EAAE;QACVA,MAAM,CAACK,IAAI,GAAG2C,YAAY,CAACJ,EAAC,EAAE5C,MAAM,CAACK,IAAI,CAAC;QAC1C,OAAOL,MAAM;MACf;IACF;IAEA,OAAO,KAAK;EACd;;EAEA;EACA;EACA,IAAIJ,OAAO,YAAYe,KAAK,EAAE;IAC5B,IAAIX,OAAM;IACV,IAAI;MACFA,OAAM,GAAGJ,OAAO,CAACgB,SAAS,CAACjB,KAAK,CAAC;IACnC,CAAC,CAAC,OAAOO,GAAG,EAAE;MACZ,IAAI,EAAEA,GAAG,YAAYhB,KAAK,CAACiB,KAAK,CAAC,EAAE;QACjC,MAAMD,GAAG;MACX;MAEA,OAAO;QACLE,OAAO,EAAEF,GAAG,CAACE,OAAO;QACpBC,IAAI,EAAEH,GAAG,CAACG;MACZ,CAAC;IACH;IAEA,IAAIL,OAAM,EAAE;MACV,OAAO,KAAK;IACd;;IAEA;IACA,OAAO;MACLI,OAAO,EAAE,+BAA+B;MACxCC,IAAI,EAAE;IACR,CAAC;EACH;EAEA,IAAIT,OAAO,YAAYW,KAAK,EAAE;IAC5BX,OAAO,GAAGV,KAAK,CAACsB,KAAK,CAACmC,SAAS,EAAE,IAAI,EAAE/C,OAAO,CAACA,OAAO,CAAC;EACzD,CAAC,MAAM,IAAIA,OAAO,YAAYU,QAAQ,EAAE;IACtCV,OAAO,GAAGV,KAAK,CAACsB,KAAK,CAACmC,SAAS,EAAE/C,OAAO,CAACA,OAAO,CAAC;EACnD;EAEA,IAAIA,OAAO,YAAYY,KAAK,EAAE;IAC5B,KAAK,IAAIoC,GAAC,GAAG,CAAC,EAAEA,GAAC,GAAGhD,OAAO,CAACgC,OAAO,CAACC,MAAM,EAAE,EAAEe,GAAC,EAAE;MAC/C,IAAM5C,QAAM,GAAGC,WAAW,CAACN,KAAK,EAAEC,OAAO,CAACgC,OAAO,CAACgB,GAAC,CAAC,CAAC;MACrD,IAAI,CAAC5C,QAAM,EAAE;QAEX;QACA,OAAO,KAAK;MACd;;MAEA;IACF;;IAEA;IACA,OAAO;MACLI,OAAO,EAAE,8DAA8D;MACvEC,IAAI,EAAE;IACR,CAAC;EACH;;EAEA;EACA;EACA,IAAIT,OAAO,YAAY8C,QAAQ,EAAE;IAC/B,IAAI/C,KAAK,YAAYC,OAAO,EAAE;MAC5B,OAAO,KAAK;IACd;IAEA,OAAO;MACLQ,OAAO,iBAAcR,OAAO,CAACyC,IAAI,IAAI,wBAAwB,CAAE;MAC/DhC,IAAI,EAAE;IACR,CAAC;EACH;EAEA,IAAI4C,kBAAkB,GAAG,KAAK;EAC9B,IAAIC,iBAAiB;EACrB,IAAItD,OAAO,YAAYiB,eAAe,EAAE;IACtCoC,kBAAkB,GAAG,IAAI;IACzBrD,OAAO,GAAGA,OAAO,CAACA,OAAO;EAC3B;EAEA,IAAIA,OAAO,YAAYkB,gBAAgB,EAAE;IACvCmC,kBAAkB,GAAG,IAAI;IACzBC,iBAAiB,GAAG,CAACtD,OAAO,CAACA,OAAO,CAAC;IACrCA,OAAO,GAAG,CAAC,CAAC,CAAC,CAAE;EACjB;;EAEA,IAAI,QAAOA,OAAO,MAAK,QAAQ,EAAE;IAC/B,OAAO;MACLQ,OAAO,EAAE,mCAAmC;MAC5CC,IAAI,EAAE;IACR,CAAC;EACH;;EAEA;EACA;EACA;EACA,IAAI,QAAOV,KAAK,MAAK,QAAQ,EAAE;IAC7B,OAAO;MACLS,OAAO,oCAAiCT,KAAK,CAAE;MAC/CU,IAAI,EAAE;IACR,CAAC;EACH;EAEA,IAAIV,KAAK,KAAK,IAAI,EAAE;IAClB,OAAO;MACLS,OAAO,6BAA6B;MACpCC,IAAI,EAAE;IACR,CAAC;EACH;EAEA,IAAI,CAAElB,aAAa,CAACQ,KAAK,CAAC,EAAE;IAC1B,OAAO;MACLS,OAAO,yBAAyB;MAChCC,IAAI,EAAE;IACR,CAAC;EACH;EAEA,IAAM8C,gBAAgB,GAAG3D,MAAM,CAAC4D,MAAM,CAAC,IAAI,CAAC;EAC5C,IAAMC,gBAAgB,GAAG7D,MAAM,CAAC4D,MAAM,CAAC,IAAI,CAAC;EAE5C5D,MAAM,CAAC8D,IAAI,CAAC1D,OAAO,CAAC,CAAC2D,OAAO,CAAC,UAAAC,GAAG,EAAI;IAClC,IAAMC,UAAU,GAAG7D,OAAO,CAAC4D,GAAG,CAAC;IAC/B,IAAIC,UAAU,YAAYnD,QAAQ,IAC9BmD,UAAU,YAAYlD,KAAK,EAAE;MAC/B8C,gBAAgB,CAACG,GAAG,CAAC,GAAGC,UAAU,CAAC7D,OAAO;IAC5C,CAAC,MAAM;MACLuD,gBAAgB,CAACK,GAAG,CAAC,GAAGC,UAAU;IACpC;EACF,CAAC,CAAC;EAEF,KAAK,IAAID,GAAG,2CAAIhE,MAAM,CAACG,KAAK,CAAC,GAAE;IAC7B,IAAM+D,QAAQ,GAAG/D,KAAK,CAAC6D,GAAG,CAAC;IAC3B,IAAIjE,MAAM,CAACoE,IAAI,CAACR,gBAAgB,EAAEK,GAAG,CAAC,EAAE;MACtC,IAAMxD,QAAM,GAAGC,WAAW,CAACyD,QAAQ,EAAEP,gBAAgB,CAACK,GAAG,CAAC,CAAC;MAC3D,IAAIxD,QAAM,EAAE;QACVA,QAAM,CAACK,IAAI,GAAG2C,YAAY,CAACQ,GAAG,EAAExD,QAAM,CAACK,IAAI,CAAC;QAC5C,OAAOL,QAAM;MACf;MAEA,OAAOmD,gBAAgB,CAACK,GAAG,CAAC;IAC9B,CAAC,MAAM,IAAIjE,MAAM,CAACoE,IAAI,CAACN,gBAAgB,EAAEG,GAAG,CAAC,EAAE;MAC7C,IAAMxD,QAAM,GAAGC,WAAW,CAACyD,QAAQ,EAAEL,gBAAgB,CAACG,GAAG,CAAC,CAAC;MAC3D,IAAIxD,QAAM,EAAE;QACVA,QAAM,CAACK,IAAI,GAAG2C,YAAY,CAACQ,GAAG,EAAExD,QAAM,CAACK,IAAI,CAAC;QAC5C,OAAOL,QAAM;MACf;IAEF,CAAC,MAAM;MACL,IAAI,CAACiD,kBAAkB,EAAE;QACvB,OAAO;UACL7C,OAAO,EAAE,aAAa;UACtBC,IAAI,EAAEmD;QACR,CAAC;MACH;MAEA,IAAIN,iBAAiB,EAAE;QACrB,IAAMlD,QAAM,GAAGC,WAAW,CAACyD,QAAQ,EAAER,iBAAiB,CAAC,CAAC,CAAC,CAAC;QAC1D,IAAIlD,QAAM,EAAE;UACVA,QAAM,CAACK,IAAI,GAAG2C,YAAY,CAACQ,GAAG,EAAExD,QAAM,CAACK,IAAI,CAAC;UAC5C,OAAOL,QAAM;QACf;MACF;IACF;EACF;EAEA,IAAMsD,IAAI,GAAG9D,MAAM,CAAC8D,IAAI,CAACH,gBAAgB,CAAC;EAC1C,IAAIG,IAAI,CAACzB,MAAM,EAAE;IACf,OAAO;MACLzB,OAAO,oBAAkBkD,IAAI,CAAC,CAAC,CAAC,MAAG;MACnCjD,IAAI,EAAE;IACR,CAAC;EACH;AACF,CAAC;AAAC,IAEImB,eAAe;EACnB,yBAAaf,IAAI,EAAEc,WAAW,EAAE;IAE9B;IACA;IACA,IAAI,CAACd,IAAI,sBAAOA,IAAI,CAAC;;IAErB;IACA;IACA;IACA,IAAI,CAACA,IAAI,CAACmD,OAAO,EAAE;IACnB,IAAI,CAACrC,WAAW,GAAGA,WAAW;EAChC;EAAC;EAAA,OAEDxB,QAAQ;IAAR,kBAASJ,KAAK,EAAE;MACd,IAAI,IAAI,CAACkE,iBAAiB,CAAClE,KAAK,CAAC,EAAE;QACjC;MACF;;MAEA;MACA;MACA;MACA,IAAIkD,KAAK,CAACC,OAAO,CAACnD,KAAK,CAAC,IAAIoD,WAAW,CAACpD,KAAK,CAAC,EAAE;QAC9CkD,KAAK,CAACpD,SAAS,CAAC8D,OAAO,CAACI,IAAI,CAAChE,KAAK,EAAE,IAAI,CAACkE,iBAAiB,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC;MACxE;IACF;IAAC;EAAA;EAAA,OAEDD,iBAAiB;IAAjB,2BAAkBlE,KAAK,EAAE;MACvB,KAAK,IAAIiD,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACnC,IAAI,CAACoB,MAAM,EAAE,EAAEe,CAAC,EAAE;QAEzC;QACA;QACA;QACA;QACA,IAAIjD,KAAK,KAAK,IAAI,CAACc,IAAI,CAACmC,CAAC,CAAC,IACrBJ,MAAM,CAACuB,KAAK,CAACpE,KAAK,CAAC,IAAI6C,MAAM,CAACuB,KAAK,CAAC,IAAI,CAACtD,IAAI,CAACmC,CAAC,CAAC,CAAE,EAAE;UACvD,IAAI,CAACnC,IAAI,CAACuD,MAAM,CAACpB,CAAC,EAAE,CAAC,CAAC;UACtB,OAAO,IAAI;QACb;MACF;MACA,OAAO,KAAK;IACd;IAAC;EAAA;EAAA,OAEDjB,sCAAsC;IAAtC,kDAAyC;MACvC,IAAI,IAAI,CAAClB,IAAI,CAACoB,MAAM,GAAG,CAAC,EACtB,MAAM,IAAI1B,KAAK,2CAAyC,IAAI,CAACoB,WAAW,CAAG;IAC/E;IAAC;EAAA;EAAA;AAAA;AAGH,IAAM0C,WAAW,GAAG,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,EAC9E,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EACvE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EACtE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EACpE,QAAQ,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,UAAU,EAC3E,UAAU,EAAE,UAAU,EAAE,WAAW,EAAE,WAAW,EAAE,WAAW,EAAE,YAAY,EAC3E,YAAY,CAAC;;AAEf;AACA;AACA,IAAMjB,YAAY,GAAG,UAACQ,GAAG,EAAEU,IAAI,EAAK;EAClC,IAAK,OAAOV,GAAG,KAAM,QAAQ,IAAIA,GAAG,CAACW,KAAK,CAAC,UAAU,CAAC,EAAE;IACtDX,GAAG,SAAOA,GAAG,MAAG;EAClB,CAAC,MAAM,IAAI,CAACA,GAAG,CAACW,KAAK,CAAC,uBAAuB,CAAC,IACnCF,WAAW,CAACG,OAAO,CAACZ,GAAG,CAAC,IAAI,CAAC,EAAE;IACxCA,GAAG,GAAGrB,IAAI,CAACD,SAAS,CAAC,CAACsB,GAAG,CAAC,CAAC;EAC7B;EAEA,IAAIU,IAAI,IAAIA,IAAI,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;IAC3B,OAAUV,GAAG,SAAIU,IAAI;EACvB;EAEA,OAAOV,GAAG,GAAGU,IAAI;AACnB,CAAC;AAED,IAAMG,QAAQ,GAAG,UAAA1E,KAAK;EAAA,OAAI,QAAOA,KAAK,MAAK,QAAQ,IAAIA,KAAK,KAAK,IAAI;AAAA;AAErE,IAAM2E,eAAe,GAAG,UAAAC,IAAI;EAAA,OAC1BF,QAAQ,CAACE,IAAI,CAAC,IACd/E,MAAM,CAACC,SAAS,CAAC+E,QAAQ,CAACb,IAAI,CAACY,IAAI,CAAC,KAAK,oBAAoB;AAAA;AAE/D,IAAMxB,WAAW,GAAGuB,eAAe,CAAC,YAAW;EAAE,OAAOG,SAAS;AAAE,CAAC,EAAE,CAAC,GACrEH,eAAe,GACf,UAAA3E,KAAK;EAAA,OAAI0E,QAAQ,CAAC1E,KAAK,CAAC,IAAI,OAAOA,KAAK,CAAC+E,MAAM,KAAK,UAAU;AAAA,E;;;;;;;;;;;ACviBhE/F,MAAM,CAACK,MAAM,CAAC;EAACG,aAAa,EAAC,YAAU;IAAC,OAAOA,aAAa;EAAA;AAAC,CAAC,CAAC;AAA/D;;AAEA,IAAMwF,UAAU,GAAG,CAAC,CAAC;AAErB,IAAMH,QAAQ,GAAGG,UAAU,CAACH,QAAQ;AAEpC,IAAMjF,MAAM,GAAGC,MAAM,CAACC,SAAS,CAACC,cAAc;AAE9C,IAAMkF,UAAU,GAAGrF,MAAM,CAACiF,QAAQ;AAElC,IAAMK,oBAAoB,GAAGD,UAAU,CAACjB,IAAI,CAACnE,MAAM,CAAC;AAEpD,IAAMsF,QAAQ,GAAGtF,MAAM,CAACuF,cAAc;AAE/B,IAAM5F,aAAa,GAAG,UAAA6F,GAAG,EAAI;EAClC,IAAIC,KAAK;EACT,IAAIC,IAAI;;EAER;EACA;EACA,IAAI,CAACF,GAAG,IAAIR,QAAQ,CAACb,IAAI,CAACqB,GAAG,CAAC,KAAK,iBAAiB,EAAE;IACpD,OAAO,KAAK;EACd;EAEAC,KAAK,GAAGH,QAAQ,CAACE,GAAG,CAAC;;EAErB;EACA,IAAI,CAACC,KAAK,EAAE;IACV,OAAO,IAAI;EACb;;EAEA;EACAC,IAAI,GAAG3F,MAAM,CAACoE,IAAI,CAACsB,KAAK,EAAE,aAAa,CAAC,IAAIA,KAAK,CAACE,WAAW;EAC7D,OAAO,OAAOD,IAAI,KAAK,UAAU,IAC/BN,UAAU,CAACjB,IAAI,CAACuB,IAAI,CAAC,KAAKL,oBAAoB;AAClD,CAAC,C","file":"/packages/check.js","sourcesContent":["// XXX docs\nimport { isPlainObject } from './isPlainObject';\n\n// Things we explicitly do NOT support:\n//    - heterogenous arrays\n\nconst currentArgumentChecker = new Meteor.EnvironmentVariable;\nconst hasOwn = Object.prototype.hasOwnProperty;\n\n/**\n * @summary Check that a value matches a [pattern](#matchpatterns).\n * If the value does not match the pattern, throw a `Match.Error`.\n *\n * Particularly useful to assert that arguments to a function have the right\n * types and structure.\n * @locus Anywhere\n * @param {Any} value The value to check\n * @param {MatchPattern} pattern The pattern to match `value` against\n */\nexport function check(value, pattern) {\n  // Record that check got called, if somebody cared.\n  //\n  // We use getOrNullIfOutsideFiber so that it's OK to call check()\n  // from non-Fiber server contexts; the downside is that if you forget to\n  // bindEnvironment on some random callback in your method/publisher,\n  // it might not find the argumentChecker and you'll get an error about\n  // not checking an argument that it looks like you're checking (instead\n  // of just getting a \"Node code must run in a Fiber\" error).\n  const argChecker = currentArgumentChecker.getOrNullIfOutsideFiber();\n  if (argChecker) {\n    argChecker.checking(value);\n  }\n\n  const result = testSubtree(value, pattern);\n  if (result) {\n    const err = new Match.Error(result.message);\n    if (result.path) {\n      err.message += ` in field ${result.path}`;\n      err.path = result.path;\n    }\n\n    throw err;\n  }\n};\n\n/**\n * @namespace Match\n * @summary The namespace for all Match types and methods.\n */\nexport const Match = {\n  Optional: function(pattern) {\n    return new Optional(pattern);\n  },\n\n  Maybe: function(pattern) {\n    return new Maybe(pattern);\n  },\n\n  OneOf: function(...args) {\n    return new OneOf(args);\n  },\n\n  Any: ['__any__'],\n  Where: function(condition) {\n    return new Where(condition);\n  },\n\n  ObjectIncluding: function(pattern) {\n    return new ObjectIncluding(pattern)\n  },\n\n  ObjectWithValues: function(pattern) {\n    return new ObjectWithValues(pattern);\n  },\n\n  // Matches only signed 32-bit integers\n  Integer: ['__integer__'],\n\n  // XXX matchers should know how to describe themselves for errors\n  Error: Meteor.makeErrorType('Match.Error', function (msg) {\n    this.message = `Match error: ${msg}`;\n\n    // The path of the value that failed to match. Initially empty, this gets\n    // populated by catching and rethrowing the exception as it goes back up the\n    // stack.\n    // E.g.: \"vals[3].entity.created\"\n    this.path = '';\n\n    // If this gets sent over DDP, don't give full internal details but at least\n    // provide something better than 500 Internal server error.\n    this.sanitizedError = new Meteor.Error(400, 'Match failed');\n  }),\n\n  // Tests to see if value matches pattern. Unlike check, it merely returns true\n  // or false (unless an error other than Match.Error was thrown). It does not\n  // interact with _failIfArgumentsAreNotAllChecked.\n  // XXX maybe also implement a Match.match which returns more information about\n  //     failures but without using exception handling or doing what check()\n  //     does with _failIfArgumentsAreNotAllChecked and Meteor.Error conversion\n\n  /**\n   * @summary Returns true if the value matches the pattern.\n   * @locus Anywhere\n   * @param {Any} value The value to check\n   * @param {MatchPattern} pattern The pattern to match `value` against\n   */\n  test(value, pattern) {\n    return !testSubtree(value, pattern);\n  },\n\n  // Runs `f.apply(context, args)`. If check() is not called on every element of\n  // `args` (either directly or in the first level of an array), throws an error\n  // (using `description` in the message).\n  _failIfArgumentsAreNotAllChecked(f, context, args, description) {\n    const argChecker = new ArgumentChecker(args, description);\n    const result = currentArgumentChecker.withValue(\n      argChecker,\n      () => f.apply(context, args)\n    );\n\n    // If f didn't itself throw, make sure it checked all of its arguments.\n    argChecker.throwUnlessAllArgumentsHaveBeenChecked();\n    return result;\n  }\n};\n\nclass Optional {\n  constructor(pattern) {\n    this.pattern = pattern;\n  }\n}\n\nclass Maybe {\n  constructor(pattern) {\n    this.pattern = pattern;\n  }\n}\n\nclass OneOf {\n  constructor(choices) {\n    if (!choices || choices.length === 0) {\n      throw new Error('Must provide at least one choice to Match.OneOf');\n    }\n\n    this.choices = choices;\n  }\n}\n\nclass Where {\n  constructor(condition) {\n    this.condition = condition;\n  }\n}\n\nclass ObjectIncluding {\n  constructor(pattern) {\n    this.pattern = pattern;\n  }\n}\n\nclass ObjectWithValues {\n  constructor(pattern) {\n    this.pattern = pattern;\n  }\n}\n\nconst stringForErrorMessage = (value, options = {}) => {\n  if ( value === null ) {\n    return 'null';\n  }\n\n  if ( options.onlyShowType ) {\n    return typeof value;\n  }\n\n  // Your average non-object things.  Saves from doing the try/catch below for.\n  if ( typeof value !== 'object' ) {\n    return EJSON.stringify(value)\n  }\n\n  try {\n\n    // Find objects with circular references since EJSON doesn't support them yet (Issue #4778 + Unaccepted PR)\n    // If the native stringify is going to choke, EJSON.stringify is going to choke too.\n    JSON.stringify(value);\n  } catch (stringifyError) {\n    if ( stringifyError.name === 'TypeError' ) {\n      return typeof value;\n    }\n  }\n\n  return EJSON.stringify(value);\n};\n\nconst typeofChecks = [\n  [String, 'string'],\n  [Number, 'number'],\n  [Boolean, 'boolean'],\n\n  // While we don't allow undefined/function in EJSON, this is good for optional\n  // arguments with OneOf.\n  [Function, 'function'],\n  [undefined, 'undefined'],\n];\n\n// Return `false` if it matches. Otherwise, return an object with a `message` and a `path` field.\nconst testSubtree = (value, pattern) => {\n\n  // Match anything!\n  if (pattern === Match.Any) {\n    return false;\n  }\n\n  // Basic atomic types.\n  // Do not match boxed objects (e.g. String, Boolean)\n  for (let i = 0; i < typeofChecks.length; ++i) {\n    if (pattern === typeofChecks[i][0]) {\n      if (typeof value === typeofChecks[i][1]) {\n        return false;\n      }\n\n      return {\n        message: `Expected ${typeofChecks[i][1]}, got ${stringForErrorMessage(value, { onlyShowType: true })}`,\n        path: '',\n      };\n    }\n  }\n\n  if (pattern === null) {\n    if (value === null) {\n      return false;\n    }\n\n    return {\n      message: `Expected null, got ${stringForErrorMessage(value)}`,\n      path: '',\n    };\n  }\n\n  // Strings, numbers, and booleans match literally. Goes well with Match.OneOf.\n  if (typeof pattern === 'string' || typeof pattern === 'number' || typeof pattern === 'boolean') {\n    if (value === pattern) {\n      return false;\n    }\n\n    return {\n      message: `Expected ${pattern}, got ${stringForErrorMessage(value)}`,\n      path: '',\n    };\n  }\n\n  // Match.Integer is special type encoded with array\n  if (pattern === Match.Integer) {\n\n    // There is no consistent and reliable way to check if variable is a 64-bit\n    // integer. One of the popular solutions is to get reminder of division by 1\n    // but this method fails on really large floats with big precision.\n    // E.g.: 1.348192308491824e+23 % 1 === 0 in V8\n    // Bitwise operators work consistantly but always cast variable to 32-bit\n    // signed integer according to JavaScript specs.\n    if (typeof value === 'number' && (value | 0) === value) {\n      return false;\n    }\n\n    return {\n      message: `Expected Integer, got ${stringForErrorMessage(value)}`,\n      path: '',\n    };\n  }\n\n  // 'Object' is shorthand for Match.ObjectIncluding({});\n  if (pattern === Object) {\n    pattern = Match.ObjectIncluding({});\n  }\n\n  // Array (checked AFTER Any, which is implemented as an Array).\n  if (pattern instanceof Array) {\n    if (pattern.length !== 1) {\n      return {\n        message: `Bad pattern: arrays must have one type element ${stringForErrorMessage(pattern)}`,\n        path: '',\n      };\n    }\n\n    if (!Array.isArray(value) && !isArguments(value)) {\n      return {\n        message: `Expected array, got ${stringForErrorMessage(value)}`,\n        path: '',\n      };\n    }\n\n    for (let i = 0, length = value.length; i < length; i++) {\n      const result = testSubtree(value[i], pattern[0]);\n      if (result) {\n        result.path = _prependPath(i, result.path);\n        return result;\n      }\n    }\n\n    return false;\n  }\n\n  // Arbitrary validation checks. The condition can return false or throw a\n  // Match.Error (ie, it can internally use check()) to fail.\n  if (pattern instanceof Where) {\n    let result;\n    try {\n      result = pattern.condition(value);\n    } catch (err) {\n      if (!(err instanceof Match.Error)) {\n        throw err;\n      }\n\n      return {\n        message: err.message,\n        path: err.path\n      };\n    }\n\n    if (result) {\n      return false;\n    }\n\n    // XXX this error is terrible\n    return {\n      message: 'Failed Match.Where validation',\n      path: '',\n    };\n  }\n\n  if (pattern instanceof Maybe) {\n    pattern = Match.OneOf(undefined, null, pattern.pattern);\n  } else if (pattern instanceof Optional) {\n    pattern = Match.OneOf(undefined, pattern.pattern);\n  }\n\n  if (pattern instanceof OneOf) {\n    for (let i = 0; i < pattern.choices.length; ++i) {\n      const result = testSubtree(value, pattern.choices[i]);\n      if (!result) {\n\n        // No error? Yay, return.\n        return false;\n      }\n\n      // Match errors just mean try another choice.\n    }\n\n    // XXX this error is terrible\n    return {\n      message: 'Failed Match.OneOf, Match.Maybe or Match.Optional validation',\n      path: '',\n    };\n  }\n\n  // A function that isn't something we special-case is assumed to be a\n  // constructor.\n  if (pattern instanceof Function) {\n    if (value instanceof pattern) {\n      return false;\n    }\n\n    return {\n      message: `Expected ${pattern.name || 'particular constructor'}`,\n      path: '',\n    };\n  }\n\n  let unknownKeysAllowed = false;\n  let unknownKeyPattern;\n  if (pattern instanceof ObjectIncluding) {\n    unknownKeysAllowed = true;\n    pattern = pattern.pattern;\n  }\n\n  if (pattern instanceof ObjectWithValues) {\n    unknownKeysAllowed = true;\n    unknownKeyPattern = [pattern.pattern];\n    pattern = {};  // no required keys\n  }\n\n  if (typeof pattern !== 'object') {\n    return {\n      message: 'Bad pattern: unknown pattern type',\n      path: '',\n    };\n  }\n\n  // An object, with required and optional keys. Note that this does NOT do\n  // structural matches against objects of special types that happen to match\n  // the pattern: this really needs to be a plain old {Object}!\n  if (typeof value !== 'object') {\n    return {\n      message: `Expected object, got ${typeof value}`,\n      path: '',\n    };\n  }\n\n  if (value === null) {\n    return {\n      message: `Expected object, got null`,\n      path: '',\n    };\n  }\n\n  if (! isPlainObject(value)) {\n    return {\n      message: `Expected plain object`,\n      path: '',\n    };\n  }\n\n  const requiredPatterns = Object.create(null);\n  const optionalPatterns = Object.create(null);\n\n  Object.keys(pattern).forEach(key => {\n    const subPattern = pattern[key];\n    if (subPattern instanceof Optional ||\n        subPattern instanceof Maybe) {\n      optionalPatterns[key] = subPattern.pattern;\n    } else {\n      requiredPatterns[key] = subPattern;\n    }\n  });\n\n  for (let key in Object(value)) {\n    const subValue = value[key];\n    if (hasOwn.call(requiredPatterns, key)) {\n      const result = testSubtree(subValue, requiredPatterns[key]);\n      if (result) {\n        result.path = _prependPath(key, result.path);\n        return result;\n      }\n\n      delete requiredPatterns[key];\n    } else if (hasOwn.call(optionalPatterns, key)) {\n      const result = testSubtree(subValue, optionalPatterns[key]);\n      if (result) {\n        result.path = _prependPath(key, result.path);\n        return result;\n      }\n\n    } else {\n      if (!unknownKeysAllowed) {\n        return {\n          message: 'Unknown key',\n          path: key,\n        };\n      }\n\n      if (unknownKeyPattern) {\n        const result = testSubtree(subValue, unknownKeyPattern[0]);\n        if (result) {\n          result.path = _prependPath(key, result.path);\n          return result;\n        }\n      }\n    }\n  }\n\n  const keys = Object.keys(requiredPatterns);\n  if (keys.length) {\n    return {\n      message: `Missing key '${keys[0]}'`,\n      path: '',\n    };\n  }\n};\n\nclass ArgumentChecker {\n  constructor (args, description) {\n\n    // Make a SHALLOW copy of the arguments. (We'll be doing identity checks\n    // against its contents.)\n    this.args = [...args];\n\n    // Since the common case will be to check arguments in order, and we splice\n    // out arguments when we check them, make it so we splice out from the end\n    // rather than the beginning.\n    this.args.reverse();\n    this.description = description;\n  }\n\n  checking(value) {\n    if (this._checkingOneValue(value)) {\n      return;\n    }\n\n    // Allow check(arguments, [String]) or check(arguments.slice(1), [String])\n    // or check([foo, bar], [String]) to count... but only if value wasn't\n    // itself an argument.\n    if (Array.isArray(value) || isArguments(value)) {\n      Array.prototype.forEach.call(value, this._checkingOneValue.bind(this));\n    }\n  }\n\n  _checkingOneValue(value) {\n    for (let i = 0; i < this.args.length; ++i) {\n\n      // Is this value one of the arguments? (This can have a false positive if\n      // the argument is an interned primitive, but it's still a good enough\n      // check.)\n      // (NaN is not === to itself, so we have to check specially.)\n      if (value === this.args[i] ||\n          (Number.isNaN(value) && Number.isNaN(this.args[i]))) {\n        this.args.splice(i, 1);\n        return true;\n      }\n    }\n    return false;\n  }\n\n  throwUnlessAllArgumentsHaveBeenChecked() {\n    if (this.args.length > 0)\n      throw new Error(`Did not check() all arguments during ${this.description}`);\n  }\n}\n\nconst _jsKeywords = ['do', 'if', 'in', 'for', 'let', 'new', 'try', 'var', 'case',\n  'else', 'enum', 'eval', 'false', 'null', 'this', 'true', 'void', 'with',\n  'break', 'catch', 'class', 'const', 'super', 'throw', 'while', 'yield',\n  'delete', 'export', 'import', 'public', 'return', 'static', 'switch',\n  'typeof', 'default', 'extends', 'finally', 'package', 'private', 'continue',\n  'debugger', 'function', 'arguments', 'interface', 'protected', 'implements',\n  'instanceof'];\n\n// Assumes the base of path is already escaped properly\n// returns key + base\nconst _prependPath = (key, base) => {\n  if ((typeof key) === 'number' || key.match(/^[0-9]+$/)) {\n    key = `[${key}]`;\n  } else if (!key.match(/^[a-z_$][0-9a-z_$]*$/i) ||\n             _jsKeywords.indexOf(key) >= 0) {\n    key = JSON.stringify([key]);\n  }\n\n  if (base && base[0] !== '[') {\n    return `${key}.${base}`;\n  }\n\n  return key + base;\n}\n\nconst isObject = value => typeof value === 'object' && value !== null;\n\nconst baseIsArguments = item =>\n  isObject(item) &&\n  Object.prototype.toString.call(item) === '[object Arguments]';\n\nconst isArguments = baseIsArguments(function() { return arguments; }()) ?\n  baseIsArguments :\n  value => isObject(value) && typeof value.callee === 'function';\n","// Copy of jQuery.isPlainObject for the server side from jQuery v3.1.1.\n\nconst class2type = {};\n\nconst toString = class2type.toString;\n\nconst hasOwn = Object.prototype.hasOwnProperty;\n\nconst fnToString = hasOwn.toString;\n\nconst ObjectFunctionString = fnToString.call(Object);\n\nconst getProto = Object.getPrototypeOf;\n\nexport const isPlainObject = obj => {\n  let proto;\n  let Ctor;\n\n  // Detect obvious negatives\n  // Use toString instead of jQuery.type to catch host objects\n  if (!obj || toString.call(obj) !== '[object Object]') {\n    return false;\n  }\n\n  proto = getProto(obj);\n\n  // Objects with no prototype (e.g., `Object.create( null )`) are plain\n  if (!proto) {\n    return true;\n  }\n\n  // Objects with prototype are plain iff they were constructed by a global Object function\n  Ctor = hasOwn.call(proto, 'constructor') && proto.constructor;\n  return typeof Ctor === 'function' && \n    fnToString.call(Ctor) === ObjectFunctionString;\n};\n"]}}]