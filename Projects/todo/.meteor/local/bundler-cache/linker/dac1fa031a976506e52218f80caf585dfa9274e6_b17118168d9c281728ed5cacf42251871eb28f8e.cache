[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar Random = Package.random.Random;\nvar meteorInstall = Package.modules.meteorInstall;\nvar meteorBabelHelpers = Package.modules.meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\nvar Symbol = Package['ecmascript-runtime-client'].Symbol;\nvar Map = Package['ecmascript-runtime-client'].Map;\nvar Set = Package['ecmascript-runtime-client'].Set;\n\n/* Package-scope variables */\nvar Retry;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"retry\":{\"retry.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                     //\n// packages/retry/retry.js                                                             //\n//                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////\n                                                                                       //\nmodule.export({\n  Retry: function () {\n    return Retry;\n  }\n});\nvar Retry = /*#__PURE__*/function () {\n  function Retry() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _ref$baseTimeout = _ref.baseTimeout,\n      baseTimeout = _ref$baseTimeout === void 0 ? 1000 : _ref$baseTimeout,\n      _ref$exponent = _ref.exponent,\n      exponent = _ref$exponent === void 0 ? 2.2 : _ref$exponent,\n      _ref$maxTimeout = _ref.maxTimeout,\n      maxTimeout = _ref$maxTimeout === void 0 ? 5 * 60 * 1000 : _ref$maxTimeout,\n      _ref$minTimeout = _ref.minTimeout,\n      minTimeout = _ref$minTimeout === void 0 ? 10 : _ref$minTimeout,\n      _ref$minCount = _ref.minCount,\n      minCount = _ref$minCount === void 0 ? 2 : _ref$minCount,\n      _ref$fuzz = _ref.fuzz,\n      fuzz = _ref$fuzz === void 0 ? 0.5 : _ref$fuzz;\n    this.baseTimeout = baseTimeout;\n    this.exponent = exponent;\n    this.maxTimeout = maxTimeout;\n    this.minTimeout = minTimeout;\n    this.minCount = minCount;\n    this.fuzz = fuzz;\n    this.retryTimer = null;\n  }\n\n  // Reset a pending retry, if any.\n  var _proto = Retry.prototype;\n  _proto.clear = function () {\n    function clear() {\n      if (this.retryTimer) {\n        clearTimeout(this.retryTimer);\n      }\n      this.retryTimer = null;\n    }\n    return clear;\n  }() // Calculate how long to wait in milliseconds to retry, based on the\n  // `count` of which retry this is.\n  ;\n  _proto._timeout = function () {\n    function _timeout(count) {\n      if (count < this.minCount) {\n        return this.minTimeout;\n      }\n\n      // fuzz the timeout randomly, to avoid reconnect storms when a\n      // server goes down.\n      var timeout = Math.min(this.maxTimeout, this.baseTimeout * Math.pow(this.exponent, count)) * (Random.fraction() * this.fuzz + (1 - this.fuzz / 2));\n      return timeout;\n    }\n    return _timeout;\n  }() // Call `fn` after a delay, based on the `count` of which retry this is.\n  ;\n  _proto.retryLater = function () {\n    function retryLater(count, fn) {\n      var timeout = this._timeout(count);\n      if (this.retryTimer) clearTimeout(this.retryTimer);\n      this.retryTimer = Meteor.setTimeout(fn, timeout);\n      return timeout;\n    }\n    return retryLater;\n  }();\n  return Retry;\n}();\n/////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\n\nvar exports = require(\"/node_modules/meteor/retry/retry.js\");\n\n/* Exports */\nPackage._define(\"retry\", exports, {\n  Retry: Retry\n});\n\n})();\n","servePath":"/packages/retry.js","sourceMap":{"version":3,"sources":["packages/retry/retry.js"],"names":["module","export","Retry","baseTimeout","exponent","maxTimeout","minTimeout","minCount","fuzz","retryTimer","clear","clearTimeout","_timeout","count","timeout","Math","min","pow","Random","fraction","retryLater","fn","Meteor","setTimeout"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAAA,MAAM,CAACC,MAAM,CAAC;EAACC,KAAK,EAAC,YAAU;IAAC,OAAOA,KAAK;EAAA;AAAC,CAAC,CAAC;AAAC,IAUnCA,KAAK;EAChB,iBASQ;IAAA,+EAAJ,CAAC,CAAC;MAAA,wBARJC,WAAW;MAAXA,WAAW,iCAAG,IAAI;MAAA,qBAClBC,QAAQ;MAARA,QAAQ,8BAAG,GAAG;MAAA,uBAGdC,UAAU;MAAVA,UAAU,gCAAG,CAAC,GAAG,EAAE,GAAG,IAAI;MAAA,uBAC1BC,UAAU;MAAVA,UAAU,gCAAG,EAAE;MAAA,qBACfC,QAAQ;MAARA,QAAQ,8BAAG,CAAC;MAAA,iBACZC,IAAI;MAAJA,IAAI,0BAAG,GAAG;IAEV,IAAI,CAACL,WAAW,GAAGA,WAAW;IAC9B,IAAI,CAACC,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACC,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACC,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACC,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACC,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,UAAU,GAAG,IAAI;EACxB;;EAEA;EAAA;EAAA,OACAC,KAAK;IAAL,iBAAQ;MACN,IAAI,IAAI,CAACD,UAAU,EAAE;QACnBE,YAAY,CAAC,IAAI,CAACF,UAAU,CAAC;MAC/B;MACA,IAAI,CAACA,UAAU,GAAG,IAAI;IACxB;IAAC;EAAA,IAED;EACA;EAAA;EAAA,OACAG,QAAQ;IAAR,kBAASC,KAAK,EAAE;MACd,IAAIA,KAAK,GAAG,IAAI,CAACN,QAAQ,EAAE;QACzB,OAAO,IAAI,CAACD,UAAU;MACxB;;MAEA;MACA;MACA,IAAIQ,OAAO,GAAGC,IAAI,CAACC,GAAG,CACpB,IAAI,CAACX,UAAU,EACf,IAAI,CAACF,WAAW,GAAGY,IAAI,CAACE,GAAG,CAAC,IAAI,CAACb,QAAQ,EAAES,KAAK,CAAC,CAClD,IACCK,MAAM,CAACC,QAAQ,EAAE,GAAG,IAAI,CAACX,IAAI,IAAI,CAAC,GAAG,IAAI,CAACA,IAAI,GAAG,CAAC,CAAC,CACpD;MAED,OAAOM,OAAO;IAChB;IAAC;EAAA,IAED;EAAA;EAAA,OACAM,UAAU;IAAV,oBAAWP,KAAK,EAAEQ,EAAE,EAAE;MACpB,IAAIP,OAAO,GAAG,IAAI,CAACF,QAAQ,CAACC,KAAK,CAAC;MAClC,IAAI,IAAI,CAACJ,UAAU,EACjBE,YAAY,CAAC,IAAI,CAACF,UAAU,CAAC;MAC/B,IAAI,CAACA,UAAU,GAAGa,MAAM,CAACC,UAAU,CAACF,EAAE,EAAEP,OAAO,CAAC;MAChD,OAAOA,OAAO;IAChB;IAAC;EAAA;EAAA;AAAA,I","file":"/packages/retry.js","sourcesContent":["// Retry logic with an exponential backoff.\n//\n// options:\n//  baseTimeout: time for initial reconnect attempt (ms).\n//  exponent: exponential factor to increase timeout each attempt.\n//  maxTimeout: maximum time between retries (ms).\n//  minCount: how many times to reconnect \"instantly\".\n//  minTimeout: time to wait for the first `minCount` retries (ms).\n//  fuzz: factor to randomize retry times by (to avoid retry storms).\n\nexport class Retry {\n  constructor({\n    baseTimeout = 1000,\n    exponent = 2.2,\n    // The default is high-ish to ensure a server can recover from a\n    // failure caused by load.\n    maxTimeout = 5 * 60 * 1000,\n    minTimeout = 10,\n    minCount = 2,\n    fuzz = 0.5,\n  } = {}) {\n    this.baseTimeout = baseTimeout;\n    this.exponent = exponent;\n    this.maxTimeout = maxTimeout;\n    this.minTimeout = minTimeout;\n    this.minCount = minCount;\n    this.fuzz = fuzz;\n    this.retryTimer = null;\n  }\n\n  // Reset a pending retry, if any.\n  clear() {\n    if (this.retryTimer) {\n      clearTimeout(this.retryTimer);\n    }\n    this.retryTimer = null;\n  }\n\n  // Calculate how long to wait in milliseconds to retry, based on the\n  // `count` of which retry this is.\n  _timeout(count) {\n    if (count < this.minCount) {\n      return this.minTimeout;\n    }\n\n    // fuzz the timeout randomly, to avoid reconnect storms when a\n    // server goes down.\n    var timeout = Math.min(\n      this.maxTimeout,\n      this.baseTimeout * Math.pow(this.exponent, count)\n    ) * (\n      Random.fraction() * this.fuzz + (1 - this.fuzz / 2)\n    );\n\n    return timeout;\n  }\n\n  // Call `fn` after a delay, based on the `count` of which retry this is.\n  retryLater(count, fn) {\n    var timeout = this._timeout(count);\n    if (this.retryTimer)\n      clearTimeout(this.retryTimer);\n    this.retryTimer = Meteor.setTimeout(fn, timeout);\n    return timeout;\n  }\n}\n"]}}]