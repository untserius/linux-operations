{"version":3,"sources":["meteor://ðŸ’»app/packages/minimongo/minimongo_client.js","meteor://ðŸ’»app/packages/minimongo/common.js","meteor://ðŸ’»app/packages/minimongo/constants.js","meteor://ðŸ’»app/packages/minimongo/cursor.js","meteor://ðŸ’»app/packages/minimongo/local_collection.js","meteor://ðŸ’»app/packages/minimongo/matcher.js","meteor://ðŸ’»app/packages/minimongo/minimongo_common.js","meteor://ðŸ’»app/packages/minimongo/observe_handle.js","meteor://ðŸ’»app/packages/minimongo/sorter.js"],"names":["module","link","_toConsumableArray","default","v","_typeof","export","hasOwn","ELEMENT_OPERATORS","compileDocumentSelector","equalityElementMatcher","expandArraysInBranches","isIndexable","isNumericKey","isOperatorObject","makeLookupFunction","nothingMatcher","pathsToTree","populateDocumentWithQueryFields","projectionDetails","regexpElementMatcher","LocalCollection","Object","prototype","hasOwnProperty","$lt","makeInequality","cmpValue","$gt","$lte","$gte","$mod","compileElementSelector","operand","Array","isArray","length","Error","divisor","remainder","value","$in","elementMatchers","map","option","RegExp","undefined","some","matcher","$size","dontExpandLeafArrays","$type","dontIncludeLeafArrays","operandAliasMap","call","_f","_type","$bitsAllSet","mask","getOperandBitmask","bitmask","getValueBitmask","every","byte","i","$bitsAnySet","$bitsAllClear","$bitsAnyClear","$regex","valueSelector","regexp","$options","test","source","$elemMatch","_isPlainObject","isDocMatcher","keys","filter","key","LOGICAL_OPERATORS","reduce","a","b","assign","subMatcher","inElemMatch","compileValueSelector","arrayElement","arg","dontIterate","result","$and","subSelector","andDocumentMatchers","compileArrayOfDocumentSelectors","$or","matchers","doc","fn","$nor","$where","selectorValue","_recordPathUsed","_hasWhere","Function","$comment","VALUE_OPERATORS","$eq","convertElementMatcherToBranchedMatcher","$not","invertBranchedMatcher","$ne","$nin","$exists","exists","everythingMatcher","$maxDistance","$near","$all","branchedMatchers","criterion","andBranchedMatchers","isRoot","_hasGeoQuery","maxDistance","point","distance","$geometry","type","GeoJSON","pointDistance","coordinates","pointToArray","geometryWithinRadius","distanceCoordinatePairs","branchedValues","branch","curDistance","_isUpdate","arrayIndices","andSomeMatchers","subMatchers","docOrBranches","match","subResult","selectors","docSelector","options","docMatchers","substr","_isSimple","lookUpByIndex","valueMatcher","Boolean","operatorBranchedMatcher","elementMatcher","branches","expanded","element","matched","pointA","pointB","Math","hypot","elementSelector","_equal","docOrBranchedValues","skipTheArrays","branchesOut","forEach","thisIsArray","push","concat","selector","Number","isInteger","Uint8Array","Int32Array","buffer","EJSON","isBinary","x","ArrayBuffer","max","view","isSafeInteger","Uint32Array","BYTES_PER_ELEMENT","insertIntoDocument","document","existingKey","indexOf","branchedMatcher","branchValues","obj","s","inconsistentOK","theseAreOperators","selKey","thisIsOperator","JSON","stringify","cmpValueComparator","operandType","_cmp","parts","split","firstPart","lookupRest","slice","join","buildResult","firstLevel","appendToResult","more","forSort","arrayIndex","MinimongoTest","MinimongoError","message","field","error","name","operatorMatchers","operator","simpleRange","includes","simpleEquality","simpleInclusion","paths","newLeafFn","conflictFn","root","path","pathArray","tree","success","lastKey","y","populateDocumentWithKeyValue","getPrototypeOf","populateDocumentWithObject","unprefixedKeys","op","validateObject","object","query","_selectorIsId","fields","fieldsKeys","sort","_id","including","keyPath","rule","projectionRulesTree","node","fullPath","currentPath","anotherPath","toString","lastIndex","validateKeyInPath","getAsyncMethodName","ASYNC_COLLECTION_METHODS","ASYNC_CURSOR_METHODS","method","replace","_regeneratorRuntime","Cursor","collection","sorter","Minimongo","Matcher","_selectorIsIdPerhapsAsObject","_selectorId","hasGeoQuery","Sorter","skip","limit","projection","_projectionFn","_compileProjection","_transform","wrapTransform","transform","Tracker","reactive","count","_depend","added","removed","_getRawObjects","ordered","fetch","addedBefore","changed","movedBefore","index","objects","next","done","syncResult","Symbol","iterator","Promise","resolve","callback","thisArg","getTransform","observe","_observeFromObserveChanges","observeChanges","_observeChangesCallbacksAreOrdered","_allow_unordered","distances","_IdMap","cursor","dirty","projectionFn","resultsSnapshot","qid","next_qid","queries","results","paused","wrapCallback","self","args","arguments","_observeQueue","queueTask","apply","_suppress_initial","clone","handle","ObserveHandle","stop","active","onInvalidate","drain","changers","dependency","Dependency","notify","bind","depend","_getCollectionName","applySkipLimit","selectedDoc","_docs","get","set","clear","id","matchResult","documentMatches","getComparator","_publishCursor","subscription","Package","mongo","Mongo","Collection","asyncIterator","asyncName","isCalledFromAsync","reject","_inheritsLoose","_objectSpread","Meteor","_SynchronousQueue","create","_savedOriginals","countDocuments","find","countAsync","estimatedDocumentCount","findOne","insert","assertHasValidFieldNames","_useOID","MongoID","ObjectID","Random","has","_saveOriginal","queriesToRecompute","_insertInResults","_recomputeResults","defer","pauseObservers","remove","equals","size","_eachPossiblyMatchingDoc","queryRemove","removeId","removeDoc","_removeFromResults","resumeObservers","_diffQueryChanges","retrieveOriginals","originals","saveOriginals","update","mod","qidToOriginalResults","docMap","idsMatched","_idsMatchedBySelector","memoizedCloneIfNeeded","docToMemoize","recomputeQids","updateCount","queryResult","_modifyAndNotify","multi","insertedId","upsert","_createUpsertDocument","_returnObject","numberAffected","specificIds","matched_before","old_doc","_modify","afterMatch","after","before","_updateInResults","oldResults","_CachingChangeObserver","orderedFromCallbacks","callbacks","docs","OrderedDict","idStringify","applyChange","putBefore","moveBefore","DiffSequence","applyChanges","idParse","IdMap","__wrappedTransform__","wrapped","transformed","nonreactive","_binarySearch","cmp","array","first","range","halfRange","floor","_checkSupportedProjection","_idProjection","details","ruleTree","subdoc","modifier","selectorDocument","isModify","_isModificationMod","newDoc","$set","isInsert","replacement","_diffObjects","left","right","diffObjects","newResults","observer","diffQueryChanges","_diffQueryOrderedChanges","diffQueryOrderedChanges","_diffQueryUnorderedChanges","diffQueryUnorderedChanges","_findInOrderedResults","subIds","_insertInSortedList","splice","isReplace","isModifier","setOnInsert","modFunc","MODIFIERS","keypath","keyparts","target","findModTarget","forbidArray","noCreate","NO_CREATE_MODIFIERS","pop","observeCallbacks","suppressed","observeChangesCallbacks","_observeCallbacksAreOrdered","indices","_no_indices","addedAt","changedAt","oldDoc","movedTo","from","to","removedAt","changeObserver","_fromObserve","nonMutatingCallbacks","changedFields","makeChangedFields","old_idx","new_idx","$currentDate","Date","$inc","$min","$max","$mul","$rename","target2","setPropertyError","$setOnInsert","$unset","$push","$each","toPush","position","$position","$slice","sortFunction","$sort","spliceArguments","$pushAll","$addToSet","isEach","values","toAdd","$pop","toPop","$pull","toPull","out","$pullAll","$bit","$v","invalidCharMsg","$","assertIsValidFieldName","usedArrayIndex","last","keypart","parseInt","Decimal","isUpdate","_paths","_matchingDocument","_selector","_docMatcher","_compileSelector","hasWhere","isSimple","_getPaths","keyOrderSensitive","_typeorder","t","ta","tb","oa","ob","toHexString","isNaN","getTime","minus","toNumber","toArray","LocalCollection_","spec","_sortSpecParts","_sortFunction","addSpecPart","ascending","charAt","lookup","affectedByModifier","_selectorForAffectedByModifier","_keyComparator","composeComparators","_keyFieldComparator","_getBaseComparator","_compareKeys","key1","key2","_generateKeysFromDoc","cb","pathFromIndices","knownPaths","valuesByIndexAndPath","usedPaths","soleKey","doc1","doc2","_getMinKeyFromDoc","minKey","part","invert","compare","comparatorArray"],"mappings":"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","file":"/packages/minimongo.js","sourcesContent":["import './minimongo_common.js';\n","import LocalCollection from './local_collection.js';\n\nexport const hasOwn = Object.prototype.hasOwnProperty;\n\n// Each element selector contains:\n//  - compileElementSelector, a function with args:\n//    - operand - the \"right hand side\" of the operator\n//    - valueSelector - the \"context\" for the operator (so that $regex can find\n//      $options)\n//    - matcher - the Matcher this is going into (so that $elemMatch can compile\n//      more things)\n//    returning a function mapping a single value to bool.\n//  - dontExpandLeafArrays, a bool which prevents expandArraysInBranches from\n//    being called\n//  - dontIncludeLeafArrays, a bool which causes an argument to be passed to\n//    expandArraysInBranches if it is called\nexport const ELEMENT_OPERATORS = {\n  $lt: makeInequality(cmpValue => cmpValue < 0),\n  $gt: makeInequality(cmpValue => cmpValue > 0),\n  $lte: makeInequality(cmpValue => cmpValue <= 0),\n  $gte: makeInequality(cmpValue => cmpValue >= 0),\n  $mod: {\n    compileElementSelector(operand) {\n      if (!(Array.isArray(operand) && operand.length === 2\n            && typeof operand[0] === 'number'\n            && typeof operand[1] === 'number')) {\n        throw Error('argument to $mod must be an array of two numbers');\n      }\n\n      // XXX could require to be ints or round or something\n      const divisor = operand[0];\n      const remainder = operand[1];\n      return value => (\n        typeof value === 'number' && value % divisor === remainder\n      );\n    },\n  },\n  $in: {\n    compileElementSelector(operand) {\n      if (!Array.isArray(operand)) {\n        throw Error('$in needs an array');\n      }\n\n      const elementMatchers = operand.map(option => {\n        if (option instanceof RegExp) {\n          return regexpElementMatcher(option);\n        }\n\n        if (isOperatorObject(option)) {\n          throw Error('cannot nest $ under $in');\n        }\n\n        return equalityElementMatcher(option);\n      });\n\n      return value => {\n        // Allow {a: {$in: [null]}} to match when 'a' does not exist.\n        if (value === undefined) {\n          value = null;\n        }\n\n        return elementMatchers.some(matcher => matcher(value));\n      };\n    },\n  },\n  $size: {\n    // {a: [[5, 5]]} must match {a: {$size: 1}} but not {a: {$size: 2}}, so we\n    // don't want to consider the element [5,5] in the leaf array [[5,5]] as a\n    // possible value.\n    dontExpandLeafArrays: true,\n    compileElementSelector(operand) {\n      if (typeof operand === 'string') {\n        // Don't ask me why, but by experimentation, this seems to be what Mongo\n        // does.\n        operand = 0;\n      } else if (typeof operand !== 'number') {\n        throw Error('$size needs a number');\n      }\n\n      return value => Array.isArray(value) && value.length === operand;\n    },\n  },\n  $type: {\n    // {a: [5]} must not match {a: {$type: 4}} (4 means array), but it should\n    // match {a: {$type: 1}} (1 means number), and {a: [[5]]} must match {$a:\n    // {$type: 4}}. Thus, when we see a leaf array, we *should* expand it but\n    // should *not* include it itself.\n    dontIncludeLeafArrays: true,\n    compileElementSelector(operand) {\n      if (typeof operand === 'string') {\n        const operandAliasMap = {\n          'double': 1,\n          'string': 2,\n          'object': 3,\n          'array': 4,\n          'binData': 5,\n          'undefined': 6,\n          'objectId': 7,\n          'bool': 8,\n          'date': 9,\n          'null': 10,\n          'regex': 11,\n          'dbPointer': 12,\n          'javascript': 13,\n          'symbol': 14,\n          'javascriptWithScope': 15,\n          'int': 16,\n          'timestamp': 17,\n          'long': 18,\n          'decimal': 19,\n          'minKey': -1,\n          'maxKey': 127,\n        };\n        if (!hasOwn.call(operandAliasMap, operand)) {\n          throw Error(`unknown string alias for $type: ${operand}`);\n        }\n        operand = operandAliasMap[operand];\n      } else if (typeof operand === 'number') {\n        if (operand === 0 || operand < -1\n          || (operand > 19 && operand !== 127)) {\n          throw Error(`Invalid numerical $type code: ${operand}`);\n        }\n      } else {\n        throw Error('argument to $type is not a number or a string');\n      }\n\n      return value => (\n        value !== undefined && LocalCollection._f._type(value) === operand\n      );\n    },\n  },\n  $bitsAllSet: {\n    compileElementSelector(operand) {\n      const mask = getOperandBitmask(operand, '$bitsAllSet');\n      return value => {\n        const bitmask = getValueBitmask(value, mask.length);\n        return bitmask && mask.every((byte, i) => (bitmask[i] & byte) === byte);\n      };\n    },\n  },\n  $bitsAnySet: {\n    compileElementSelector(operand) {\n      const mask = getOperandBitmask(operand, '$bitsAnySet');\n      return value => {\n        const bitmask = getValueBitmask(value, mask.length);\n        return bitmask && mask.some((byte, i) => (~bitmask[i] & byte) !== byte);\n      };\n    },\n  },\n  $bitsAllClear: {\n    compileElementSelector(operand) {\n      const mask = getOperandBitmask(operand, '$bitsAllClear');\n      return value => {\n        const bitmask = getValueBitmask(value, mask.length);\n        return bitmask && mask.every((byte, i) => !(bitmask[i] & byte));\n      };\n    },\n  },\n  $bitsAnyClear: {\n    compileElementSelector(operand) {\n      const mask = getOperandBitmask(operand, '$bitsAnyClear');\n      return value => {\n        const bitmask = getValueBitmask(value, mask.length);\n        return bitmask && mask.some((byte, i) => (bitmask[i] & byte) !== byte);\n      };\n    },\n  },\n  $regex: {\n    compileElementSelector(operand, valueSelector) {\n      if (!(typeof operand === 'string' || operand instanceof RegExp)) {\n        throw Error('$regex has to be a string or RegExp');\n      }\n\n      let regexp;\n      if (valueSelector.$options !== undefined) {\n        // Options passed in $options (even the empty string) always overrides\n        // options in the RegExp object itself.\n\n        // Be clear that we only support the JS-supported options, not extended\n        // ones (eg, Mongo supports x and s). Ideally we would implement x and s\n        // by transforming the regexp, but not today...\n        if (/[^gim]/.test(valueSelector.$options)) {\n          throw new Error('Only the i, m, and g regexp options are supported');\n        }\n\n        const source = operand instanceof RegExp ? operand.source : operand;\n        regexp = new RegExp(source, valueSelector.$options);\n      } else if (operand instanceof RegExp) {\n        regexp = operand;\n      } else {\n        regexp = new RegExp(operand);\n      }\n\n      return regexpElementMatcher(regexp);\n    },\n  },\n  $elemMatch: {\n    dontExpandLeafArrays: true,\n    compileElementSelector(operand, valueSelector, matcher) {\n      if (!LocalCollection._isPlainObject(operand)) {\n        throw Error('$elemMatch need an object');\n      }\n\n      const isDocMatcher = !isOperatorObject(\n        Object.keys(operand)\n          .filter(key => !hasOwn.call(LOGICAL_OPERATORS, key))\n          .reduce((a, b) => Object.assign(a, {[b]: operand[b]}), {}),\n        true);\n\n      let subMatcher;\n      if (isDocMatcher) {\n        // This is NOT the same as compileValueSelector(operand), and not just\n        // because of the slightly different calling convention.\n        // {$elemMatch: {x: 3}} means \"an element has a field x:3\", not\n        // \"consists only of a field x:3\". Also, regexps and sub-$ are allowed.\n        subMatcher =\n          compileDocumentSelector(operand, matcher, {inElemMatch: true});\n      } else {\n        subMatcher = compileValueSelector(operand, matcher);\n      }\n\n      return value => {\n        if (!Array.isArray(value)) {\n          return false;\n        }\n\n        for (let i = 0; i < value.length; ++i) {\n          const arrayElement = value[i];\n          let arg;\n          if (isDocMatcher) {\n            // We can only match {$elemMatch: {b: 3}} against objects.\n            // (We can also match against arrays, if there's numeric indices,\n            // eg {$elemMatch: {'0.b': 3}} or {$elemMatch: {0: 3}}.)\n            if (!isIndexable(arrayElement)) {\n              return false;\n            }\n\n            arg = arrayElement;\n          } else {\n            // dontIterate ensures that {a: {$elemMatch: {$gt: 5}}} matches\n            // {a: [8]} but not {a: [[8]]}\n            arg = [{value: arrayElement, dontIterate: true}];\n          }\n          // XXX support $near in $elemMatch by propagating $distance?\n          if (subMatcher(arg).result) {\n            return i; // specially understood to mean \"use as arrayIndices\"\n          }\n        }\n\n        return false;\n      };\n    },\n  },\n};\n\n// Operators that appear at the top level of a document selector.\nconst LOGICAL_OPERATORS = {\n  $and(subSelector, matcher, inElemMatch) {\n    return andDocumentMatchers(\n      compileArrayOfDocumentSelectors(subSelector, matcher, inElemMatch)\n    );\n  },\n\n  $or(subSelector, matcher, inElemMatch) {\n    const matchers = compileArrayOfDocumentSelectors(\n      subSelector,\n      matcher,\n      inElemMatch\n    );\n\n    // Special case: if there is only one matcher, use it directly, *preserving*\n    // any arrayIndices it returns.\n    if (matchers.length === 1) {\n      return matchers[0];\n    }\n\n    return doc => {\n      const result = matchers.some(fn => fn(doc).result);\n      // $or does NOT set arrayIndices when it has multiple\n      // sub-expressions. (Tested against MongoDB.)\n      return {result};\n    };\n  },\n\n  $nor(subSelector, matcher, inElemMatch) {\n    const matchers = compileArrayOfDocumentSelectors(\n      subSelector,\n      matcher,\n      inElemMatch\n    );\n    return doc => {\n      const result = matchers.every(fn => !fn(doc).result);\n      // Never set arrayIndices, because we only match if nothing in particular\n      // 'matched' (and because this is consistent with MongoDB).\n      return {result};\n    };\n  },\n\n  $where(selectorValue, matcher) {\n    // Record that *any* path may be used.\n    matcher._recordPathUsed('');\n    matcher._hasWhere = true;\n\n    if (!(selectorValue instanceof Function)) {\n      // XXX MongoDB seems to have more complex logic to decide where or or not\n      // to add 'return'; not sure exactly what it is.\n      selectorValue = Function('obj', `return ${selectorValue}`);\n    }\n\n    // We make the document available as both `this` and `obj`.\n    // // XXX not sure what we should do if this throws\n    return doc => ({result: selectorValue.call(doc, doc)});\n  },\n\n  // This is just used as a comment in the query (in MongoDB, it also ends up in\n  // query logs); it has no effect on the actual selection.\n  $comment() {\n    return () => ({result: true});\n  },\n};\n\n// Operators that (unlike LOGICAL_OPERATORS) pertain to individual paths in a\n// document, but (unlike ELEMENT_OPERATORS) do not have a simple definition as\n// \"match each branched value independently and combine with\n// convertElementMatcherToBranchedMatcher\".\nconst VALUE_OPERATORS = {\n  $eq(operand) {\n    return convertElementMatcherToBranchedMatcher(\n      equalityElementMatcher(operand)\n    );\n  },\n  $not(operand, valueSelector, matcher) {\n    return invertBranchedMatcher(compileValueSelector(operand, matcher));\n  },\n  $ne(operand) {\n    return invertBranchedMatcher(\n      convertElementMatcherToBranchedMatcher(equalityElementMatcher(operand))\n    );\n  },\n  $nin(operand) {\n    return invertBranchedMatcher(\n      convertElementMatcherToBranchedMatcher(\n        ELEMENT_OPERATORS.$in.compileElementSelector(operand)\n      )\n    );\n  },\n  $exists(operand) {\n    const exists = convertElementMatcherToBranchedMatcher(\n      value => value !== undefined\n    );\n    return operand ? exists : invertBranchedMatcher(exists);\n  },\n  // $options just provides options for $regex; its logic is inside $regex\n  $options(operand, valueSelector) {\n    if (!hasOwn.call(valueSelector, '$regex')) {\n      throw Error('$options needs a $regex');\n    }\n\n    return everythingMatcher;\n  },\n  // $maxDistance is basically an argument to $near\n  $maxDistance(operand, valueSelector) {\n    if (!valueSelector.$near) {\n      throw Error('$maxDistance needs a $near');\n    }\n\n    return everythingMatcher;\n  },\n  $all(operand, valueSelector, matcher) {\n    if (!Array.isArray(operand)) {\n      throw Error('$all requires array');\n    }\n\n    // Not sure why, but this seems to be what MongoDB does.\n    if (operand.length === 0) {\n      return nothingMatcher;\n    }\n\n    const branchedMatchers = operand.map(criterion => {\n      // XXX handle $all/$elemMatch combination\n      if (isOperatorObject(criterion)) {\n        throw Error('no $ expressions in $all');\n      }\n\n      // This is always a regexp or equality selector.\n      return compileValueSelector(criterion, matcher);\n    });\n\n    // andBranchedMatchers does NOT require all selectors to return true on the\n    // SAME branch.\n    return andBranchedMatchers(branchedMatchers);\n  },\n  $near(operand, valueSelector, matcher, isRoot) {\n    if (!isRoot) {\n      throw Error('$near can\\'t be inside another $ operator');\n    }\n\n    matcher._hasGeoQuery = true;\n\n    // There are two kinds of geodata in MongoDB: legacy coordinate pairs and\n    // GeoJSON. They use different distance metrics, too. GeoJSON queries are\n    // marked with a $geometry property, though legacy coordinates can be\n    // matched using $geometry.\n    let maxDistance, point, distance;\n    if (LocalCollection._isPlainObject(operand) && hasOwn.call(operand, '$geometry')) {\n      // GeoJSON \"2dsphere\" mode.\n      maxDistance = operand.$maxDistance;\n      point = operand.$geometry;\n      distance = value => {\n        // XXX: for now, we don't calculate the actual distance between, say,\n        // polygon and circle. If people care about this use-case it will get\n        // a priority.\n        if (!value) {\n          return null;\n        }\n\n        if (!value.type) {\n          return GeoJSON.pointDistance(\n            point,\n            {type: 'Point', coordinates: pointToArray(value)}\n          );\n        }\n\n        if (value.type === 'Point') {\n          return GeoJSON.pointDistance(point, value);\n        }\n\n        return GeoJSON.geometryWithinRadius(value, point, maxDistance)\n          ? 0\n          : maxDistance + 1;\n      };\n    } else {\n      maxDistance = valueSelector.$maxDistance;\n\n      if (!isIndexable(operand)) {\n        throw Error('$near argument must be coordinate pair or GeoJSON');\n      }\n\n      point = pointToArray(operand);\n\n      distance = value => {\n        if (!isIndexable(value)) {\n          return null;\n        }\n\n        return distanceCoordinatePairs(point, value);\n      };\n    }\n\n    return branchedValues => {\n      // There might be multiple points in the document that match the given\n      // field. Only one of them needs to be within $maxDistance, but we need to\n      // evaluate all of them and use the nearest one for the implicit sort\n      // specifier. (That's why we can't just use ELEMENT_OPERATORS here.)\n      //\n      // Note: This differs from MongoDB's implementation, where a document will\n      // actually show up *multiple times* in the result set, with one entry for\n      // each within-$maxDistance branching point.\n      const result = {result: false};\n      expandArraysInBranches(branchedValues).every(branch => {\n        // if operation is an update, don't skip branches, just return the first\n        // one (#3599)\n        let curDistance;\n        if (!matcher._isUpdate) {\n          if (!(typeof branch.value === 'object')) {\n            return true;\n          }\n\n          curDistance = distance(branch.value);\n\n          // Skip branches that aren't real points or are too far away.\n          if (curDistance === null || curDistance > maxDistance) {\n            return true;\n          }\n\n          // Skip anything that's a tie.\n          if (result.distance !== undefined && result.distance <= curDistance) {\n            return true;\n          }\n        }\n\n        result.result = true;\n        result.distance = curDistance;\n\n        if (branch.arrayIndices) {\n          result.arrayIndices = branch.arrayIndices;\n        } else {\n          delete result.arrayIndices;\n        }\n\n        return !matcher._isUpdate;\n      });\n\n      return result;\n    };\n  },\n};\n\n// NB: We are cheating and using this function to implement 'AND' for both\n// 'document matchers' and 'branched matchers'. They both return result objects\n// but the argument is different: for the former it's a whole doc, whereas for\n// the latter it's an array of 'branched values'.\nfunction andSomeMatchers(subMatchers) {\n  if (subMatchers.length === 0) {\n    return everythingMatcher;\n  }\n\n  if (subMatchers.length === 1) {\n    return subMatchers[0];\n  }\n\n  return docOrBranches => {\n    const match = {};\n    match.result = subMatchers.every(fn => {\n      const subResult = fn(docOrBranches);\n\n      // Copy a 'distance' number out of the first sub-matcher that has\n      // one. Yes, this means that if there are multiple $near fields in a\n      // query, something arbitrary happens; this appears to be consistent with\n      // Mongo.\n      if (subResult.result &&\n          subResult.distance !== undefined &&\n          match.distance === undefined) {\n        match.distance = subResult.distance;\n      }\n\n      // Similarly, propagate arrayIndices from sub-matchers... but to match\n      // MongoDB behavior, this time the *last* sub-matcher with arrayIndices\n      // wins.\n      if (subResult.result && subResult.arrayIndices) {\n        match.arrayIndices = subResult.arrayIndices;\n      }\n\n      return subResult.result;\n    });\n\n    // If we didn't actually match, forget any extra metadata we came up with.\n    if (!match.result) {\n      delete match.distance;\n      delete match.arrayIndices;\n    }\n\n    return match;\n  };\n}\n\nconst andDocumentMatchers = andSomeMatchers;\nconst andBranchedMatchers = andSomeMatchers;\n\nfunction compileArrayOfDocumentSelectors(selectors, matcher, inElemMatch) {\n  if (!Array.isArray(selectors) || selectors.length === 0) {\n    throw Error('$and/$or/$nor must be nonempty array');\n  }\n\n  return selectors.map(subSelector => {\n    if (!LocalCollection._isPlainObject(subSelector)) {\n      throw Error('$or/$and/$nor entries need to be full objects');\n    }\n\n    return compileDocumentSelector(subSelector, matcher, {inElemMatch});\n  });\n}\n\n// Takes in a selector that could match a full document (eg, the original\n// selector). Returns a function mapping document->result object.\n//\n// matcher is the Matcher object we are compiling.\n//\n// If this is the root document selector (ie, not wrapped in $and or the like),\n// then isRoot is true. (This is used by $near.)\nexport function compileDocumentSelector(docSelector, matcher, options = {}) {\n  const docMatchers = Object.keys(docSelector).map(key => {\n    const subSelector = docSelector[key];\n\n    if (key.substr(0, 1) === '$') {\n      // Outer operators are either logical operators (they recurse back into\n      // this function), or $where.\n      if (!hasOwn.call(LOGICAL_OPERATORS, key)) {\n        throw new Error(`Unrecognized logical operator: ${key}`);\n      }\n\n      matcher._isSimple = false;\n      return LOGICAL_OPERATORS[key](subSelector, matcher, options.inElemMatch);\n    }\n\n    // Record this path, but only if we aren't in an elemMatcher, since in an\n    // elemMatch this is a path inside an object in an array, not in the doc\n    // root.\n    if (!options.inElemMatch) {\n      matcher._recordPathUsed(key);\n    }\n\n    // Don't add a matcher if subSelector is a function -- this is to match\n    // the behavior of Meteor on the server (inherited from the node mongodb\n    // driver), which is to ignore any part of a selector which is a function.\n    if (typeof subSelector === 'function') {\n      return undefined;\n    }\n\n    const lookUpByIndex = makeLookupFunction(key);\n    const valueMatcher = compileValueSelector(\n      subSelector,\n      matcher,\n      options.isRoot\n    );\n\n    return doc => valueMatcher(lookUpByIndex(doc));\n  }).filter(Boolean);\n\n  return andDocumentMatchers(docMatchers);\n}\n\n// Takes in a selector that could match a key-indexed value in a document; eg,\n// {$gt: 5, $lt: 9}, or a regular expression, or any non-expression object (to\n// indicate equality).  Returns a branched matcher: a function mapping\n// [branched value]->result object.\nfunction compileValueSelector(valueSelector, matcher, isRoot) {\n  if (valueSelector instanceof RegExp) {\n    matcher._isSimple = false;\n    return convertElementMatcherToBranchedMatcher(\n      regexpElementMatcher(valueSelector)\n    );\n  }\n\n  if (isOperatorObject(valueSelector)) {\n    return operatorBranchedMatcher(valueSelector, matcher, isRoot);\n  }\n\n  return convertElementMatcherToBranchedMatcher(\n    equalityElementMatcher(valueSelector)\n  );\n}\n\n// Given an element matcher (which evaluates a single value), returns a branched\n// value (which evaluates the element matcher on all the branches and returns a\n// more structured return value possibly including arrayIndices).\nfunction convertElementMatcherToBranchedMatcher(elementMatcher, options = {}) {\n  return branches => {\n    const expanded = options.dontExpandLeafArrays\n      ? branches\n      : expandArraysInBranches(branches, options.dontIncludeLeafArrays);\n\n    const match = {};\n    match.result = expanded.some(element => {\n      let matched = elementMatcher(element.value);\n\n      // Special case for $elemMatch: it means \"true, and use this as an array\n      // index if I didn't already have one\".\n      if (typeof matched === 'number') {\n        // XXX This code dates from when we only stored a single array index\n        // (for the outermost array). Should we be also including deeper array\n        // indices from the $elemMatch match?\n        if (!element.arrayIndices) {\n          element.arrayIndices = [matched];\n        }\n\n        matched = true;\n      }\n\n      // If some element matched, and it's tagged with array indices, include\n      // those indices in our result object.\n      if (matched && element.arrayIndices) {\n        match.arrayIndices = element.arrayIndices;\n      }\n\n      return matched;\n    });\n\n    return match;\n  };\n}\n\n// Helpers for $near.\nfunction distanceCoordinatePairs(a, b) {\n  const pointA = pointToArray(a);\n  const pointB = pointToArray(b);\n\n  return Math.hypot(pointA[0] - pointB[0], pointA[1] - pointB[1]);\n}\n\n// Takes something that is not an operator object and returns an element matcher\n// for equality with that thing.\nexport function equalityElementMatcher(elementSelector) {\n  if (isOperatorObject(elementSelector)) {\n    throw Error('Can\\'t create equalityValueSelector for operator object');\n  }\n\n  // Special-case: null and undefined are equal (if you got undefined in there\n  // somewhere, or if you got it due to some branch being non-existent in the\n  // weird special case), even though they aren't with EJSON.equals.\n  // undefined or null\n  if (elementSelector == null) {\n    return value => value == null;\n  }\n\n  return value => LocalCollection._f._equal(elementSelector, value);\n}\n\nfunction everythingMatcher(docOrBranchedValues) {\n  return {result: true};\n}\n\nexport function expandArraysInBranches(branches, skipTheArrays) {\n  const branchesOut = [];\n\n  branches.forEach(branch => {\n    const thisIsArray = Array.isArray(branch.value);\n\n    // We include the branch itself, *UNLESS* we it's an array that we're going\n    // to iterate and we're told to skip arrays.  (That's right, we include some\n    // arrays even skipTheArrays is true: these are arrays that were found via\n    // explicit numerical indices.)\n    if (!(skipTheArrays && thisIsArray && !branch.dontIterate)) {\n      branchesOut.push({arrayIndices: branch.arrayIndices, value: branch.value});\n    }\n\n    if (thisIsArray && !branch.dontIterate) {\n      branch.value.forEach((value, i) => {\n        branchesOut.push({\n          arrayIndices: (branch.arrayIndices || []).concat(i),\n          value\n        });\n      });\n    }\n  });\n\n  return branchesOut;\n}\n\n// Helpers for $bitsAllSet/$bitsAnySet/$bitsAllClear/$bitsAnyClear.\nfunction getOperandBitmask(operand, selector) {\n  // numeric bitmask\n  // You can provide a numeric bitmask to be matched against the operand field.\n  // It must be representable as a non-negative 32-bit signed integer.\n  // Otherwise, $bitsAllSet will return an error.\n  if (Number.isInteger(operand) && operand >= 0) {\n    return new Uint8Array(new Int32Array([operand]).buffer);\n  }\n\n  // bindata bitmask\n  // You can also use an arbitrarily large BinData instance as a bitmask.\n  if (EJSON.isBinary(operand)) {\n    return new Uint8Array(operand.buffer);\n  }\n\n  // position list\n  // If querying a list of bit positions, each <position> must be a non-negative\n  // integer. Bit positions start at 0 from the least significant bit.\n  if (Array.isArray(operand) &&\n      operand.every(x => Number.isInteger(x) && x >= 0)) {\n    const buffer = new ArrayBuffer((Math.max(...operand) >> 3) + 1);\n    const view = new Uint8Array(buffer);\n\n    operand.forEach(x => {\n      view[x >> 3] |= 1 << (x & 0x7);\n    });\n\n    return view;\n  }\n\n  // bad operand\n  throw Error(\n    `operand to ${selector} must be a numeric bitmask (representable as a ` +\n    'non-negative 32-bit signed integer), a bindata bitmask or an array with ' +\n    'bit positions (non-negative integers)'\n  );\n}\n\nfunction getValueBitmask(value, length) {\n  // The field value must be either numerical or a BinData instance. Otherwise,\n  // $bits... will not match the current document.\n\n  // numerical\n  if (Number.isSafeInteger(value)) {\n    // $bits... will not match numerical values that cannot be represented as a\n    // signed 64-bit integer. This can be the case if a value is either too\n    // large or small to fit in a signed 64-bit integer, or if it has a\n    // fractional component.\n    const buffer = new ArrayBuffer(\n      Math.max(length, 2 * Uint32Array.BYTES_PER_ELEMENT)\n    );\n\n    let view = new Uint32Array(buffer, 0, 2);\n    view[0] = value % ((1 << 16) * (1 << 16)) | 0;\n    view[1] = value / ((1 << 16) * (1 << 16)) | 0;\n\n    // sign extension\n    if (value < 0) {\n      view = new Uint8Array(buffer, 2);\n      view.forEach((byte, i) => {\n        view[i] = 0xff;\n      });\n    }\n\n    return new Uint8Array(buffer);\n  }\n\n  // bindata\n  if (EJSON.isBinary(value)) {\n    return new Uint8Array(value.buffer);\n  }\n\n  // no match\n  return false;\n}\n\n// Actually inserts a key value into the selector document\n// However, this checks there is no ambiguity in setting\n// the value for the given key, throws otherwise\nfunction insertIntoDocument(document, key, value) {\n  Object.keys(document).forEach(existingKey => {\n    if (\n      (existingKey.length > key.length && existingKey.indexOf(`${key}.`) === 0) ||\n      (key.length > existingKey.length && key.indexOf(`${existingKey}.`) === 0)\n    ) {\n      throw new Error(\n        `cannot infer query fields to set, both paths '${existingKey}' and ` +\n        `'${key}' are matched`\n      );\n    } else if (existingKey === key) {\n      throw new Error(\n        `cannot infer query fields to set, path '${key}' is matched twice`\n      );\n    }\n  });\n\n  document[key] = value;\n}\n\n// Returns a branched matcher that matches iff the given matcher does not.\n// Note that this implicitly \"deMorganizes\" the wrapped function.  ie, it\n// means that ALL branch values need to fail to match innerBranchedMatcher.\nfunction invertBranchedMatcher(branchedMatcher) {\n  return branchValues => {\n    // We explicitly choose to strip arrayIndices here: it doesn't make sense to\n    // say \"update the array element that does not match something\", at least\n    // in mongo-land.\n    return {result: !branchedMatcher(branchValues).result};\n  };\n}\n\nexport function isIndexable(obj) {\n  return Array.isArray(obj) || LocalCollection._isPlainObject(obj);\n}\n\nexport function isNumericKey(s) {\n  return /^[0-9]+$/.test(s);\n}\n\n// Returns true if this is an object with at least one key and all keys begin\n// with $.  Unless inconsistentOK is set, throws if some keys begin with $ and\n// others don't.\nexport function isOperatorObject(valueSelector, inconsistentOK) {\n  if (!LocalCollection._isPlainObject(valueSelector)) {\n    return false;\n  }\n\n  let theseAreOperators = undefined;\n  Object.keys(valueSelector).forEach(selKey => {\n    const thisIsOperator = selKey.substr(0, 1) === '$' || selKey === 'diff';\n\n    if (theseAreOperators === undefined) {\n      theseAreOperators = thisIsOperator;\n    } else if (theseAreOperators !== thisIsOperator) {\n      if (!inconsistentOK) {\n        throw new Error(\n          `Inconsistent operator: ${JSON.stringify(valueSelector)}`\n        );\n      }\n\n      theseAreOperators = false;\n    }\n  });\n\n  return !!theseAreOperators; // {} has no operators\n}\n\n// Helper for $lt/$gt/$lte/$gte.\nfunction makeInequality(cmpValueComparator) {\n  return {\n    compileElementSelector(operand) {\n      // Arrays never compare false with non-arrays for any inequality.\n      // XXX This was behavior we observed in pre-release MongoDB 2.5, but\n      //     it seems to have been reverted.\n      //     See https://jira.mongodb.org/browse/SERVER-11444\n      if (Array.isArray(operand)) {\n        return () => false;\n      }\n\n      // Special case: consider undefined and null the same (so true with\n      // $gte/$lte).\n      if (operand === undefined) {\n        operand = null;\n      }\n\n      const operandType = LocalCollection._f._type(operand);\n\n      return value => {\n        if (value === undefined) {\n          value = null;\n        }\n\n        // Comparisons are never true among things of different type (except\n        // null vs undefined).\n        if (LocalCollection._f._type(value) !== operandType) {\n          return false;\n        }\n\n        return cmpValueComparator(LocalCollection._f._cmp(value, operand));\n      };\n    },\n  };\n}\n\n// makeLookupFunction(key) returns a lookup function.\n//\n// A lookup function takes in a document and returns an array of matching\n// branches.  If no arrays are found while looking up the key, this array will\n// have exactly one branches (possibly 'undefined', if some segment of the key\n// was not found).\n//\n// If arrays are found in the middle, this can have more than one element, since\n// we 'branch'. When we 'branch', if there are more key segments to look up,\n// then we only pursue branches that are plain objects (not arrays or scalars).\n// This means we can actually end up with no branches!\n//\n// We do *NOT* branch on arrays that are found at the end (ie, at the last\n// dotted member of the key). We just return that array; if you want to\n// effectively 'branch' over the array's values, post-process the lookup\n// function with expandArraysInBranches.\n//\n// Each branch is an object with keys:\n//  - value: the value at the branch\n//  - dontIterate: an optional bool; if true, it means that 'value' is an array\n//    that expandArraysInBranches should NOT expand. This specifically happens\n//    when there is a numeric index in the key, and ensures the\n//    perhaps-surprising MongoDB behavior where {'a.0': 5} does NOT\n//    match {a: [[5]]}.\n//  - arrayIndices: if any array indexing was done during lookup (either due to\n//    explicit numeric indices or implicit branching), this will be an array of\n//    the array indices used, from outermost to innermost; it is falsey or\n//    absent if no array index is used. If an explicit numeric index is used,\n//    the index will be followed in arrayIndices by the string 'x'.\n//\n//    Note: arrayIndices is used for two purposes. First, it is used to\n//    implement the '$' modifier feature, which only ever looks at its first\n//    element.\n//\n//    Second, it is used for sort key generation, which needs to be able to tell\n//    the difference between different paths. Moreover, it needs to\n//    differentiate between explicit and implicit branching, which is why\n//    there's the somewhat hacky 'x' entry: this means that explicit and\n//    implicit array lookups will have different full arrayIndices paths. (That\n//    code only requires that different paths have different arrayIndices; it\n//    doesn't actually 'parse' arrayIndices. As an alternative, arrayIndices\n//    could contain objects with flags like 'implicit', but I think that only\n//    makes the code surrounding them more complex.)\n//\n//    (By the way, this field ends up getting passed around a lot without\n//    cloning, so never mutate any arrayIndices field/var in this package!)\n//\n//\n// At the top level, you may only pass in a plain object or array.\n//\n// See the test 'minimongo - lookup' for some examples of what lookup functions\n// return.\nexport function makeLookupFunction(key, options = {}) {\n  const parts = key.split('.');\n  const firstPart = parts.length ? parts[0] : '';\n  const lookupRest = (\n    parts.length > 1 &&\n    makeLookupFunction(parts.slice(1).join('.'), options)\n  );\n\n  function buildResult(arrayIndices, dontIterate, value) {\n    return arrayIndices && arrayIndices.length\n      ? dontIterate\n        ? [{ arrayIndices, dontIterate, value }]\n        : [{ arrayIndices, value }]\n      : dontIterate\n        ? [{ dontIterate, value }]\n        : [{ value }];\n  }\n\n  // Doc will always be a plain object or an array.\n  // apply an explicit numeric index, an array.\n  return (doc, arrayIndices) => {\n    if (Array.isArray(doc)) {\n      // If we're being asked to do an invalid lookup into an array (non-integer\n      // or out-of-bounds), return no results (which is different from returning\n      // a single undefined result, in that `null` equality checks won't match).\n      if (!(isNumericKey(firstPart) && firstPart < doc.length)) {\n        return [];\n      }\n\n      // Remember that we used this array index. Include an 'x' to indicate that\n      // the previous index came from being considered as an explicit array\n      // index (not branching).\n      arrayIndices = arrayIndices ? arrayIndices.concat(+firstPart, 'x') : [+firstPart, 'x'];\n    }\n\n    // Do our first lookup.\n    const firstLevel = doc[firstPart];\n\n    // If there is no deeper to dig, return what we found.\n    //\n    // If what we found is an array, most value selectors will choose to treat\n    // the elements of the array as matchable values in their own right, but\n    // that's done outside of the lookup function. (Exceptions to this are $size\n    // and stuff relating to $elemMatch.  eg, {a: {$size: 2}} does not match {a:\n    // [[1, 2]]}.)\n    //\n    // That said, if we just did an *explicit* array lookup (on doc) to find\n    // firstLevel, and firstLevel is an array too, we do NOT want value\n    // selectors to iterate over it.  eg, {'a.0': 5} does not match {a: [[5]]}.\n    // So in that case, we mark the return value as 'don't iterate'.\n    if (!lookupRest) {\n      return buildResult(\n        arrayIndices,\n        Array.isArray(doc) && Array.isArray(firstLevel),\n        firstLevel,\n      );\n    }\n\n    // We need to dig deeper.  But if we can't, because what we've found is not\n    // an array or plain object, we're done. If we just did a numeric index into\n    // an array, we return nothing here (this is a change in Mongo 2.5 from\n    // Mongo 2.4, where {'a.0.b': null} stopped matching {a: [5]}). Otherwise,\n    // return a single `undefined` (which can, for example, match via equality\n    // with `null`).\n    if (!isIndexable(firstLevel)) {\n      if (Array.isArray(doc)) {\n        return [];\n      }\n\n      return buildResult(arrayIndices, false, undefined);\n    }\n\n    const result = [];\n    const appendToResult = more => {\n      result.push(...more);\n    };\n\n    // Dig deeper: look up the rest of the parts on whatever we've found.\n    // (lookupRest is smart enough to not try to do invalid lookups into\n    // firstLevel if it's an array.)\n    appendToResult(lookupRest(firstLevel, arrayIndices));\n\n    // If we found an array, then in *addition* to potentially treating the next\n    // part as a literal integer lookup, we should also 'branch': try to look up\n    // the rest of the parts on each array element in parallel.\n    //\n    // In this case, we *only* dig deeper into array elements that are plain\n    // objects. (Recall that we only got this far if we have further to dig.)\n    // This makes sense: we certainly don't dig deeper into non-indexable\n    // objects. And it would be weird to dig into an array: it's simpler to have\n    // a rule that explicit integer indexes only apply to an outer array, not to\n    // an array you find after a branching search.\n    //\n    // In the special case of a numeric part in a *sort selector* (not a query\n    // selector), we skip the branching: we ONLY allow the numeric part to mean\n    // 'look up this index' in that case, not 'also look up this index in all\n    // the elements of the array'.\n    if (Array.isArray(firstLevel) &&\n        !(isNumericKey(parts[1]) && options.forSort)) {\n      firstLevel.forEach((branch, arrayIndex) => {\n        if (LocalCollection._isPlainObject(branch)) {\n          appendToResult(lookupRest(branch, arrayIndices ? arrayIndices.concat(arrayIndex) : [arrayIndex]));\n        }\n      });\n    }\n\n    return result;\n  };\n}\n\n// Object exported only for unit testing.\n// Use it to export private functions to test in Tinytest.\nMinimongoTest = {makeLookupFunction};\nMinimongoError = (message, options = {}) => {\n  if (typeof message === 'string' && options.field) {\n    message += ` for field '${options.field}'`;\n  }\n\n  const error = new Error(message);\n  error.name = 'MinimongoError';\n  return error;\n};\n\nexport function nothingMatcher(docOrBranchedValues) {\n  return {result: false};\n}\n\n// Takes an operator object (an object with $ keys) and returns a branched\n// matcher for it.\nfunction operatorBranchedMatcher(valueSelector, matcher, isRoot) {\n  // Each valueSelector works separately on the various branches.  So one\n  // operator can match one branch and another can match another branch.  This\n  // is OK.\n  const operatorMatchers = Object.keys(valueSelector).map(operator => {\n    const operand = valueSelector[operator];\n\n    const simpleRange = (\n      ['$lt', '$lte', '$gt', '$gte'].includes(operator) &&\n      typeof operand === 'number'\n    );\n\n    const simpleEquality = (\n      ['$ne', '$eq'].includes(operator) &&\n      operand !== Object(operand)\n    );\n\n    const simpleInclusion = (\n      ['$in', '$nin'].includes(operator)\n      && Array.isArray(operand)\n      && !operand.some(x => x === Object(x))\n    );\n\n    if (!(simpleRange || simpleInclusion || simpleEquality)) {\n      matcher._isSimple = false;\n    }\n\n    if (hasOwn.call(VALUE_OPERATORS, operator)) {\n      return VALUE_OPERATORS[operator](operand, valueSelector, matcher, isRoot);\n    }\n\n    if (hasOwn.call(ELEMENT_OPERATORS, operator)) {\n      const options = ELEMENT_OPERATORS[operator];\n      return convertElementMatcherToBranchedMatcher(\n        options.compileElementSelector(operand, valueSelector, matcher),\n        options\n      );\n    }\n\n    throw new Error(`Unrecognized operator: ${operator}`);\n  });\n\n  return andBranchedMatchers(operatorMatchers);\n}\n\n// paths - Array: list of mongo style paths\n// newLeafFn - Function: of form function(path) should return a scalar value to\n//                       put into list created for that path\n// conflictFn - Function: of form function(node, path, fullPath) is called\n//                        when building a tree path for 'fullPath' node on\n//                        'path' was already a leaf with a value. Must return a\n//                        conflict resolution.\n// initial tree - Optional Object: starting tree.\n// @returns - Object: tree represented as a set of nested objects\nexport function pathsToTree(paths, newLeafFn, conflictFn, root = {}) {\n  paths.forEach(path => {\n    const pathArray = path.split('.');\n    let tree = root;\n\n    // use .every just for iteration with break\n    const success = pathArray.slice(0, -1).every((key, i) => {\n      if (!hasOwn.call(tree, key)) {\n        tree[key] = {};\n      } else if (tree[key] !== Object(tree[key])) {\n        tree[key] = conflictFn(\n          tree[key],\n          pathArray.slice(0, i + 1).join('.'),\n          path\n        );\n\n        // break out of loop if we are failing for this path\n        if (tree[key] !== Object(tree[key])) {\n          return false;\n        }\n      }\n\n      tree = tree[key];\n\n      return true;\n    });\n\n    if (success) {\n      const lastKey = pathArray[pathArray.length - 1];\n      if (hasOwn.call(tree, lastKey)) {\n        tree[lastKey] = conflictFn(tree[lastKey], path, path);\n      } else {\n        tree[lastKey] = newLeafFn(path);\n      }\n    }\n  });\n\n  return root;\n}\n\n// Makes sure we get 2 elements array and assume the first one to be x and\n// the second one to y no matter what user passes.\n// In case user passes { lon: x, lat: y } returns [x, y]\nfunction pointToArray(point) {\n  return Array.isArray(point) ? point.slice() : [point.x, point.y];\n}\n\n// Creating a document from an upsert is quite tricky.\n// E.g. this selector: {\"$or\": [{\"b.foo\": {\"$all\": [\"bar\"]}}]}, should result\n// in: {\"b.foo\": \"bar\"}\n// But this selector: {\"$or\": [{\"b\": {\"foo\": {\"$all\": [\"bar\"]}}}]} should throw\n// an error\n\n// Some rules (found mainly with trial & error, so there might be more):\n// - handle all childs of $and (or implicit $and)\n// - handle $or nodes with exactly 1 child\n// - ignore $or nodes with more than 1 child\n// - ignore $nor and $not nodes\n// - throw when a value can not be set unambiguously\n// - every value for $all should be dealt with as separate $eq-s\n// - threat all children of $all as $eq setters (=> set if $all.length === 1,\n//   otherwise throw error)\n// - you can not mix '$'-prefixed keys and non-'$'-prefixed keys\n// - you can only have dotted keys on a root-level\n// - you can not have '$'-prefixed keys more than one-level deep in an object\n\n// Handles one key/value pair to put in the selector document\nfunction populateDocumentWithKeyValue(document, key, value) {\n  if (value && Object.getPrototypeOf(value) === Object.prototype) {\n    populateDocumentWithObject(document, key, value);\n  } else if (!(value instanceof RegExp)) {\n    insertIntoDocument(document, key, value);\n  }\n}\n\n// Handles a key, value pair to put in the selector document\n// if the value is an object\nfunction populateDocumentWithObject(document, key, value) {\n  const keys = Object.keys(value);\n  const unprefixedKeys = keys.filter(op => op[0] !== '$');\n\n  if (unprefixedKeys.length > 0 || !keys.length) {\n    // Literal (possibly empty) object ( or empty object )\n    // Don't allow mixing '$'-prefixed with non-'$'-prefixed fields\n    if (keys.length !== unprefixedKeys.length) {\n      throw new Error(`unknown operator: ${unprefixedKeys[0]}`);\n    }\n\n    validateObject(value, key);\n    insertIntoDocument(document, key, value);\n  } else {\n    Object.keys(value).forEach(op => {\n      const object = value[op];\n\n      if (op === '$eq') {\n        populateDocumentWithKeyValue(document, key, object);\n      } else if (op === '$all') {\n        // every value for $all should be dealt with as separate $eq-s\n        object.forEach(element =>\n          populateDocumentWithKeyValue(document, key, element)\n        );\n      }\n    });\n  }\n}\n\n// Fills a document with certain fields from an upsert selector\nexport function populateDocumentWithQueryFields(query, document = {}) {\n  if (Object.getPrototypeOf(query) === Object.prototype) {\n    // handle implicit $and\n    Object.keys(query).forEach(key => {\n      const value = query[key];\n\n      if (key === '$and') {\n        // handle explicit $and\n        value.forEach(element =>\n          populateDocumentWithQueryFields(element, document)\n        );\n      } else if (key === '$or') {\n        // handle $or nodes with exactly 1 child\n        if (value.length === 1) {\n          populateDocumentWithQueryFields(value[0], document);\n        }\n      } else if (key[0] !== '$') {\n        // Ignore other '$'-prefixed logical selectors\n        populateDocumentWithKeyValue(document, key, value);\n      }\n    });\n  } else {\n    // Handle meteor-specific shortcut for selecting _id\n    if (LocalCollection._selectorIsId(query)) {\n      insertIntoDocument(document, '_id', query);\n    }\n  }\n\n  return document;\n}\n\n// Traverses the keys of passed projection and constructs a tree where all\n// leaves are either all True or all False\n// @returns Object:\n//  - tree - Object - tree representation of keys involved in projection\n//  (exception for '_id' as it is a special case handled separately)\n//  - including - Boolean - \"take only certain fields\" type of projection\nexport function projectionDetails(fields) {\n  // Find the non-_id keys (_id is handled specially because it is included\n  // unless explicitly excluded). Sort the keys, so that our code to detect\n  // overlaps like 'foo' and 'foo.bar' can assume that 'foo' comes first.\n  let fieldsKeys = Object.keys(fields).sort();\n\n  // If _id is the only field in the projection, do not remove it, since it is\n  // required to determine if this is an exclusion or exclusion. Also keep an\n  // inclusive _id, since inclusive _id follows the normal rules about mixing\n  // inclusive and exclusive fields. If _id is not the only field in the\n  // projection and is exclusive, remove it so it can be handled later by a\n  // special case, since exclusive _id is always allowed.\n  if (!(fieldsKeys.length === 1 && fieldsKeys[0] === '_id') &&\n      !(fieldsKeys.includes('_id') && fields._id)) {\n    fieldsKeys = fieldsKeys.filter(key => key !== '_id');\n  }\n\n  let including = null; // Unknown\n\n  fieldsKeys.forEach(keyPath => {\n    const rule = !!fields[keyPath];\n\n    if (including === null) {\n      including = rule;\n    }\n\n    // This error message is copied from MongoDB shell\n    if (including !== rule) {\n      throw MinimongoError(\n        'You cannot currently mix including and excluding fields.'\n      );\n    }\n  });\n\n  const projectionRulesTree = pathsToTree(\n    fieldsKeys,\n    path => including,\n    (node, path, fullPath) => {\n      // Check passed projection fields' keys: If you have two rules such as\n      // 'foo.bar' and 'foo.bar.baz', then the result becomes ambiguous. If\n      // that happens, there is a probability you are doing something wrong,\n      // framework should notify you about such mistake earlier on cursor\n      // compilation step than later during runtime.  Note, that real mongo\n      // doesn't do anything about it and the later rule appears in projection\n      // project, more priority it takes.\n      //\n      // Example, assume following in mongo shell:\n      // > db.coll.insert({ a: { b: 23, c: 44 } })\n      // > db.coll.find({}, { 'a': 1, 'a.b': 1 })\n      // {\"_id\": ObjectId(\"520bfe456024608e8ef24af3\"), \"a\": {\"b\": 23}}\n      // > db.coll.find({}, { 'a.b': 1, 'a': 1 })\n      // {\"_id\": ObjectId(\"520bfe456024608e8ef24af3\"), \"a\": {\"b\": 23, \"c\": 44}}\n      //\n      // Note, how second time the return set of keys is different.\n      const currentPath = fullPath;\n      const anotherPath = path;\n      throw MinimongoError(\n        `both ${currentPath} and ${anotherPath} found in fields option, ` +\n        'using both of them may trigger unexpected behavior. Did you mean to ' +\n        'use only one of them?'\n      );\n    });\n\n  return {including, tree: projectionRulesTree};\n}\n\n// Takes a RegExp object and returns an element matcher.\nexport function regexpElementMatcher(regexp) {\n  return value => {\n    if (value instanceof RegExp) {\n      return value.toString() === regexp.toString();\n    }\n\n    // Regexps only work against strings.\n    if (typeof value !== 'string') {\n      return false;\n    }\n\n    // Reset regexp's state to avoid inconsistent matching for objects with the\n    // same value on consecutive calls of regexp.test. This happens only if the\n    // regexp has the 'g' flag. Also note that ES6 introduces a new flag 'y' for\n    // which we should *not* change the lastIndex but MongoDB doesn't support\n    // either of these flags.\n    regexp.lastIndex = 0;\n\n    return regexp.test(value);\n  };\n}\n\n// Validates the key in a path.\n// Objects that are nested more then 1 level cannot have dotted fields\n// or fields starting with '$'\nfunction validateKeyInPath(key, path) {\n  if (key.includes('.')) {\n    throw new Error(\n      `The dotted field '${key}' in '${path}.${key} is not valid for storage.`\n    );\n  }\n\n  if (key[0] === '$') {\n    throw new Error(\n      `The dollar ($) prefixed field  '${path}.${key} is not valid for storage.`\n    );\n  }\n}\n\n// Recursively validates an object that is nested more than one level deep\nfunction validateObject(object, path) {\n  if (object && Object.getPrototypeOf(object) === Object.prototype) {\n    Object.keys(object).forEach(key => {\n      validateKeyInPath(key, path);\n      validateObject(object[key], path + '.' + key);\n    });\n  }\n}\n","/** Exported values are also used in the mongo package. */\n\n/** @param {string} method */\nexport function getAsyncMethodName(method) {\n  return `${method.replace('_', '')}Async`;\n}\n\nexport const ASYNC_COLLECTION_METHODS = [\n  '_createCappedCollection',\n  '_dropCollection',\n  '_dropIndex',\n  'createIndex',\n  'findOne',\n  'insert',\n  'remove',\n  'update',\n  'upsert',\n];\n\nexport const ASYNC_CURSOR_METHODS = ['count', 'fetch', 'forEach', 'map'];\n","import LocalCollection from './local_collection.js';\nimport { hasOwn } from './common.js';\nimport { ASYNC_CURSOR_METHODS, getAsyncMethodName } from \"./constants\";\n\n// Cursor: a specification for a particular subset of documents, w/ a defined\n// order, limit, and offset.  creating a Cursor with LocalCollection.find(),\nexport default class Cursor {\n  // don't call this ctor directly.  use LocalCollection.find().\n  constructor(collection, selector, options = {}) {\n    this.collection = collection;\n    this.sorter = null;\n    this.matcher = new Minimongo.Matcher(selector);\n\n    if (LocalCollection._selectorIsIdPerhapsAsObject(selector)) {\n      // stash for fast _id and { _id }\n      this._selectorId = hasOwn.call(selector, '_id')\n        ? selector._id\n        : selector;\n    } else {\n      this._selectorId = undefined;\n\n      if (this.matcher.hasGeoQuery() || options.sort) {\n        this.sorter = new Minimongo.Sorter(options.sort || []);\n      }\n    }\n\n    this.skip = options.skip || 0;\n    this.limit = options.limit;\n    this.fields = options.projection || options.fields;\n\n    this._projectionFn = LocalCollection._compileProjection(this.fields || {});\n\n    this._transform = LocalCollection.wrapTransform(options.transform);\n\n    // by default, queries register w/ Tracker when it is available.\n    if (typeof Tracker !== 'undefined') {\n      this.reactive = options.reactive === undefined ? true : options.reactive;\n    }\n  }\n\n  /**\n   * @deprecated in 2.9\n   * @summary Returns the number of documents that match a query. This method is\n   *          [deprecated since MongoDB 4.0](https://www.mongodb.com/docs/v4.4/reference/command/count/);\n   *          see `Collection.countDocuments` and\n   *          `Collection.estimatedDocumentCount` for a replacement.\n   * @memberOf Mongo.Cursor\n   * @method  count\n   * @instance\n   * @locus Anywhere\n   * @returns {Number}\n   */\n  count() {\n    if (this.reactive) {\n      // allow the observe to be unordered\n      this._depend({added: true, removed: true}, true);\n    }\n\n    return this._getRawObjects({\n      ordered: true,\n    }).length;\n  }\n\n  /**\n   * @summary Return all matching documents as an Array.\n   * @memberOf Mongo.Cursor\n   * @method  fetch\n   * @instance\n   * @locus Anywhere\n   * @returns {Object[]}\n   */\n  fetch() {\n    const result = [];\n\n    this.forEach(doc => {\n      result.push(doc);\n    });\n\n    return result;\n  }\n\n  [Symbol.iterator]() {\n    if (this.reactive) {\n      this._depend({\n        addedBefore: true,\n        removed: true,\n        changed: true,\n        movedBefore: true});\n    }\n\n    let index = 0;\n    const objects = this._getRawObjects({ordered: true});\n\n    return {\n      next: () => {\n        if (index < objects.length) {\n          // This doubles as a clone operation.\n          let element = this._projectionFn(objects[index++]);\n\n          if (this._transform)\n            element = this._transform(element);\n\n          return {value: element};\n        }\n\n        return {done: true};\n      }\n    };\n  }\n\n  [Symbol.asyncIterator]() {\n    const syncResult = this[Symbol.iterator]();\n    return {\n      async next() {\n        return Promise.resolve(syncResult.next());\n      }\n    };\n  }\n\n  /**\n   * @callback IterationCallback\n   * @param {Object} doc\n   * @param {Number} index\n   */\n  /**\n   * @summary Call `callback` once for each matching document, sequentially and\n   *          synchronously.\n   * @locus Anywhere\n   * @method  forEach\n   * @instance\n   * @memberOf Mongo.Cursor\n   * @param {IterationCallback} callback Function to call. It will be called\n   *                                     with three arguments: the document, a\n   *                                     0-based index, and <em>cursor</em>\n   *                                     itself.\n   * @param {Any} [thisArg] An object which will be the value of `this` inside\n   *                        `callback`.\n   */\n  forEach(callback, thisArg) {\n    if (this.reactive) {\n      this._depend({\n        addedBefore: true,\n        removed: true,\n        changed: true,\n        movedBefore: true});\n    }\n\n    this._getRawObjects({ordered: true}).forEach((element, i) => {\n      // This doubles as a clone operation.\n      element = this._projectionFn(element);\n\n      if (this._transform) {\n        element = this._transform(element);\n      }\n\n      callback.call(thisArg, element, i, this);\n    });\n  }\n\n  getTransform() {\n    return this._transform;\n  }\n\n  /**\n   * @summary Map callback over all matching documents.  Returns an Array.\n   * @locus Anywhere\n   * @method map\n   * @instance\n   * @memberOf Mongo.Cursor\n   * @param {IterationCallback} callback Function to call. It will be called\n   *                                     with three arguments: the document, a\n   *                                     0-based index, and <em>cursor</em>\n   *                                     itself.\n   * @param {Any} [thisArg] An object which will be the value of `this` inside\n   *                        `callback`.\n   */\n  map(callback, thisArg) {\n    const result = [];\n\n    this.forEach((doc, i) => {\n      result.push(callback.call(thisArg, doc, i, this));\n    });\n\n    return result;\n  }\n\n  // options to contain:\n  //  * callbacks for observe():\n  //    - addedAt (document, atIndex)\n  //    - added (document)\n  //    - changedAt (newDocument, oldDocument, atIndex)\n  //    - changed (newDocument, oldDocument)\n  //    - removedAt (document, atIndex)\n  //    - removed (document)\n  //    - movedTo (document, oldIndex, newIndex)\n  //\n  // attributes available on returned query handle:\n  //  * stop(): end updates\n  //  * collection: the collection this query is querying\n  //\n  // iff x is a returned query handle, (x instanceof\n  // LocalCollection.ObserveHandle) is true\n  //\n  // initial results delivered through added callback\n  // XXX maybe callbacks should take a list of objects, to expose transactions?\n  // XXX maybe support field limiting (to limit what you're notified on)\n\n  /**\n   * @summary Watch a query.  Receive callbacks as the result set changes.\n   * @locus Anywhere\n   * @memberOf Mongo.Cursor\n   * @instance\n   * @param {Object} callbacks Functions to call to deliver the result set as it\n   *                           changes\n   */\n  observe(options) {\n    return LocalCollection._observeFromObserveChanges(this, options);\n  }\n\n  /**\n   * @summary Watch a query. Receive callbacks as the result set changes. Only\n   *          the differences between the old and new documents are passed to\n   *          the callbacks.\n   * @locus Anywhere\n   * @memberOf Mongo.Cursor\n   * @instance\n   * @param {Object} callbacks Functions to call to deliver the result set as it\n   *                           changes\n   */\n  observeChanges(options) {\n    const ordered = LocalCollection._observeChangesCallbacksAreOrdered(options);\n\n    // there are several places that assume you aren't combining skip/limit with\n    // unordered observe.  eg, update's EJSON.clone, and the \"there are several\"\n    // comment in _modifyAndNotify\n    // XXX allow skip/limit with unordered observe\n    if (!options._allow_unordered && !ordered && (this.skip || this.limit)) {\n      throw new Error(\n        \"Must use an ordered observe with skip or limit (i.e. 'addedBefore' \" +\n        \"for observeChanges or 'addedAt' for observe, instead of 'added').\"\n      );\n    }\n\n    if (this.fields && (this.fields._id === 0 || this.fields._id === false)) {\n      throw Error('You may not observe a cursor with {fields: {_id: 0}}');\n    }\n\n    const distances = (\n      this.matcher.hasGeoQuery() &&\n      ordered &&\n      new LocalCollection._IdMap\n    );\n\n    const query = {\n      cursor: this,\n      dirty: false,\n      distances,\n      matcher: this.matcher, // not fast pathed\n      ordered,\n      projectionFn: this._projectionFn,\n      resultsSnapshot: null,\n      sorter: ordered && this.sorter\n    };\n\n    let qid;\n\n    // Non-reactive queries call added[Before] and then never call anything\n    // else.\n    if (this.reactive) {\n      qid = this.collection.next_qid++;\n      this.collection.queries[qid] = query;\n    }\n\n    query.results = this._getRawObjects({ordered, distances: query.distances});\n\n    if (this.collection.paused) {\n      query.resultsSnapshot = ordered ? [] : new LocalCollection._IdMap;\n    }\n\n    // wrap callbacks we were passed. callbacks only fire when not paused and\n    // are never undefined\n    // Filters out blacklisted fields according to cursor's projection.\n    // XXX wrong place for this?\n\n    // furthermore, callbacks enqueue until the operation we're working on is\n    // done.\n    const wrapCallback = fn => {\n      if (!fn) {\n        return () => {};\n      }\n\n      const self = this;\n      return function(/* args*/) {\n        if (self.collection.paused) {\n          return;\n        }\n\n        const args = arguments;\n\n        self.collection._observeQueue.queueTask(() => {\n          fn.apply(this, args);\n        });\n      };\n    };\n\n    query.added = wrapCallback(options.added);\n    query.changed = wrapCallback(options.changed);\n    query.removed = wrapCallback(options.removed);\n\n    if (ordered) {\n      query.addedBefore = wrapCallback(options.addedBefore);\n      query.movedBefore = wrapCallback(options.movedBefore);\n    }\n\n    if (!options._suppress_initial && !this.collection.paused) {\n      query.results.forEach(doc => {\n        const fields = EJSON.clone(doc);\n\n        delete fields._id;\n\n        if (ordered) {\n          query.addedBefore(doc._id, this._projectionFn(fields), null);\n        }\n\n        query.added(doc._id, this._projectionFn(fields));\n      });\n    }\n\n    const handle = Object.assign(new LocalCollection.ObserveHandle, {\n      collection: this.collection,\n      stop: () => {\n        if (this.reactive) {\n          delete this.collection.queries[qid];\n        }\n      }\n    });\n\n    if (this.reactive && Tracker.active) {\n      // XXX in many cases, the same observe will be recreated when\n      // the current autorun is rerun.  we could save work by\n      // letting it linger across rerun and potentially get\n      // repurposed if the same observe is performed, using logic\n      // similar to that of Meteor.subscribe.\n      Tracker.onInvalidate(() => {\n        handle.stop();\n      });\n    }\n\n    // run the observe callbacks resulting from the initial contents\n    // before we leave the observe.\n    this.collection._observeQueue.drain();\n\n    return handle;\n  }\n\n  // XXX Maybe we need a version of observe that just calls a callback if\n  // anything changed.\n  _depend(changers, _allow_unordered) {\n    if (Tracker.active) {\n      const dependency = new Tracker.Dependency;\n      const notify = dependency.changed.bind(dependency);\n\n      dependency.depend();\n\n      const options = {_allow_unordered, _suppress_initial: true};\n\n      ['added', 'addedBefore', 'changed', 'movedBefore', 'removed']\n        .forEach(fn => {\n          if (changers[fn]) {\n            options[fn] = notify;\n          }\n        });\n\n      // observeChanges will stop() when this computation is invalidated\n      this.observeChanges(options);\n    }\n  }\n\n  _getCollectionName() {\n    return this.collection.name;\n  }\n\n  // Returns a collection of matching objects, but doesn't deep copy them.\n  //\n  // If ordered is set, returns a sorted array, respecting sorter, skip, and\n  // limit properties of the query provided that options.applySkipLimit is\n  // not set to false (#1201). If sorter is falsey, no sort -- you get the\n  // natural order.\n  //\n  // If ordered is not set, returns an object mapping from ID to doc (sorter,\n  // skip and limit should not be set).\n  //\n  // If ordered is set and this cursor is a $near geoquery, then this function\n  // will use an _IdMap to track each distance from the $near argument point in\n  // order to use it as a sort key. If an _IdMap is passed in the 'distances'\n  // argument, this function will clear it and use it for this purpose\n  // (otherwise it will just create its own _IdMap). The observeChanges\n  // implementation uses this to remember the distances after this function\n  // returns.\n  _getRawObjects(options = {}) {\n    // By default this method will respect skip and limit because .fetch(),\n    // .forEach() etc... expect this behaviour. It can be forced to ignore\n    // skip and limit by setting applySkipLimit to false (.count() does this,\n    // for example)\n    const applySkipLimit = options.applySkipLimit !== false;\n\n    // XXX use OrderedDict instead of array, and make IdMap and OrderedDict\n    // compatible\n    const results = options.ordered ? [] : new LocalCollection._IdMap;\n\n    // fast path for single ID value\n    if (this._selectorId !== undefined) {\n      // If you have non-zero skip and ask for a single id, you get nothing.\n      // This is so it matches the behavior of the '{_id: foo}' path.\n      if (applySkipLimit && this.skip) {\n        return results;\n      }\n\n      const selectedDoc = this.collection._docs.get(this._selectorId);\n\n      if (selectedDoc) {\n        if (options.ordered) {\n          results.push(selectedDoc);\n        } else {\n          results.set(this._selectorId, selectedDoc);\n        }\n      }\n\n      return results;\n    }\n\n    // slow path for arbitrary selector, sort, skip, limit\n\n    // in the observeChanges case, distances is actually part of the \"query\"\n    // (ie, live results set) object.  in other cases, distances is only used\n    // inside this function.\n    let distances;\n    if (this.matcher.hasGeoQuery() && options.ordered) {\n      if (options.distances) {\n        distances = options.distances;\n        distances.clear();\n      } else {\n        distances = new LocalCollection._IdMap();\n      }\n    }\n\n    this.collection._docs.forEach((doc, id) => {\n      const matchResult = this.matcher.documentMatches(doc);\n\n      if (matchResult.result) {\n        if (options.ordered) {\n          results.push(doc);\n\n          if (distances && matchResult.distance !== undefined) {\n            distances.set(id, matchResult.distance);\n          }\n        } else {\n          results.set(id, doc);\n        }\n      }\n\n      // Override to ensure all docs are matched if ignoring skip & limit\n      if (!applySkipLimit) {\n        return true;\n      }\n\n      // Fast path for limited unsorted queries.\n      // XXX 'length' check here seems wrong for ordered\n      return (\n        !this.limit ||\n        this.skip ||\n        this.sorter ||\n        results.length !== this.limit\n      );\n    });\n\n    if (!options.ordered) {\n      return results;\n    }\n\n    if (this.sorter) {\n      results.sort(this.sorter.getComparator({distances}));\n    }\n\n    // Return the full set of results if there is no skip or limit or if we're\n    // ignoring them\n    if (!applySkipLimit || (!this.limit && !this.skip)) {\n      return results;\n    }\n\n    return results.slice(\n      this.skip,\n      this.limit ? this.limit + this.skip : results.length\n    );\n  }\n\n  _publishCursor(subscription) {\n    // XXX minimongo should not depend on mongo-livedata!\n    if (!Package.mongo) {\n      throw new Error(\n        'Can\\'t publish from Minimongo without the `mongo` package.'\n      );\n    }\n\n    if (!this.collection.name) {\n      throw new Error(\n        'Can\\'t publish a cursor from a collection without a name.'\n      );\n    }\n\n    return Package.mongo.Mongo.Collection._publishCursor(\n      this,\n      subscription,\n      this.collection.name\n    );\n  }\n}\n\n// Implements async version of cursor methods to keep collections isomorphic\nASYNC_CURSOR_METHODS.forEach(method => {\n  const asyncName = getAsyncMethodName(method);\n  Cursor.prototype[asyncName] = function(...args) {\n    try {\n      this[method].isCalledFromAsync = true;\n      return Promise.resolve(this[method].apply(this, args));\n    } catch (error) {\n      return Promise.reject(error);\n    }\n  };\n});\n","import Cursor from './cursor.js';\nimport ObserveHandle from './observe_handle.js';\nimport {\n  hasOwn,\n  isIndexable,\n  isNumericKey,\n  isOperatorObject,\n  populateDocumentWithQueryFields,\n  projectionDetails,\n} from './common.js';\n\n// XXX type checking on selectors (graceful error if malformed)\n\n// LocalCollection: a set of documents that supports queries and modifiers.\nexport default class LocalCollection {\n  constructor(name) {\n    this.name = name;\n    // _id -> document (also containing id)\n    this._docs = new LocalCollection._IdMap;\n\n    this._observeQueue = new Meteor._SynchronousQueue();\n\n    this.next_qid = 1; // live query id generator\n\n    // qid -> live query object. keys:\n    //  ordered: bool. ordered queries have addedBefore/movedBefore callbacks.\n    //  results: array (ordered) or object (unordered) of current results\n    //    (aliased with this._docs!)\n    //  resultsSnapshot: snapshot of results. null if not paused.\n    //  cursor: Cursor object for the query.\n    //  selector, sorter, (callbacks): functions\n    this.queries = Object.create(null);\n\n    // null if not saving originals; an IdMap from id to original document value\n    // if saving originals. See comments before saveOriginals().\n    this._savedOriginals = null;\n\n    // True when observers are paused and we should not send callbacks.\n    this.paused = false;\n  }\n\n  countDocuments(selector, options) {\n    return this.find(selector ?? {}, options).countAsync();\n  }\n\n  estimatedDocumentCount(options) {\n    return this.find({}, options).countAsync();\n  }\n\n  // options may include sort, skip, limit, reactive\n  // sort may be any of these forms:\n  //     {a: 1, b: -1}\n  //     [[\"a\", \"asc\"], [\"b\", \"desc\"]]\n  //     [\"a\", [\"b\", \"desc\"]]\n  //   (in the first form you're beholden to key enumeration order in\n  //   your javascript VM)\n  //\n  // reactive: if given, and false, don't register with Tracker (default\n  // is true)\n  //\n  // XXX possibly should support retrieving a subset of fields? and\n  // have it be a hint (ignored on the client, when not copying the\n  // doc?)\n  //\n  // XXX sort does not yet support subkeys ('a.b') .. fix that!\n  // XXX add one more sort form: \"key\"\n  // XXX tests\n  find(selector, options) {\n    // default syntax for everything is to omit the selector argument.\n    // but if selector is explicitly passed in as false or undefined, we\n    // want a selector that matches nothing.\n    if (arguments.length === 0) {\n      selector = {};\n    }\n\n    return new LocalCollection.Cursor(this, selector, options);\n  }\n\n  findOne(selector, options = {}) {\n    if (arguments.length === 0) {\n      selector = {};\n    }\n\n    // NOTE: by setting limit 1 here, we end up using very inefficient\n    // code that recomputes the whole query on each update. The upside is\n    // that when you reactively depend on a findOne you only get\n    // invalidated when the found object changes, not any object in the\n    // collection. Most findOne will be by id, which has a fast path, so\n    // this might not be a big deal. In most cases, invalidation causes\n    // the called to re-query anyway, so this should be a net performance\n    // improvement.\n    options.limit = 1;\n\n    return this.find(selector, options).fetch()[0];\n  }\n\n  // XXX possibly enforce that 'undefined' does not appear (we assume\n  // this in our handling of null and $exists)\n  insert(doc, callback) {\n    doc = EJSON.clone(doc);\n\n    assertHasValidFieldNames(doc);\n\n    // if you really want to use ObjectIDs, set this global.\n    // Mongo.Collection specifies its own ids and does not use this code.\n    if (!hasOwn.call(doc, '_id')) {\n      doc._id = LocalCollection._useOID ? new MongoID.ObjectID() : Random.id();\n    }\n\n    const id = doc._id;\n\n    if (this._docs.has(id)) {\n      throw MinimongoError(`Duplicate _id '${id}'`);\n    }\n\n    this._saveOriginal(id, undefined);\n    this._docs.set(id, doc);\n\n    const queriesToRecompute = [];\n\n    // trigger live queries that match\n    Object.keys(this.queries).forEach(qid => {\n      const query = this.queries[qid];\n\n      if (query.dirty) {\n        return;\n      }\n\n      const matchResult = query.matcher.documentMatches(doc);\n\n      if (matchResult.result) {\n        if (query.distances && matchResult.distance !== undefined) {\n          query.distances.set(id, matchResult.distance);\n        }\n\n        if (query.cursor.skip || query.cursor.limit) {\n          queriesToRecompute.push(qid);\n        } else {\n          LocalCollection._insertInResults(query, doc);\n        }\n      }\n    });\n\n    queriesToRecompute.forEach(qid => {\n      if (this.queries[qid]) {\n        this._recomputeResults(this.queries[qid]);\n      }\n    });\n\n    this._observeQueue.drain();\n\n    // Defer because the caller likely doesn't expect the callback to be run\n    // immediately.\n    if (callback) {\n      Meteor.defer(() => {\n        callback(null, id);\n      });\n    }\n\n    return id;\n  }\n\n  // Pause the observers. No callbacks from observers will fire until\n  // 'resumeObservers' is called.\n  pauseObservers() {\n    // No-op if already paused.\n    if (this.paused) {\n      return;\n    }\n\n    // Set the 'paused' flag such that new observer messages don't fire.\n    this.paused = true;\n\n    // Take a snapshot of the query results for each query.\n    Object.keys(this.queries).forEach(qid => {\n      const query = this.queries[qid];\n      query.resultsSnapshot = EJSON.clone(query.results);\n    });\n  }\n\n  remove(selector, callback) {\n    // Easy special case: if we're not calling observeChanges callbacks and\n    // we're not saving originals and we got asked to remove everything, then\n    // just empty everything directly.\n    if (this.paused && !this._savedOriginals && EJSON.equals(selector, {})) {\n      const result = this._docs.size();\n\n      this._docs.clear();\n\n      Object.keys(this.queries).forEach(qid => {\n        const query = this.queries[qid];\n\n        if (query.ordered) {\n          query.results = [];\n        } else {\n          query.results.clear();\n        }\n      });\n\n      if (callback) {\n        Meteor.defer(() => {\n          callback(null, result);\n        });\n      }\n\n      return result;\n    }\n\n    const matcher = new Minimongo.Matcher(selector);\n    const remove = [];\n\n    this._eachPossiblyMatchingDoc(selector, (doc, id) => {\n      if (matcher.documentMatches(doc).result) {\n        remove.push(id);\n      }\n    });\n\n    const queriesToRecompute = [];\n    const queryRemove = [];\n\n    for (let i = 0; i < remove.length; i++) {\n      const removeId = remove[i];\n      const removeDoc = this._docs.get(removeId);\n\n      Object.keys(this.queries).forEach(qid => {\n        const query = this.queries[qid];\n\n        if (query.dirty) {\n          return;\n        }\n\n        if (query.matcher.documentMatches(removeDoc).result) {\n          if (query.cursor.skip || query.cursor.limit) {\n            queriesToRecompute.push(qid);\n          } else {\n            queryRemove.push({qid, doc: removeDoc});\n          }\n        }\n      });\n\n      this._saveOriginal(removeId, removeDoc);\n      this._docs.remove(removeId);\n    }\n\n    // run live query callbacks _after_ we've removed the documents.\n    queryRemove.forEach(remove => {\n      const query = this.queries[remove.qid];\n\n      if (query) {\n        query.distances && query.distances.remove(remove.doc._id);\n        LocalCollection._removeFromResults(query, remove.doc);\n      }\n    });\n\n    queriesToRecompute.forEach(qid => {\n      const query = this.queries[qid];\n\n      if (query) {\n        this._recomputeResults(query);\n      }\n    });\n\n    this._observeQueue.drain();\n\n    const result = remove.length;\n\n    if (callback) {\n      Meteor.defer(() => {\n        callback(null, result);\n      });\n    }\n\n    return result;\n  }\n\n  // Resume the observers. Observers immediately receive change\n  // notifications to bring them to the current state of the\n  // database. Note that this is not just replaying all the changes that\n  // happened during the pause, it is a smarter 'coalesced' diff.\n  resumeObservers() {\n    // No-op if not paused.\n    if (!this.paused) {\n      return;\n    }\n\n    // Unset the 'paused' flag. Make sure to do this first, otherwise\n    // observer methods won't actually fire when we trigger them.\n    this.paused = false;\n\n    Object.keys(this.queries).forEach(qid => {\n      const query = this.queries[qid];\n\n      if (query.dirty) {\n        query.dirty = false;\n\n        // re-compute results will perform `LocalCollection._diffQueryChanges`\n        // automatically.\n        this._recomputeResults(query, query.resultsSnapshot);\n      } else {\n        // Diff the current results against the snapshot and send to observers.\n        // pass the query object for its observer callbacks.\n        LocalCollection._diffQueryChanges(\n          query.ordered,\n          query.resultsSnapshot,\n          query.results,\n          query,\n          {projectionFn: query.projectionFn}\n        );\n      }\n\n      query.resultsSnapshot = null;\n    });\n\n    this._observeQueue.drain();\n  }\n\n  retrieveOriginals() {\n    if (!this._savedOriginals) {\n      throw new Error('Called retrieveOriginals without saveOriginals');\n    }\n\n    const originals = this._savedOriginals;\n\n    this._savedOriginals = null;\n\n    return originals;\n  }\n\n  // To track what documents are affected by a piece of code, call\n  // saveOriginals() before it and retrieveOriginals() after it.\n  // retrieveOriginals returns an object whose keys are the ids of the documents\n  // that were affected since the call to saveOriginals(), and the values are\n  // equal to the document's contents at the time of saveOriginals. (In the case\n  // of an inserted document, undefined is the value.) You must alternate\n  // between calls to saveOriginals() and retrieveOriginals().\n  saveOriginals() {\n    if (this._savedOriginals) {\n      throw new Error('Called saveOriginals twice without retrieveOriginals');\n    }\n\n    this._savedOriginals = new LocalCollection._IdMap;\n  }\n\n  // XXX atomicity: if multi is true, and one modification fails, do\n  // we rollback the whole operation, or what?\n  update(selector, mod, options, callback) {\n    if (! callback && options instanceof Function) {\n      callback = options;\n      options = null;\n    }\n\n    if (!options) {\n      options = {};\n    }\n\n    const matcher = new Minimongo.Matcher(selector, true);\n\n    // Save the original results of any query that we might need to\n    // _recomputeResults on, because _modifyAndNotify will mutate the objects in\n    // it. (We don't need to save the original results of paused queries because\n    // they already have a resultsSnapshot and we won't be diffing in\n    // _recomputeResults.)\n    const qidToOriginalResults = {};\n\n    // We should only clone each document once, even if it appears in multiple\n    // queries\n    const docMap = new LocalCollection._IdMap;\n    const idsMatched = LocalCollection._idsMatchedBySelector(selector);\n\n    Object.keys(this.queries).forEach(qid => {\n      const query = this.queries[qid];\n\n      if ((query.cursor.skip || query.cursor.limit) && ! this.paused) {\n        // Catch the case of a reactive `count()` on a cursor with skip\n        // or limit, which registers an unordered observe. This is a\n        // pretty rare case, so we just clone the entire result set with\n        // no optimizations for documents that appear in these result\n        // sets and other queries.\n        if (query.results instanceof LocalCollection._IdMap) {\n          qidToOriginalResults[qid] = query.results.clone();\n          return;\n        }\n\n        if (!(query.results instanceof Array)) {\n          throw new Error('Assertion failed: query.results not an array');\n        }\n\n        // Clones a document to be stored in `qidToOriginalResults`\n        // because it may be modified before the new and old result sets\n        // are diffed. But if we know exactly which document IDs we're\n        // going to modify, then we only need to clone those.\n        const memoizedCloneIfNeeded = doc => {\n          if (docMap.has(doc._id)) {\n            return docMap.get(doc._id);\n          }\n\n          const docToMemoize = (\n            idsMatched &&\n            !idsMatched.some(id => EJSON.equals(id, doc._id))\n          ) ? doc : EJSON.clone(doc);\n\n          docMap.set(doc._id, docToMemoize);\n\n          return docToMemoize;\n        };\n\n        qidToOriginalResults[qid] = query.results.map(memoizedCloneIfNeeded);\n      }\n    });\n\n    const recomputeQids = {};\n\n    let updateCount = 0;\n\n    this._eachPossiblyMatchingDoc(selector, (doc, id) => {\n      const queryResult = matcher.documentMatches(doc);\n\n      if (queryResult.result) {\n        // XXX Should we save the original even if mod ends up being a no-op?\n        this._saveOriginal(id, doc);\n        this._modifyAndNotify(\n          doc,\n          mod,\n          recomputeQids,\n          queryResult.arrayIndices\n        );\n\n        ++updateCount;\n\n        if (!options.multi) {\n          return false; // break\n        }\n      }\n\n      return true;\n    });\n\n    Object.keys(recomputeQids).forEach(qid => {\n      const query = this.queries[qid];\n\n      if (query) {\n        this._recomputeResults(query, qidToOriginalResults[qid]);\n      }\n    });\n\n    this._observeQueue.drain();\n\n    // If we are doing an upsert, and we didn't modify any documents yet, then\n    // it's time to do an insert. Figure out what document we are inserting, and\n    // generate an id for it.\n    let insertedId;\n    if (updateCount === 0 && options.upsert) {\n      const doc = LocalCollection._createUpsertDocument(selector, mod);\n      if (! doc._id && options.insertedId) {\n        doc._id = options.insertedId;\n      }\n\n      insertedId = this.insert(doc);\n      updateCount = 1;\n    }\n\n    // Return the number of affected documents, or in the upsert case, an object\n    // containing the number of affected docs and the id of the doc that was\n    // inserted, if any.\n    let result;\n    if (options._returnObject) {\n      result = {numberAffected: updateCount};\n\n      if (insertedId !== undefined) {\n        result.insertedId = insertedId;\n      }\n    } else {\n      result = updateCount;\n    }\n\n    if (callback) {\n      Meteor.defer(() => {\n        callback(null, result);\n      });\n    }\n\n    return result;\n  }\n\n  // A convenience wrapper on update. LocalCollection.upsert(sel, mod) is\n  // equivalent to LocalCollection.update(sel, mod, {upsert: true,\n  // _returnObject: true}).\n  upsert(selector, mod, options, callback) {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n\n    return this.update(\n      selector,\n      mod,\n      Object.assign({}, options, {upsert: true, _returnObject: true}),\n      callback\n    );\n  }\n\n  // Iterates over a subset of documents that could match selector; calls\n  // fn(doc, id) on each of them.  Specifically, if selector specifies\n  // specific _id's, it only looks at those.  doc is *not* cloned: it is the\n  // same object that is in _docs.\n  _eachPossiblyMatchingDoc(selector, fn) {\n    const specificIds = LocalCollection._idsMatchedBySelector(selector);\n\n    if (specificIds) {\n      specificIds.some(id => {\n        const doc = this._docs.get(id);\n\n        if (doc) {\n          return fn(doc, id) === false;\n        }\n      });\n    } else {\n      this._docs.forEach(fn);\n    }\n  }\n\n  _modifyAndNotify(doc, mod, recomputeQids, arrayIndices) {\n    const matched_before = {};\n\n    Object.keys(this.queries).forEach(qid => {\n      const query = this.queries[qid];\n\n      if (query.dirty) {\n        return;\n      }\n\n      if (query.ordered) {\n        matched_before[qid] = query.matcher.documentMatches(doc).result;\n      } else {\n        // Because we don't support skip or limit (yet) in unordered queries, we\n        // can just do a direct lookup.\n        matched_before[qid] = query.results.has(doc._id);\n      }\n    });\n\n    const old_doc = EJSON.clone(doc);\n\n    LocalCollection._modify(doc, mod, {arrayIndices});\n\n    Object.keys(this.queries).forEach(qid => {\n      const query = this.queries[qid];\n\n      if (query.dirty) {\n        return;\n      }\n\n      const afterMatch = query.matcher.documentMatches(doc);\n      const after = afterMatch.result;\n      const before = matched_before[qid];\n\n      if (after && query.distances && afterMatch.distance !== undefined) {\n        query.distances.set(doc._id, afterMatch.distance);\n      }\n\n      if (query.cursor.skip || query.cursor.limit) {\n        // We need to recompute any query where the doc may have been in the\n        // cursor's window either before or after the update. (Note that if skip\n        // or limit is set, \"before\" and \"after\" being true do not necessarily\n        // mean that the document is in the cursor's output after skip/limit is\n        // applied... but if they are false, then the document definitely is NOT\n        // in the output. So it's safe to skip recompute if neither before or\n        // after are true.)\n        if (before || after) {\n          recomputeQids[qid] = true;\n        }\n      } else if (before && !after) {\n        LocalCollection._removeFromResults(query, doc);\n      } else if (!before && after) {\n        LocalCollection._insertInResults(query, doc);\n      } else if (before && after) {\n        LocalCollection._updateInResults(query, doc, old_doc);\n      }\n    });\n  }\n\n  // Recomputes the results of a query and runs observe callbacks for the\n  // difference between the previous results and the current results (unless\n  // paused). Used for skip/limit queries.\n  //\n  // When this is used by insert or remove, it can just use query.results for\n  // the old results (and there's no need to pass in oldResults), because these\n  // operations don't mutate the documents in the collection. Update needs to\n  // pass in an oldResults which was deep-copied before the modifier was\n  // applied.\n  //\n  // oldResults is guaranteed to be ignored if the query is not paused.\n  _recomputeResults(query, oldResults) {\n    if (this.paused) {\n      // There's no reason to recompute the results now as we're still paused.\n      // By flagging the query as \"dirty\", the recompute will be performed\n      // when resumeObservers is called.\n      query.dirty = true;\n      return;\n    }\n\n    if (!this.paused && !oldResults) {\n      oldResults = query.results;\n    }\n\n    if (query.distances) {\n      query.distances.clear();\n    }\n\n    query.results = query.cursor._getRawObjects({\n      distances: query.distances,\n      ordered: query.ordered\n    });\n\n    if (!this.paused) {\n      LocalCollection._diffQueryChanges(\n        query.ordered,\n        oldResults,\n        query.results,\n        query,\n        {projectionFn: query.projectionFn}\n      );\n    }\n  }\n\n  _saveOriginal(id, doc) {\n    // Are we even trying to save originals?\n    if (!this._savedOriginals) {\n      return;\n    }\n\n    // Have we previously mutated the original (and so 'doc' is not actually\n    // original)?  (Note the 'has' check rather than truth: we store undefined\n    // here for inserted docs!)\n    if (this._savedOriginals.has(id)) {\n      return;\n    }\n\n    this._savedOriginals.set(id, EJSON.clone(doc));\n  }\n}\n\nLocalCollection.Cursor = Cursor;\n\nLocalCollection.ObserveHandle = ObserveHandle;\n\n// XXX maybe move these into another ObserveHelpers package or something\n\n// _CachingChangeObserver is an object which receives observeChanges callbacks\n// and keeps a cache of the current cursor state up to date in this.docs. Users\n// of this class should read the docs field but not modify it. You should pass\n// the \"applyChange\" field as the callbacks to the underlying observeChanges\n// call. Optionally, you can specify your own observeChanges callbacks which are\n// invoked immediately before the docs field is updated; this object is made\n// available as `this` to those callbacks.\nLocalCollection._CachingChangeObserver = class _CachingChangeObserver {\n  constructor(options = {}) {\n    const orderedFromCallbacks = (\n      options.callbacks &&\n      LocalCollection._observeChangesCallbacksAreOrdered(options.callbacks)\n    );\n\n    if (hasOwn.call(options, 'ordered')) {\n      this.ordered = options.ordered;\n\n      if (options.callbacks && options.ordered !== orderedFromCallbacks) {\n        throw Error('ordered option doesn\\'t match callbacks');\n      }\n    } else if (options.callbacks) {\n      this.ordered = orderedFromCallbacks;\n    } else {\n      throw Error('must provide ordered or callbacks');\n    }\n\n    const callbacks = options.callbacks || {};\n\n    if (this.ordered) {\n      this.docs = new OrderedDict(MongoID.idStringify);\n      this.applyChange = {\n        addedBefore: (id, fields, before) => {\n          // Take a shallow copy since the top-level properties can be changed\n          const doc = { ...fields };\n\n          doc._id = id;\n\n          if (callbacks.addedBefore) {\n            callbacks.addedBefore.call(this, id, EJSON.clone(fields), before);\n          }\n\n          // This line triggers if we provide added with movedBefore.\n          if (callbacks.added) {\n            callbacks.added.call(this, id, EJSON.clone(fields));\n          }\n\n          // XXX could `before` be a falsy ID?  Technically\n          // idStringify seems to allow for them -- though\n          // OrderedDict won't call stringify on a falsy arg.\n          this.docs.putBefore(id, doc, before || null);\n        },\n        movedBefore: (id, before) => {\n          const doc = this.docs.get(id);\n\n          if (callbacks.movedBefore) {\n            callbacks.movedBefore.call(this, id, before);\n          }\n\n          this.docs.moveBefore(id, before || null);\n        },\n      };\n    } else {\n      this.docs = new LocalCollection._IdMap;\n      this.applyChange = {\n        added: (id, fields) => {\n          // Take a shallow copy since the top-level properties can be changed\n          const doc = { ...fields };\n\n          if (callbacks.added) {\n            callbacks.added.call(this, id, EJSON.clone(fields));\n          }\n\n          doc._id = id;\n\n          this.docs.set(id,  doc);\n        },\n      };\n    }\n\n    // The methods in _IdMap and OrderedDict used by these callbacks are\n    // identical.\n    this.applyChange.changed = (id, fields) => {\n      const doc = this.docs.get(id);\n\n      if (!doc) {\n        throw new Error(`Unknown id for changed: ${id}`);\n      }\n\n      if (callbacks.changed) {\n        callbacks.changed.call(this, id, EJSON.clone(fields));\n      }\n\n      DiffSequence.applyChanges(doc, fields);\n    };\n\n    this.applyChange.removed = id => {\n      if (callbacks.removed) {\n        callbacks.removed.call(this, id);\n      }\n\n      this.docs.remove(id);\n    };\n  }\n};\n\nLocalCollection._IdMap = class _IdMap extends IdMap {\n  constructor() {\n    super(MongoID.idStringify, MongoID.idParse);\n  }\n};\n\n// Wrap a transform function to return objects that have the _id field\n// of the untransformed document. This ensures that subsystems such as\n// the observe-sequence package that call `observe` can keep track of\n// the documents identities.\n//\n// - Require that it returns objects\n// - If the return value has an _id field, verify that it matches the\n//   original _id field\n// - If the return value doesn't have an _id field, add it back.\nLocalCollection.wrapTransform = transform => {\n  if (!transform) {\n    return null;\n  }\n\n  // No need to doubly-wrap transforms.\n  if (transform.__wrappedTransform__) {\n    return transform;\n  }\n\n  const wrapped = doc => {\n    if (!hasOwn.call(doc, '_id')) {\n      // XXX do we ever have a transform on the oplog's collection? because that\n      // collection has no _id.\n      throw new Error('can only transform documents with _id');\n    }\n\n    const id = doc._id;\n\n    // XXX consider making tracker a weak dependency and checking\n    // Package.tracker here\n    const transformed = Tracker.nonreactive(() => transform(doc));\n\n    if (!LocalCollection._isPlainObject(transformed)) {\n      throw new Error('transform must return object');\n    }\n\n    if (hasOwn.call(transformed, '_id')) {\n      if (!EJSON.equals(transformed._id, id)) {\n        throw new Error('transformed document can\\'t have different _id');\n      }\n    } else {\n      transformed._id = id;\n    }\n\n    return transformed;\n  };\n\n  wrapped.__wrappedTransform__ = true;\n\n  return wrapped;\n};\n\n// XXX the sorted-query logic below is laughably inefficient. we'll\n// need to come up with a better datastructure for this.\n//\n// XXX the logic for observing with a skip or a limit is even more\n// laughably inefficient. we recompute the whole results every time!\n\n// This binary search puts a value between any equal values, and the first\n// lesser value.\nLocalCollection._binarySearch = (cmp, array, value) => {\n  let first = 0;\n  let range = array.length;\n\n  while (range > 0) {\n    const halfRange = Math.floor(range / 2);\n\n    if (cmp(value, array[first + halfRange]) >= 0) {\n      first += halfRange + 1;\n      range -= halfRange + 1;\n    } else {\n      range = halfRange;\n    }\n  }\n\n  return first;\n};\n\nLocalCollection._checkSupportedProjection = fields => {\n  if (fields !== Object(fields) || Array.isArray(fields)) {\n    throw MinimongoError('fields option must be an object');\n  }\n\n  Object.keys(fields).forEach(keyPath => {\n    if (keyPath.split('.').includes('$')) {\n      throw MinimongoError(\n        'Minimongo doesn\\'t support $ operator in projections yet.'\n      );\n    }\n\n    const value = fields[keyPath];\n\n    if (typeof value === 'object' &&\n        ['$elemMatch', '$meta', '$slice'].some(key =>\n          hasOwn.call(value, key)\n        )) {\n      throw MinimongoError(\n        'Minimongo doesn\\'t support operators in projections yet.'\n      );\n    }\n\n    if (![1, 0, true, false].includes(value)) {\n      throw MinimongoError(\n        'Projection values should be one of 1, 0, true, or false'\n      );\n    }\n  });\n};\n\n// Knows how to compile a fields projection to a predicate function.\n// @returns - Function: a closure that filters out an object according to the\n//            fields projection rules:\n//            @param obj - Object: MongoDB-styled document\n//            @returns - Object: a document with the fields filtered out\n//                       according to projection rules. Doesn't retain subfields\n//                       of passed argument.\nLocalCollection._compileProjection = fields => {\n  LocalCollection._checkSupportedProjection(fields);\n\n  const _idProjection = fields._id === undefined ? true : fields._id;\n  const details = projectionDetails(fields);\n\n  // returns transformed doc according to ruleTree\n  const transform = (doc, ruleTree) => {\n    // Special case for \"sets\"\n    if (Array.isArray(doc)) {\n      return doc.map(subdoc => transform(subdoc, ruleTree));\n    }\n\n    const result = details.including ? {} : EJSON.clone(doc);\n\n    Object.keys(ruleTree).forEach(key => {\n      if (doc == null || !hasOwn.call(doc, key)) {\n        return;\n      }\n\n      const rule = ruleTree[key];\n\n      if (rule === Object(rule)) {\n        // For sub-objects/subsets we branch\n        if (doc[key] === Object(doc[key])) {\n          result[key] = transform(doc[key], rule);\n        }\n      } else if (details.including) {\n        // Otherwise we don't even touch this subfield\n        result[key] = EJSON.clone(doc[key]);\n      } else {\n        delete result[key];\n      }\n    });\n\n    return doc != null ? result : doc;\n  };\n\n  return doc => {\n    const result = transform(doc, details.tree);\n\n    if (_idProjection && hasOwn.call(doc, '_id')) {\n      result._id = doc._id;\n    }\n\n    if (!_idProjection && hasOwn.call(result, '_id')) {\n      delete result._id;\n    }\n\n    return result;\n  };\n};\n\n// Calculates the document to insert in case we're doing an upsert and the\n// selector does not match any elements\nLocalCollection._createUpsertDocument = (selector, modifier) => {\n  const selectorDocument = populateDocumentWithQueryFields(selector);\n  const isModify = LocalCollection._isModificationMod(modifier);\n\n  const newDoc = {};\n\n  if (selectorDocument._id) {\n    newDoc._id = selectorDocument._id;\n    delete selectorDocument._id;\n  }\n\n  // This double _modify call is made to help with nested properties (see issue\n  // #8631). We do this even if it's a replacement for validation purposes (e.g.\n  // ambiguous id's)\n  LocalCollection._modify(newDoc, {$set: selectorDocument});\n  LocalCollection._modify(newDoc, modifier, {isInsert: true});\n\n  if (isModify) {\n    return newDoc;\n  }\n\n  // Replacement can take _id from query document\n  const replacement = Object.assign({}, modifier);\n  if (newDoc._id) {\n    replacement._id = newDoc._id;\n  }\n\n  return replacement;\n};\n\nLocalCollection._diffObjects = (left, right, callbacks) => {\n  return DiffSequence.diffObjects(left, right, callbacks);\n};\n\n// ordered: bool.\n// old_results and new_results: collections of documents.\n//    if ordered, they are arrays.\n//    if unordered, they are IdMaps\nLocalCollection._diffQueryChanges = (ordered, oldResults, newResults, observer, options) =>\n  DiffSequence.diffQueryChanges(ordered, oldResults, newResults, observer, options)\n;\n\nLocalCollection._diffQueryOrderedChanges = (oldResults, newResults, observer, options) =>\n  DiffSequence.diffQueryOrderedChanges(oldResults, newResults, observer, options)\n;\n\nLocalCollection._diffQueryUnorderedChanges = (oldResults, newResults, observer, options) =>\n  DiffSequence.diffQueryUnorderedChanges(oldResults, newResults, observer, options)\n;\n\nLocalCollection._findInOrderedResults = (query, doc) => {\n  if (!query.ordered) {\n    throw new Error('Can\\'t call _findInOrderedResults on unordered query');\n  }\n\n  for (let i = 0; i < query.results.length; i++) {\n    if (query.results[i] === doc) {\n      return i;\n    }\n  }\n\n  throw Error('object missing from query');\n};\n\n// If this is a selector which explicitly constrains the match by ID to a finite\n// number of documents, returns a list of their IDs.  Otherwise returns\n// null. Note that the selector may have other restrictions so it may not even\n// match those document!  We care about $in and $and since those are generated\n// access-controlled update and remove.\nLocalCollection._idsMatchedBySelector = selector => {\n  // Is the selector just an ID?\n  if (LocalCollection._selectorIsId(selector)) {\n    return [selector];\n  }\n\n  if (!selector) {\n    return null;\n  }\n\n  // Do we have an _id clause?\n  if (hasOwn.call(selector, '_id')) {\n    // Is the _id clause just an ID?\n    if (LocalCollection._selectorIsId(selector._id)) {\n      return [selector._id];\n    }\n\n    // Is the _id clause {_id: {$in: [\"x\", \"y\", \"z\"]}}?\n    if (selector._id\n        && Array.isArray(selector._id.$in)\n        && selector._id.$in.length\n        && selector._id.$in.every(LocalCollection._selectorIsId)) {\n      return selector._id.$in;\n    }\n\n    return null;\n  }\n\n  // If this is a top-level $and, and any of the clauses constrain their\n  // documents, then the whole selector is constrained by any one clause's\n  // constraint. (Well, by their intersection, but that seems unlikely.)\n  if (Array.isArray(selector.$and)) {\n    for (let i = 0; i < selector.$and.length; ++i) {\n      const subIds = LocalCollection._idsMatchedBySelector(selector.$and[i]);\n\n      if (subIds) {\n        return subIds;\n      }\n    }\n  }\n\n  return null;\n};\n\nLocalCollection._insertInResults = (query, doc) => {\n  const fields = EJSON.clone(doc);\n\n  delete fields._id;\n\n  if (query.ordered) {\n    if (!query.sorter) {\n      query.addedBefore(doc._id, query.projectionFn(fields), null);\n      query.results.push(doc);\n    } else {\n      const i = LocalCollection._insertInSortedList(\n        query.sorter.getComparator({distances: query.distances}),\n        query.results,\n        doc\n      );\n\n      let next = query.results[i + 1];\n      if (next) {\n        next = next._id;\n      } else {\n        next = null;\n      }\n\n      query.addedBefore(doc._id, query.projectionFn(fields), next);\n    }\n\n    query.added(doc._id, query.projectionFn(fields));\n  } else {\n    query.added(doc._id, query.projectionFn(fields));\n    query.results.set(doc._id, doc);\n  }\n};\n\nLocalCollection._insertInSortedList = (cmp, array, value) => {\n  if (array.length === 0) {\n    array.push(value);\n    return 0;\n  }\n\n  const i = LocalCollection._binarySearch(cmp, array, value);\n\n  array.splice(i, 0, value);\n\n  return i;\n};\n\nLocalCollection._isModificationMod = mod => {\n  let isModify = false;\n  let isReplace = false;\n\n  Object.keys(mod).forEach(key => {\n    if (key.substr(0, 1) === '$') {\n      isModify = true;\n    } else {\n      isReplace = true;\n    }\n  });\n\n  if (isModify && isReplace) {\n    throw new Error(\n      'Update parameter cannot have both modifier and non-modifier fields.'\n    );\n  }\n\n  return isModify;\n};\n\n// XXX maybe this should be EJSON.isObject, though EJSON doesn't know about\n// RegExp\n// XXX note that _type(undefined) === 3!!!!\nLocalCollection._isPlainObject = x => {\n  return x && LocalCollection._f._type(x) === 3;\n};\n\n// XXX need a strategy for passing the binding of $ into this\n// function, from the compiled selector\n//\n// maybe just {key.up.to.just.before.dollarsign: array_index}\n//\n// XXX atomicity: if one modification fails, do we roll back the whole\n// change?\n//\n// options:\n//   - isInsert is set when _modify is being called to compute the document to\n//     insert as part of an upsert operation. We use this primarily to figure\n//     out when to set the fields in $setOnInsert, if present.\nLocalCollection._modify = (doc, modifier, options = {}) => {\n  if (!LocalCollection._isPlainObject(modifier)) {\n    throw MinimongoError('Modifier must be an object');\n  }\n\n  // Make sure the caller can't mutate our data structures.\n  modifier = EJSON.clone(modifier);\n\n  const isModifier = isOperatorObject(modifier);\n  const newDoc = isModifier ? EJSON.clone(doc) : modifier;\n\n  if (isModifier) {\n    // apply modifiers to the doc.\n    Object.keys(modifier).forEach(operator => {\n      // Treat $setOnInsert as $set if this is an insert.\n      const setOnInsert = options.isInsert && operator === '$setOnInsert';\n      const modFunc = MODIFIERS[setOnInsert ? '$set' : operator];\n      const operand = modifier[operator];\n\n      if (!modFunc) {\n        throw MinimongoError(`Invalid modifier specified ${operator}`);\n      }\n\n      Object.keys(operand).forEach(keypath => {\n        const arg = operand[keypath];\n\n        if (keypath === '') {\n          throw MinimongoError('An empty update path is not valid.');\n        }\n\n        const keyparts = keypath.split('.');\n\n        if (!keyparts.every(Boolean)) {\n          throw MinimongoError(\n            `The update path '${keypath}' contains an empty field name, ` +\n            'which is not allowed.'\n          );\n        }\n\n        const target = findModTarget(newDoc, keyparts, {\n          arrayIndices: options.arrayIndices,\n          forbidArray: operator === '$rename',\n          noCreate: NO_CREATE_MODIFIERS[operator]\n        });\n\n        modFunc(target, keyparts.pop(), arg, keypath, newDoc);\n      });\n    });\n\n    if (doc._id && !EJSON.equals(doc._id, newDoc._id)) {\n      throw MinimongoError(\n        `After applying the update to the document {_id: \"${doc._id}\", ...},` +\n        ' the (immutable) field \\'_id\\' was found to have been altered to ' +\n        `_id: \"${newDoc._id}\"`\n      );\n    }\n  } else {\n    if (doc._id && modifier._id && !EJSON.equals(doc._id, modifier._id)) {\n      throw MinimongoError(\n        `The _id field cannot be changed from {_id: \"${doc._id}\"} to ` +\n        `{_id: \"${modifier._id}\"}`\n      );\n    }\n\n    // replace the whole document\n    assertHasValidFieldNames(modifier);\n  }\n\n  // move new document into place.\n  Object.keys(doc).forEach(key => {\n    // Note: this used to be for (var key in doc) however, this does not\n    // work right in Opera. Deleting from a doc while iterating over it\n    // would sometimes cause opera to skip some keys.\n    if (key !== '_id') {\n      delete doc[key];\n    }\n  });\n\n  Object.keys(newDoc).forEach(key => {\n    doc[key] = newDoc[key];\n  });\n};\n\nLocalCollection._observeFromObserveChanges = (cursor, observeCallbacks) => {\n  const transform = cursor.getTransform() || (doc => doc);\n  let suppressed = !!observeCallbacks._suppress_initial;\n\n  let observeChangesCallbacks;\n  if (LocalCollection._observeCallbacksAreOrdered(observeCallbacks)) {\n    // The \"_no_indices\" option sets all index arguments to -1 and skips the\n    // linear scans required to generate them.  This lets observers that don't\n    // need absolute indices benefit from the other features of this API --\n    // relative order, transforms, and applyChanges -- without the speed hit.\n    const indices = !observeCallbacks._no_indices;\n\n    observeChangesCallbacks = {\n      addedBefore(id, fields, before) {\n        if (suppressed || !(observeCallbacks.addedAt || observeCallbacks.added)) {\n          return;\n        }\n\n        const doc = transform(Object.assign(fields, {_id: id}));\n\n        if (observeCallbacks.addedAt) {\n          observeCallbacks.addedAt(\n            doc,\n            indices\n              ? before\n                ? this.docs.indexOf(before)\n                : this.docs.size()\n              : -1,\n            before\n          );\n        } else {\n          observeCallbacks.added(doc);\n        }\n      },\n      changed(id, fields) {\n        if (!(observeCallbacks.changedAt || observeCallbacks.changed)) {\n          return;\n        }\n\n        let doc = EJSON.clone(this.docs.get(id));\n        if (!doc) {\n          throw new Error(`Unknown id for changed: ${id}`);\n        }\n\n        const oldDoc = transform(EJSON.clone(doc));\n\n        DiffSequence.applyChanges(doc, fields);\n\n        if (observeCallbacks.changedAt) {\n          observeCallbacks.changedAt(\n            transform(doc),\n            oldDoc,\n            indices ? this.docs.indexOf(id) : -1\n          );\n        } else {\n          observeCallbacks.changed(transform(doc), oldDoc);\n        }\n      },\n      movedBefore(id, before) {\n        if (!observeCallbacks.movedTo) {\n          return;\n        }\n\n        const from = indices ? this.docs.indexOf(id) : -1;\n        let to = indices\n          ? before\n            ? this.docs.indexOf(before)\n            : this.docs.size()\n          : -1;\n\n        // When not moving backwards, adjust for the fact that removing the\n        // document slides everything back one slot.\n        if (to > from) {\n          --to;\n        }\n\n        observeCallbacks.movedTo(\n          transform(EJSON.clone(this.docs.get(id))),\n          from,\n          to,\n          before || null\n        );\n      },\n      removed(id) {\n        if (!(observeCallbacks.removedAt || observeCallbacks.removed)) {\n          return;\n        }\n\n        // technically maybe there should be an EJSON.clone here, but it's about\n        // to be removed from this.docs!\n        const doc = transform(this.docs.get(id));\n\n        if (observeCallbacks.removedAt) {\n          observeCallbacks.removedAt(doc, indices ? this.docs.indexOf(id) : -1);\n        } else {\n          observeCallbacks.removed(doc);\n        }\n      },\n    };\n  } else {\n    observeChangesCallbacks = {\n      added(id, fields) {\n        if (!suppressed && observeCallbacks.added) {\n          observeCallbacks.added(transform(Object.assign(fields, {_id: id})));\n        }\n      },\n      changed(id, fields) {\n        if (observeCallbacks.changed) {\n          const oldDoc = this.docs.get(id);\n          const doc = EJSON.clone(oldDoc);\n\n          DiffSequence.applyChanges(doc, fields);\n\n          observeCallbacks.changed(\n            transform(doc),\n            transform(EJSON.clone(oldDoc))\n          );\n        }\n      },\n      removed(id) {\n        if (observeCallbacks.removed) {\n          observeCallbacks.removed(transform(this.docs.get(id)));\n        }\n      },\n    };\n  }\n\n  const changeObserver = new LocalCollection._CachingChangeObserver({\n    callbacks: observeChangesCallbacks\n  });\n\n  // CachingChangeObserver clones all received input on its callbacks\n  // So we can mark it as safe to reduce the ejson clones.\n  // This is tested by the `mongo-livedata - (extended) scribbling` tests\n  changeObserver.applyChange._fromObserve = true;\n  const handle = cursor.observeChanges(changeObserver.applyChange,\n    { nonMutatingCallbacks: true });\n\n  suppressed = false;\n\n  return handle;\n};\n\nLocalCollection._observeCallbacksAreOrdered = callbacks => {\n  if (callbacks.added && callbacks.addedAt) {\n    throw new Error('Please specify only one of added() and addedAt()');\n  }\n\n  if (callbacks.changed && callbacks.changedAt) {\n    throw new Error('Please specify only one of changed() and changedAt()');\n  }\n\n  if (callbacks.removed && callbacks.removedAt) {\n    throw new Error('Please specify only one of removed() and removedAt()');\n  }\n\n  return !!(\n    callbacks.addedAt ||\n    callbacks.changedAt ||\n    callbacks.movedTo ||\n    callbacks.removedAt\n  );\n};\n\nLocalCollection._observeChangesCallbacksAreOrdered = callbacks => {\n  if (callbacks.added && callbacks.addedBefore) {\n    throw new Error('Please specify only one of added() and addedBefore()');\n  }\n\n  return !!(callbacks.addedBefore || callbacks.movedBefore);\n};\n\nLocalCollection._removeFromResults = (query, doc) => {\n  if (query.ordered) {\n    const i = LocalCollection._findInOrderedResults(query, doc);\n\n    query.removed(doc._id);\n    query.results.splice(i, 1);\n  } else {\n    const id = doc._id;  // in case callback mutates doc\n\n    query.removed(doc._id);\n    query.results.remove(id);\n  }\n};\n\n// Is this selector just shorthand for lookup by _id?\nLocalCollection._selectorIsId = selector =>\n  typeof selector === 'number' ||\n  typeof selector === 'string' ||\n  selector instanceof MongoID.ObjectID\n;\n\n// Is the selector just lookup by _id (shorthand or not)?\nLocalCollection._selectorIsIdPerhapsAsObject = selector =>\n  LocalCollection._selectorIsId(selector) ||\n  LocalCollection._selectorIsId(selector && selector._id) &&\n  Object.keys(selector).length === 1\n;\n\nLocalCollection._updateInResults = (query, doc, old_doc) => {\n  if (!EJSON.equals(doc._id, old_doc._id)) {\n    throw new Error('Can\\'t change a doc\\'s _id while updating');\n  }\n\n  const projectionFn = query.projectionFn;\n  const changedFields = DiffSequence.makeChangedFields(\n    projectionFn(doc),\n    projectionFn(old_doc)\n  );\n\n  if (!query.ordered) {\n    if (Object.keys(changedFields).length) {\n      query.changed(doc._id, changedFields);\n      query.results.set(doc._id, doc);\n    }\n\n    return;\n  }\n\n  const old_idx = LocalCollection._findInOrderedResults(query, doc);\n\n  if (Object.keys(changedFields).length) {\n    query.changed(doc._id, changedFields);\n  }\n\n  if (!query.sorter) {\n    return;\n  }\n\n  // just take it out and put it back in again, and see if the index changes\n  query.results.splice(old_idx, 1);\n\n  const new_idx = LocalCollection._insertInSortedList(\n    query.sorter.getComparator({distances: query.distances}),\n    query.results,\n    doc\n  );\n\n  if (old_idx !== new_idx) {\n    let next = query.results[new_idx + 1];\n    if (next) {\n      next = next._id;\n    } else {\n      next = null;\n    }\n\n    query.movedBefore && query.movedBefore(doc._id, next);\n  }\n};\n\nconst MODIFIERS = {\n  $currentDate(target, field, arg) {\n    if (typeof arg === 'object' && hasOwn.call(arg, '$type')) {\n      if (arg.$type !== 'date') {\n        throw MinimongoError(\n          'Minimongo does currently only support the date type in ' +\n          '$currentDate modifiers',\n          {field}\n        );\n      }\n    } else if (arg !== true) {\n      throw MinimongoError('Invalid $currentDate modifier', {field});\n    }\n\n    target[field] = new Date();\n  },\n  $inc(target, field, arg) {\n    if (typeof arg !== 'number') {\n      throw MinimongoError('Modifier $inc allowed for numbers only', {field});\n    }\n\n    if (field in target) {\n      if (typeof target[field] !== 'number') {\n        throw MinimongoError(\n          'Cannot apply $inc modifier to non-number',\n          {field}\n        );\n      }\n\n      target[field] += arg;\n    } else {\n      target[field] = arg;\n    }\n  },\n  $min(target, field, arg) {\n    if (typeof arg !== 'number') {\n      throw MinimongoError('Modifier $min allowed for numbers only', {field});\n    }\n\n    if (field in target) {\n      if (typeof target[field] !== 'number') {\n        throw MinimongoError(\n          'Cannot apply $min modifier to non-number',\n          {field}\n        );\n      }\n\n      if (target[field] > arg) {\n        target[field] = arg;\n      }\n    } else {\n      target[field] = arg;\n    }\n  },\n  $max(target, field, arg) {\n    if (typeof arg !== 'number') {\n      throw MinimongoError('Modifier $max allowed for numbers only', {field});\n    }\n\n    if (field in target) {\n      if (typeof target[field] !== 'number') {\n        throw MinimongoError(\n          'Cannot apply $max modifier to non-number',\n          {field}\n        );\n      }\n\n      if (target[field] < arg) {\n        target[field] = arg;\n      }\n    } else {\n      target[field] = arg;\n    }\n  },\n  $mul(target, field, arg) {\n    if (typeof arg !== 'number') {\n      throw MinimongoError('Modifier $mul allowed for numbers only', {field});\n    }\n\n    if (field in target) {\n      if (typeof target[field] !== 'number') {\n        throw MinimongoError(\n          'Cannot apply $mul modifier to non-number',\n          {field}\n        );\n      }\n\n      target[field] *= arg;\n    } else {\n      target[field] = 0;\n    }\n  },\n  $rename(target, field, arg, keypath, doc) {\n    // no idea why mongo has this restriction..\n    if (keypath === arg) {\n      throw MinimongoError('$rename source must differ from target', {field});\n    }\n\n    if (target === null) {\n      throw MinimongoError('$rename source field invalid', {field});\n    }\n\n    if (typeof arg !== 'string') {\n      throw MinimongoError('$rename target must be a string', {field});\n    }\n\n    if (arg.includes('\\0')) {\n      // Null bytes are not allowed in Mongo field names\n      // https://docs.mongodb.com/manual/reference/limits/#Restrictions-on-Field-Names\n      throw MinimongoError(\n        'The \\'to\\' field for $rename cannot contain an embedded null byte',\n        {field}\n      );\n    }\n\n    if (target === undefined) {\n      return;\n    }\n\n    const object = target[field];\n\n    delete target[field];\n\n    const keyparts = arg.split('.');\n    const target2 = findModTarget(doc, keyparts, {forbidArray: true});\n\n    if (target2 === null) {\n      throw MinimongoError('$rename target field invalid', {field});\n    }\n\n    target2[keyparts.pop()] = object;\n  },\n  $set(target, field, arg) {\n    if (target !== Object(target)) { // not an array or an object\n      const error = MinimongoError(\n        'Cannot set property on non-object field',\n        {field}\n      );\n      error.setPropertyError = true;\n      throw error;\n    }\n\n    if (target === null) {\n      const error = MinimongoError('Cannot set property on null', {field});\n      error.setPropertyError = true;\n      throw error;\n    }\n\n    assertHasValidFieldNames(arg);\n\n    target[field] = arg;\n  },\n  $setOnInsert(target, field, arg) {\n    // converted to `$set` in `_modify`\n  },\n  $unset(target, field, arg) {\n    if (target !== undefined) {\n      if (target instanceof Array) {\n        if (field in target) {\n          target[field] = null;\n        }\n      } else {\n        delete target[field];\n      }\n    }\n  },\n  $push(target, field, arg) {\n    if (target[field] === undefined) {\n      target[field] = [];\n    }\n\n    if (!(target[field] instanceof Array)) {\n      throw MinimongoError('Cannot apply $push modifier to non-array', {field});\n    }\n\n    if (!(arg && arg.$each)) {\n      // Simple mode: not $each\n      assertHasValidFieldNames(arg);\n\n      target[field].push(arg);\n\n      return;\n    }\n\n    // Fancy mode: $each (and maybe $slice and $sort and $position)\n    const toPush = arg.$each;\n    if (!(toPush instanceof Array)) {\n      throw MinimongoError('$each must be an array', {field});\n    }\n\n    assertHasValidFieldNames(toPush);\n\n    // Parse $position\n    let position = undefined;\n    if ('$position' in arg) {\n      if (typeof arg.$position !== 'number') {\n        throw MinimongoError('$position must be a numeric value', {field});\n      }\n\n      // XXX should check to make sure integer\n      if (arg.$position < 0) {\n        throw MinimongoError(\n          '$position in $push must be zero or positive',\n          {field}\n        );\n      }\n\n      position = arg.$position;\n    }\n\n    // Parse $slice.\n    let slice = undefined;\n    if ('$slice' in arg) {\n      if (typeof arg.$slice !== 'number') {\n        throw MinimongoError('$slice must be a numeric value', {field});\n      }\n\n      // XXX should check to make sure integer\n      slice = arg.$slice;\n    }\n\n    // Parse $sort.\n    let sortFunction = undefined;\n    if (arg.$sort) {\n      if (slice === undefined) {\n        throw MinimongoError('$sort requires $slice to be present', {field});\n      }\n\n      // XXX this allows us to use a $sort whose value is an array, but that's\n      // actually an extension of the Node driver, so it won't work\n      // server-side. Could be confusing!\n      // XXX is it correct that we don't do geo-stuff here?\n      sortFunction = new Minimongo.Sorter(arg.$sort).getComparator();\n\n      toPush.forEach(element => {\n        if (LocalCollection._f._type(element) !== 3) {\n          throw MinimongoError(\n            '$push like modifiers using $sort require all elements to be ' +\n            'objects',\n            {field}\n          );\n        }\n      });\n    }\n\n    // Actually push.\n    if (position === undefined) {\n      toPush.forEach(element => {\n        target[field].push(element);\n      });\n    } else {\n      const spliceArguments = [position, 0];\n\n      toPush.forEach(element => {\n        spliceArguments.push(element);\n      });\n\n      target[field].splice(...spliceArguments);\n    }\n\n    // Actually sort.\n    if (sortFunction) {\n      target[field].sort(sortFunction);\n    }\n\n    // Actually slice.\n    if (slice !== undefined) {\n      if (slice === 0) {\n        target[field] = []; // differs from Array.slice!\n      } else if (slice < 0) {\n        target[field] = target[field].slice(slice);\n      } else {\n        target[field] = target[field].slice(0, slice);\n      }\n    }\n  },\n  $pushAll(target, field, arg) {\n    if (!(typeof arg === 'object' && arg instanceof Array)) {\n      throw MinimongoError('Modifier $pushAll/pullAll allowed for arrays only');\n    }\n\n    assertHasValidFieldNames(arg);\n\n    const toPush = target[field];\n\n    if (toPush === undefined) {\n      target[field] = arg;\n    } else if (!(toPush instanceof Array)) {\n      throw MinimongoError(\n        'Cannot apply $pushAll modifier to non-array',\n        {field}\n      );\n    } else {\n      toPush.push(...arg);\n    }\n  },\n  $addToSet(target, field, arg) {\n    let isEach = false;\n\n    if (typeof arg === 'object') {\n      // check if first key is '$each'\n      const keys = Object.keys(arg);\n      if (keys[0] === '$each') {\n        isEach = true;\n      }\n    }\n\n    const values = isEach ? arg.$each : [arg];\n\n    assertHasValidFieldNames(values);\n\n    const toAdd = target[field];\n    if (toAdd === undefined) {\n      target[field] = values;\n    } else if (!(toAdd instanceof Array)) {\n      throw MinimongoError(\n        'Cannot apply $addToSet modifier to non-array',\n        {field}\n      );\n    } else {\n      values.forEach(value => {\n        if (toAdd.some(element => LocalCollection._f._equal(value, element))) {\n          return;\n        }\n\n        toAdd.push(value);\n      });\n    }\n  },\n  $pop(target, field, arg) {\n    if (target === undefined) {\n      return;\n    }\n\n    const toPop = target[field];\n\n    if (toPop === undefined) {\n      return;\n    }\n\n    if (!(toPop instanceof Array)) {\n      throw MinimongoError('Cannot apply $pop modifier to non-array', {field});\n    }\n\n    if (typeof arg === 'number' && arg < 0) {\n      toPop.splice(0, 1);\n    } else {\n      toPop.pop();\n    }\n  },\n  $pull(target, field, arg) {\n    if (target === undefined) {\n      return;\n    }\n\n    const toPull = target[field];\n    if (toPull === undefined) {\n      return;\n    }\n\n    if (!(toPull instanceof Array)) {\n      throw MinimongoError(\n        'Cannot apply $pull/pullAll modifier to non-array',\n        {field}\n      );\n    }\n\n    let out;\n    if (arg != null && typeof arg === 'object' && !(arg instanceof Array)) {\n      // XXX would be much nicer to compile this once, rather than\n      // for each document we modify.. but usually we're not\n      // modifying that many documents, so we'll let it slide for\n      // now\n\n      // XXX Minimongo.Matcher isn't up for the job, because we need\n      // to permit stuff like {$pull: {a: {$gt: 4}}}.. something\n      // like {$gt: 4} is not normally a complete selector.\n      // same issue as $elemMatch possibly?\n      const matcher = new Minimongo.Matcher(arg);\n\n      out = toPull.filter(element => !matcher.documentMatches(element).result);\n    } else {\n      out = toPull.filter(element => !LocalCollection._f._equal(element, arg));\n    }\n\n    target[field] = out;\n  },\n  $pullAll(target, field, arg) {\n    if (!(typeof arg === 'object' && arg instanceof Array)) {\n      throw MinimongoError(\n        'Modifier $pushAll/pullAll allowed for arrays only',\n        {field}\n      );\n    }\n\n    if (target === undefined) {\n      return;\n    }\n\n    const toPull = target[field];\n\n    if (toPull === undefined) {\n      return;\n    }\n\n    if (!(toPull instanceof Array)) {\n      throw MinimongoError(\n        'Cannot apply $pull/pullAll modifier to non-array',\n        {field}\n      );\n    }\n\n    target[field] = toPull.filter(object =>\n      !arg.some(element => LocalCollection._f._equal(object, element))\n    );\n  },\n  $bit(target, field, arg) {\n    // XXX mongo only supports $bit on integers, and we only support\n    // native javascript numbers (doubles) so far, so we can't support $bit\n    throw MinimongoError('$bit is not supported', {field});\n  },\n  $v() {\n    // As discussed in https://github.com/meteor/meteor/issues/9623,\n    // the `$v` operator is not needed by Meteor, but problems can occur if\n    // it's not at least callable (as of Mongo >= 3.6). It's defined here as\n    // a no-op to work around these problems.\n  }\n};\n\nconst NO_CREATE_MODIFIERS = {\n  $pop: true,\n  $pull: true,\n  $pullAll: true,\n  $rename: true,\n  $unset: true\n};\n\n// Make sure field names do not contain Mongo restricted\n// characters ('.', '$', '\\0').\n// https://docs.mongodb.com/manual/reference/limits/#Restrictions-on-Field-Names\nconst invalidCharMsg = {\n  $: 'start with \\'$\\'',\n  '.': 'contain \\'.\\'',\n  '\\0': 'contain null bytes'\n};\n\n// checks if all field names in an object are valid\nfunction assertHasValidFieldNames(doc) {\n  if (doc && typeof doc === 'object') {\n    JSON.stringify(doc, (key, value) => {\n      assertIsValidFieldName(key);\n      return value;\n    });\n  }\n}\n\nfunction assertIsValidFieldName(key) {\n  let match;\n  if (typeof key === 'string' && (match = key.match(/^\\$|\\.|\\0/))) {\n    throw MinimongoError(`Key ${key} must not ${invalidCharMsg[match[0]]}`);\n  }\n}\n\n// for a.b.c.2.d.e, keyparts should be ['a', 'b', 'c', '2', 'd', 'e'],\n// and then you would operate on the 'e' property of the returned\n// object.\n//\n// if options.noCreate is falsey, creates intermediate levels of\n// structure as necessary, like mkdir -p (and raises an exception if\n// that would mean giving a non-numeric property to an array.) if\n// options.noCreate is true, return undefined instead.\n//\n// may modify the last element of keyparts to signal to the caller that it needs\n// to use a different value to index into the returned object (for example,\n// ['a', '01'] -> ['a', 1]).\n//\n// if forbidArray is true, return null if the keypath goes through an array.\n//\n// if options.arrayIndices is set, use its first element for the (first) '$' in\n// the path.\nfunction findModTarget(doc, keyparts, options = {}) {\n  let usedArrayIndex = false;\n\n  for (let i = 0; i < keyparts.length; i++) {\n    const last = i === keyparts.length - 1;\n    let keypart = keyparts[i];\n\n    if (!isIndexable(doc)) {\n      if (options.noCreate) {\n        return undefined;\n      }\n\n      const error = MinimongoError(\n        `cannot use the part '${keypart}' to traverse ${doc}`\n      );\n      error.setPropertyError = true;\n      throw error;\n    }\n\n    if (doc instanceof Array) {\n      if (options.forbidArray) {\n        return null;\n      }\n\n      if (keypart === '$') {\n        if (usedArrayIndex) {\n          throw MinimongoError('Too many positional (i.e. \\'$\\') elements');\n        }\n\n        if (!options.arrayIndices || !options.arrayIndices.length) {\n          throw MinimongoError(\n            'The positional operator did not find the match needed from the ' +\n            'query'\n          );\n        }\n\n        keypart = options.arrayIndices[0];\n        usedArrayIndex = true;\n      } else if (isNumericKey(keypart)) {\n        keypart = parseInt(keypart);\n      } else {\n        if (options.noCreate) {\n          return undefined;\n        }\n\n        throw MinimongoError(\n          `can't append to array using string field name [${keypart}]`\n        );\n      }\n\n      if (last) {\n        keyparts[i] = keypart; // handle 'a.01'\n      }\n\n      if (options.noCreate && keypart >= doc.length) {\n        return undefined;\n      }\n\n      while (doc.length < keypart) {\n        doc.push(null);\n      }\n\n      if (!last) {\n        if (doc.length === keypart) {\n          doc.push({});\n        } else if (typeof doc[keypart] !== 'object') {\n          throw MinimongoError(\n            `can't modify field '${keyparts[i + 1]}' of list value ` +\n            JSON.stringify(doc[keypart])\n          );\n        }\n      }\n    } else {\n      assertIsValidFieldName(keypart);\n\n      if (!(keypart in doc)) {\n        if (options.noCreate) {\n          return undefined;\n        }\n\n        if (!last) {\n          doc[keypart] = {};\n        }\n      }\n    }\n\n    if (last) {\n      return doc;\n    }\n\n    doc = doc[keypart];\n  }\n\n  // notreached\n}\n","import LocalCollection from './local_collection.js';\nimport {\n  compileDocumentSelector,\n  hasOwn,\n  nothingMatcher,\n} from './common.js';\n\nconst Decimal = Package['mongo-decimal']?.Decimal || class DecimalStub {}\n\n// The minimongo selector compiler!\n\n// Terminology:\n//  - a 'selector' is the EJSON object representing a selector\n//  - a 'matcher' is its compiled form (whether a full Minimongo.Matcher\n//    object or one of the component lambdas that matches parts of it)\n//  - a 'result object' is an object with a 'result' field and maybe\n//    distance and arrayIndices.\n//  - a 'branched value' is an object with a 'value' field and maybe\n//    'dontIterate' and 'arrayIndices'.\n//  - a 'document' is a top-level object that can be stored in a collection.\n//  - a 'lookup function' is a function that takes in a document and returns\n//    an array of 'branched values'.\n//  - a 'branched matcher' maps from an array of branched values to a result\n//    object.\n//  - an 'element matcher' maps from a single value to a bool.\n\n// Main entry point.\n//   var matcher = new Minimongo.Matcher({a: {$gt: 5}});\n//   if (matcher.documentMatches({a: 7})) ...\nexport default class Matcher {\n  constructor(selector, isUpdate) {\n    // A set (object mapping string -> *) of all of the document paths looked\n    // at by the selector. Also includes the empty string if it may look at any\n    // path (eg, $where).\n    this._paths = {};\n    // Set to true if compilation finds a $near.\n    this._hasGeoQuery = false;\n    // Set to true if compilation finds a $where.\n    this._hasWhere = false;\n    // Set to false if compilation finds anything other than a simple equality\n    // or one or more of '$gt', '$gte', '$lt', '$lte', '$ne', '$in', '$nin' used\n    // with scalars as operands.\n    this._isSimple = true;\n    // Set to a dummy document which always matches this Matcher. Or set to null\n    // if such document is too hard to find.\n    this._matchingDocument = undefined;\n    // A clone of the original selector. It may just be a function if the user\n    // passed in a function; otherwise is definitely an object (eg, IDs are\n    // translated into {_id: ID} first. Used by canBecomeTrueByModifier and\n    // Sorter._useWithMatcher.\n    this._selector = null;\n    this._docMatcher = this._compileSelector(selector);\n    // Set to true if selection is done for an update operation\n    // Default is false\n    // Used for $near array update (issue #3599)\n    this._isUpdate = isUpdate;\n  }\n\n  documentMatches(doc) {\n    if (doc !== Object(doc)) {\n      throw Error('documentMatches needs a document');\n    }\n\n    return this._docMatcher(doc);\n  }\n\n  hasGeoQuery() {\n    return this._hasGeoQuery;\n  }\n\n  hasWhere() {\n    return this._hasWhere;\n  }\n\n  isSimple() {\n    return this._isSimple;\n  }\n\n  // Given a selector, return a function that takes one argument, a\n  // document. It returns a result object.\n  _compileSelector(selector) {\n    // you can pass a literal function instead of a selector\n    if (selector instanceof Function) {\n      this._isSimple = false;\n      this._selector = selector;\n      this._recordPathUsed('');\n\n      return doc => ({result: !!selector.call(doc)});\n    }\n\n    // shorthand -- scalar _id\n    if (LocalCollection._selectorIsId(selector)) {\n      this._selector = {_id: selector};\n      this._recordPathUsed('_id');\n\n      return doc => ({result: EJSON.equals(doc._id, selector)});\n    }\n\n    // protect against dangerous selectors.  falsey and {_id: falsey} are both\n    // likely programmer error, and not what you want, particularly for\n    // destructive operations.\n    if (!selector || hasOwn.call(selector, '_id') && !selector._id) {\n      this._isSimple = false;\n      return nothingMatcher;\n    }\n\n    // Top level can't be an array or true or binary.\n    if (Array.isArray(selector) ||\n        EJSON.isBinary(selector) ||\n        typeof selector === 'boolean') {\n      throw new Error(`Invalid selector: ${selector}`);\n    }\n\n    this._selector = EJSON.clone(selector);\n\n    return compileDocumentSelector(selector, this, {isRoot: true});\n  }\n\n  // Returns a list of key paths the given selector is looking for. It includes\n  // the empty string if there is a $where.\n  _getPaths() {\n    return Object.keys(this._paths);\n  }\n\n  _recordPathUsed(path) {\n    this._paths[path] = true;\n  }\n}\n\n// helpers used by compiled selector code\nLocalCollection._f = {\n  // XXX for _all and _in, consider building 'inquery' at compile time..\n  _type(v) {\n    if (typeof v === 'number') {\n      return 1;\n    }\n\n    if (typeof v === 'string') {\n      return 2;\n    }\n\n    if (typeof v === 'boolean') {\n      return 8;\n    }\n\n    if (Array.isArray(v)) {\n      return 4;\n    }\n\n    if (v === null) {\n      return 10;\n    }\n\n    // note that typeof(/x/) === \"object\"\n    if (v instanceof RegExp) {\n      return 11;\n    }\n\n    if (typeof v === 'function') {\n      return 13;\n    }\n\n    if (v instanceof Date) {\n      return 9;\n    }\n\n    if (EJSON.isBinary(v)) {\n      return 5;\n    }\n\n    if (v instanceof MongoID.ObjectID) {\n      return 7;\n    }\n\n    if (v instanceof Decimal) {\n      return 1;\n    }\n\n    // object\n    return 3;\n\n    // XXX support some/all of these:\n    // 14, symbol\n    // 15, javascript code with scope\n    // 16, 18: 32-bit/64-bit integer\n    // 17, timestamp\n    // 255, minkey\n    // 127, maxkey\n  },\n\n  // deep equality test: use for literal document and array matches\n  _equal(a, b) {\n    return EJSON.equals(a, b, {keyOrderSensitive: true});\n  },\n\n  // maps a type code to a value that can be used to sort values of different\n  // types\n  _typeorder(t) {\n    // http://www.mongodb.org/display/DOCS/What+is+the+Compare+Order+for+BSON+Types\n    // XXX what is the correct sort position for Javascript code?\n    // ('100' in the matrix below)\n    // XXX minkey/maxkey\n    return [\n      -1,  // (not a type)\n      1,   // number\n      2,   // string\n      3,   // object\n      4,   // array\n      5,   // binary\n      -1,  // deprecated\n      6,   // ObjectID\n      7,   // bool\n      8,   // Date\n      0,   // null\n      9,   // RegExp\n      -1,  // deprecated\n      100, // JS code\n      2,   // deprecated (symbol)\n      100, // JS code\n      1,   // 32-bit int\n      8,   // Mongo timestamp\n      1    // 64-bit int\n    ][t];\n  },\n\n  // compare two values of unknown type according to BSON ordering\n  // semantics. (as an extension, consider 'undefined' to be less than\n  // any other value.) return negative if a is less, positive if b is\n  // less, or 0 if equal\n  _cmp(a, b) {\n    if (a === undefined) {\n      return b === undefined ? 0 : -1;\n    }\n\n    if (b === undefined) {\n      return 1;\n    }\n\n    let ta = LocalCollection._f._type(a);\n    let tb = LocalCollection._f._type(b);\n\n    const oa = LocalCollection._f._typeorder(ta);\n    const ob = LocalCollection._f._typeorder(tb);\n\n    if (oa !== ob) {\n      return oa < ob ? -1 : 1;\n    }\n\n    // XXX need to implement this if we implement Symbol or integers, or\n    // Timestamp\n    if (ta !== tb) {\n      throw Error('Missing type coercion logic in _cmp');\n    }\n\n    if (ta === 7) { // ObjectID\n      // Convert to string.\n      ta = tb = 2;\n      a = a.toHexString();\n      b = b.toHexString();\n    }\n\n    if (ta === 9) { // Date\n      // Convert to millis.\n      ta = tb = 1;\n      a = isNaN(a) ? 0 : a.getTime();\n      b = isNaN(b) ? 0 : b.getTime();\n    }\n\n    if (ta === 1) { // double\n      if (a instanceof Decimal) {\n        return a.minus(b).toNumber();\n      } else {\n        return a - b;\n      }\n    }\n\n    if (tb === 2) // string\n      return a < b ? -1 : a === b ? 0 : 1;\n\n    if (ta === 3) { // Object\n      // this could be much more efficient in the expected case ...\n      const toArray = object => {\n        const result = [];\n\n        Object.keys(object).forEach(key => {\n          result.push(key, object[key]);\n        });\n\n        return result;\n      };\n\n      return LocalCollection._f._cmp(toArray(a), toArray(b));\n    }\n\n    if (ta === 4) { // Array\n      for (let i = 0; ; i++) {\n        if (i === a.length) {\n          return i === b.length ? 0 : -1;\n        }\n\n        if (i === b.length) {\n          return 1;\n        }\n\n        const s = LocalCollection._f._cmp(a[i], b[i]);\n        if (s !== 0) {\n          return s;\n        }\n      }\n    }\n\n    if (ta === 5) { // binary\n      // Surprisingly, a small binary blob is always less than a large one in\n      // Mongo.\n      if (a.length !== b.length) {\n        return a.length - b.length;\n      }\n\n      for (let i = 0; i < a.length; i++) {\n        if (a[i] < b[i]) {\n          return -1;\n        }\n\n        if (a[i] > b[i]) {\n          return 1;\n        }\n      }\n\n      return 0;\n    }\n\n    if (ta === 8) { // boolean\n      if (a) {\n        return b ? 0 : 1;\n      }\n\n      return b ? -1 : 0;\n    }\n\n    if (ta === 10) // null\n      return 0;\n\n    if (ta === 11) // regexp\n      throw Error('Sorting not supported on regular expression'); // XXX\n\n    // 13: javascript code\n    // 14: symbol\n    // 15: javascript code with scope\n    // 16: 32-bit integer\n    // 17: timestamp\n    // 18: 64-bit integer\n    // 255: minkey\n    // 127: maxkey\n    if (ta === 13) // javascript code\n      throw Error('Sorting not supported on Javascript code'); // XXX\n\n    throw Error('Unknown type to sort');\n  },\n};\n","import LocalCollection_ from './local_collection.js';\nimport Matcher from './matcher.js';\nimport Sorter from './sorter.js';\n\nLocalCollection = LocalCollection_;\nMinimongo = {\n    LocalCollection: LocalCollection_,\n    Matcher,\n    Sorter\n};\n","// ObserveHandle: the return value of a live query.\nexport default class ObserveHandle {}\n","import {\n  ELEMENT_OPERATORS,\n  equalityElementMatcher,\n  expandArraysInBranches,\n  hasOwn,\n  isOperatorObject,\n  makeLookupFunction,\n  regexpElementMatcher,\n} from './common.js';\n\n// Give a sort spec, which can be in any of these forms:\n//   {\"key1\": 1, \"key2\": -1}\n//   [[\"key1\", \"asc\"], [\"key2\", \"desc\"]]\n//   [\"key1\", [\"key2\", \"desc\"]]\n//\n// (.. with the first form being dependent on the key enumeration\n// behavior of your javascript VM, which usually does what you mean in\n// this case if the key names don't look like integers ..)\n//\n// return a function that takes two objects, and returns -1 if the\n// first object comes first in order, 1 if the second object comes\n// first, or 0 if neither object comes before the other.\n\nexport default class Sorter {\n  constructor(spec) {\n    this._sortSpecParts = [];\n    this._sortFunction = null;\n\n    const addSpecPart = (path, ascending) => {\n      if (!path) {\n        throw Error('sort keys must be non-empty');\n      }\n\n      if (path.charAt(0) === '$') {\n        throw Error(`unsupported sort key: ${path}`);\n      }\n\n      this._sortSpecParts.push({\n        ascending,\n        lookup: makeLookupFunction(path, {forSort: true}),\n        path\n      });\n    };\n\n    if (spec instanceof Array) {\n      spec.forEach(element => {\n        if (typeof element === 'string') {\n          addSpecPart(element, true);\n        } else {\n          addSpecPart(element[0], element[1] !== 'desc');\n        }\n      });\n    } else if (typeof spec === 'object') {\n      Object.keys(spec).forEach(key => {\n        addSpecPart(key, spec[key] >= 0);\n      });\n    } else if (typeof spec === 'function') {\n      this._sortFunction = spec;\n    } else {\n      throw Error(`Bad sort specification: ${JSON.stringify(spec)}`);\n    }\n\n    // If a function is specified for sorting, we skip the rest.\n    if (this._sortFunction) {\n      return;\n    }\n\n    // To implement affectedByModifier, we piggy-back on top of Matcher's\n    // affectedByModifier code; we create a selector that is affected by the\n    // same modifiers as this sort order. This is only implemented on the\n    // server.\n    if (this.affectedByModifier) {\n      const selector = {};\n\n      this._sortSpecParts.forEach(spec => {\n        selector[spec.path] = 1;\n      });\n\n      this._selectorForAffectedByModifier = new Minimongo.Matcher(selector);\n    }\n\n    this._keyComparator = composeComparators(\n      this._sortSpecParts.map((spec, i) => this._keyFieldComparator(i))\n    );\n  }\n\n  getComparator(options) {\n    // If sort is specified or have no distances, just use the comparator from\n    // the source specification (which defaults to \"everything is equal\".\n    // issue #3599\n    // https://docs.mongodb.com/manual/reference/operator/query/near/#sort-operation\n    // sort effectively overrides $near\n    if (this._sortSpecParts.length || !options || !options.distances) {\n      return this._getBaseComparator();\n    }\n\n    const distances = options.distances;\n\n    // Return a comparator which compares using $near distances.\n    return (a, b) => {\n      if (!distances.has(a._id)) {\n        throw Error(`Missing distance for ${a._id}`);\n      }\n\n      if (!distances.has(b._id)) {\n        throw Error(`Missing distance for ${b._id}`);\n      }\n\n      return distances.get(a._id) - distances.get(b._id);\n    };\n  }\n\n  // Takes in two keys: arrays whose lengths match the number of spec\n  // parts. Returns negative, 0, or positive based on using the sort spec to\n  // compare fields.\n  _compareKeys(key1, key2) {\n    if (key1.length !== this._sortSpecParts.length ||\n        key2.length !== this._sortSpecParts.length) {\n      throw Error('Key has wrong length');\n    }\n\n    return this._keyComparator(key1, key2);\n  }\n\n  // Iterates over each possible \"key\" from doc (ie, over each branch), calling\n  // 'cb' with the key.\n  _generateKeysFromDoc(doc, cb) {\n    if (this._sortSpecParts.length === 0) {\n      throw new Error('can\\'t generate keys without a spec');\n    }\n\n    const pathFromIndices = indices => `${indices.join(',')},`;\n\n    let knownPaths = null;\n\n    // maps index -> ({'' -> value} or {path -> value})\n    const valuesByIndexAndPath = this._sortSpecParts.map(spec => {\n      // Expand any leaf arrays that we find, and ignore those arrays\n      // themselves.  (We never sort based on an array itself.)\n      let branches = expandArraysInBranches(spec.lookup(doc), true);\n\n      // If there are no values for a key (eg, key goes to an empty array),\n      // pretend we found one undefined value.\n      if (!branches.length) {\n        branches = [{ value: void 0 }];\n      }\n\n      const element = Object.create(null);\n      let usedPaths = false;\n\n      branches.forEach(branch => {\n        if (!branch.arrayIndices) {\n          // If there are no array indices for a branch, then it must be the\n          // only branch, because the only thing that produces multiple branches\n          // is the use of arrays.\n          if (branches.length > 1) {\n            throw Error('multiple branches but no array used?');\n          }\n\n          element[''] = branch.value;\n          return;\n        }\n\n        usedPaths = true;\n\n        const path = pathFromIndices(branch.arrayIndices);\n\n        if (hasOwn.call(element, path)) {\n          throw Error(`duplicate path: ${path}`);\n        }\n\n        element[path] = branch.value;\n\n        // If two sort fields both go into arrays, they have to go into the\n        // exact same arrays and we have to find the same paths.  This is\n        // roughly the same condition that makes MongoDB throw this strange\n        // error message.  eg, the main thing is that if sort spec is {a: 1,\n        // b:1} then a and b cannot both be arrays.\n        //\n        // (In MongoDB it seems to be OK to have {a: 1, 'a.x.y': 1} where 'a'\n        // and 'a.x.y' are both arrays, but we don't allow this for now.\n        // #NestedArraySort\n        // XXX achieve full compatibility here\n        if (knownPaths && !hasOwn.call(knownPaths, path)) {\n          throw Error('cannot index parallel arrays');\n        }\n      });\n\n      if (knownPaths) {\n        // Similarly to above, paths must match everywhere, unless this is a\n        // non-array field.\n        if (!hasOwn.call(element, '') &&\n            Object.keys(knownPaths).length !== Object.keys(element).length) {\n          throw Error('cannot index parallel arrays!');\n        }\n      } else if (usedPaths) {\n        knownPaths = {};\n\n        Object.keys(element).forEach(path => {\n          knownPaths[path] = true;\n        });\n      }\n\n      return element;\n    });\n\n    if (!knownPaths) {\n      // Easy case: no use of arrays.\n      const soleKey = valuesByIndexAndPath.map(values => {\n        if (!hasOwn.call(values, '')) {\n          throw Error('no value in sole key case?');\n        }\n\n        return values[''];\n      });\n\n      cb(soleKey);\n\n      return;\n    }\n\n    Object.keys(knownPaths).forEach(path => {\n      const key = valuesByIndexAndPath.map(values => {\n        if (hasOwn.call(values, '')) {\n          return values[''];\n        }\n\n        if (!hasOwn.call(values, path)) {\n          throw Error('missing path?');\n        }\n\n        return values[path];\n      });\n\n      cb(key);\n    });\n  }\n\n  // Returns a comparator that represents the sort specification (but not\n  // including a possible geoquery distance tie-breaker).\n  _getBaseComparator() {\n    if (this._sortFunction) {\n      return this._sortFunction;\n    }\n\n    // If we're only sorting on geoquery distance and no specs, just say\n    // everything is equal.\n    if (!this._sortSpecParts.length) {\n      return (doc1, doc2) => 0;\n    }\n\n    return (doc1, doc2) => {\n      const key1 = this._getMinKeyFromDoc(doc1);\n      const key2 = this._getMinKeyFromDoc(doc2);\n      return this._compareKeys(key1, key2);\n    };\n  }\n\n  // Finds the minimum key from the doc, according to the sort specs.  (We say\n  // \"minimum\" here but this is with respect to the sort spec, so \"descending\"\n  // sort fields mean we're finding the max for that field.)\n  //\n  // Note that this is NOT \"find the minimum value of the first field, the\n  // minimum value of the second field, etc\"... it's \"choose the\n  // lexicographically minimum value of the key vector, allowing only keys which\n  // you can find along the same paths\".  ie, for a doc {a: [{x: 0, y: 5}, {x:\n  // 1, y: 3}]} with sort spec {'a.x': 1, 'a.y': 1}, the only keys are [0,5] and\n  // [1,3], and the minimum key is [0,5]; notably, [0,3] is NOT a key.\n  _getMinKeyFromDoc(doc) {\n    let minKey = null;\n\n    this._generateKeysFromDoc(doc, key => {\n      if (minKey === null) {\n        minKey = key;\n        return;\n      }\n\n      if (this._compareKeys(key, minKey) < 0) {\n        minKey = key;\n      }\n    });\n\n    return minKey;\n  }\n\n  _getPaths() {\n    return this._sortSpecParts.map(part => part.path);\n  }\n\n  // Given an index 'i', returns a comparator that compares two key arrays based\n  // on field 'i'.\n  _keyFieldComparator(i) {\n    const invert = !this._sortSpecParts[i].ascending;\n\n    return (key1, key2) => {\n      const compare = LocalCollection._f._cmp(key1[i], key2[i]);\n      return invert ? -compare : compare;\n    };\n  }\n}\n\n// Given an array of comparators\n// (functions (a,b)->(negative or positive or zero)), returns a single\n// comparator which uses each comparator in order and returns the first\n// non-zero value.\nfunction composeComparators(comparatorArray) {\n  return (a, b) => {\n    for (let i = 0; i < comparatorArray.length; ++i) {\n      const compare = comparatorArray[i](a, b);\n      if (compare !== 0) {\n        return compare;\n      }\n    }\n\n    return 0;\n  };\n}\n"]}