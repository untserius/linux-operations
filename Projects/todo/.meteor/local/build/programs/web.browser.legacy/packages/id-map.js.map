{"version":3,"sources":["meteor://ðŸ’»app/packages/id-map/id-map.js"],"names":["_createForOfIteratorHelperLoose","module","link","default","v","_slicedToArray","export","IdMap","idStringify","idParse","_map","Map","_idStringify","JSON","stringify","_idParse","parse","get","id","key","set","value","remove","delete","has","empty","size","clear","forEach","iterator","breakIfFalse","call","setDefault","def","clone","EJSON"],"mappings":"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","file":"/packages/id-map.js","sourcesContent":["\nexport class IdMap {\n  constructor(idStringify, idParse) {\n    this._map = new Map();\n    this._idStringify = idStringify || JSON.stringify;\n    this._idParse = idParse || JSON.parse;\n  }\n\n// Some of these methods are designed to match methods on OrderedDict, since\n// (eg) ObserveMultiplex and _CachingChangeObserver use them interchangeably.\n// (Conceivably, this should be replaced with \"UnorderedDict\" with a specific\n// set of methods that overlap between the two.)\n\n  get(id) {\n    const key = this._idStringify(id);\n    return this._map.get(key);\n  }\n\n  set(id, value) {\n    const key = this._idStringify(id);\n    this._map.set(key, value);\n  }\n\n  remove(id) {\n    const key = this._idStringify(id);\n    this._map.delete(key);\n  }\n\n  has(id) {\n    const key = this._idStringify(id);\n    return this._map.has(key);\n  }\n\n  empty() {\n    return this._map.size === 0;\n  }\n\n  clear() {\n    this._map.clear();\n  }\n\n  // Iterates over the items in the map. Return `false` to break the loop.\n  forEach(iterator) {\n    // don't use _.each, because we can't break out of it.\n    for (let [key, value] of this._map){\n      const breakIfFalse = iterator.call(\n        null,\n        value,\n        this._idParse(key)\n      );\n      if (breakIfFalse === false) {\n        return;\n      }\n    }\n  }\n\n  size() {\n    return this._map.size;\n  }\n\n  setDefault(id, def) {\n    const key = this._idStringify(id);\n    if (this._map.has(key)) {\n      return this._map.get(key);\n    }\n    this._map.set(key, def);\n    return def;\n  }\n\n  // Assumes that values are EJSON-cloneable, and that we don't need to clone\n  // IDs (ie, that nobody is going to mutate an ObjectId).\n  clone() {\n    const clone = new IdMap(this._idStringify, this._idParse);\n    // copy directly to avoid stringify/parse overhead\n    this._map.forEach(function(value, key){\n      clone._map.set(key, EJSON.clone(value));\n    });\n    return clone;\n  }\n}\n"]}