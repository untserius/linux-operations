{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/home/serius/Desktop/Practicals/Projects/todo/packages/ejson/ejson.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"packages/ejson/ejson.js","filename":"/home/serius/Desktop/Practicals/Projects/todo/packages/ejson/ejson.js","targets":{},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/home/serius/Desktop/Practicals/Projects/todo","root":"/home/serius/Desktop/Practicals/Projects/todo","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"_exploded":{},"_verified":{},"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/home/serius/Desktop/Practicals/Projects/todo/packages/ejson/ejson.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/ejson/ejson.js"}},"code":"module.export({\n  EJSON: () => EJSON\n});\nlet isFunction, isObject, keysOf, lengthOf, hasOwn, convertMapToObject, isArguments, isInfOrNaN, handleError;\nmodule.link(\"./utils\", {\n  isFunction(v) {\n    isFunction = v;\n  },\n  isObject(v) {\n    isObject = v;\n  },\n  keysOf(v) {\n    keysOf = v;\n  },\n  lengthOf(v) {\n    lengthOf = v;\n  },\n  hasOwn(v) {\n    hasOwn = v;\n  },\n  convertMapToObject(v) {\n    convertMapToObject = v;\n  },\n  isArguments(v) {\n    isArguments = v;\n  },\n  isInfOrNaN(v) {\n    isInfOrNaN = v;\n  },\n  handleError(v) {\n    handleError = v;\n  }\n}, 0);\n/**\n * @namespace\n * @summary Namespace for EJSON functions\n */\nconst EJSON = {};\n\n// Custom type interface definition\n/**\n * @class CustomType\n * @instanceName customType\n * @memberOf EJSON\n * @summary The interface that a class must satisfy to be able to become an\n * EJSON custom type via EJSON.addType.\n */\n\n/**\n * @function typeName\n * @memberOf EJSON.CustomType\n * @summary Return the tag used to identify this type.  This must match the\n *          tag used to register this type with\n *          [`EJSON.addType`](#ejson_add_type).\n * @locus Anywhere\n * @instance\n */\n\n/**\n * @function toJSONValue\n * @memberOf EJSON.CustomType\n * @summary Serialize this instance into a JSON-compatible value.\n * @locus Anywhere\n * @instance\n */\n\n/**\n * @function clone\n * @memberOf EJSON.CustomType\n * @summary Return a value `r` such that `this.equals(r)` is true, and\n *          modifications to `r` do not affect `this` and vice versa.\n * @locus Anywhere\n * @instance\n */\n\n/**\n * @function equals\n * @memberOf EJSON.CustomType\n * @summary Return `true` if `other` has a value equal to `this`; `false`\n *          otherwise.\n * @locus Anywhere\n * @param {Object} other Another object to compare this to.\n * @instance\n */\n\nconst customTypes = new Map();\n\n// Add a custom type, using a method of your choice to get to and\n// from a basic JSON-able representation.  The factory argument\n// is a function of JSON-able --> your object\n// The type you add must have:\n// - A toJSONValue() method, so that Meteor can serialize it\n// - a typeName() method, to show how to look it up in our type table.\n// It is okay if these methods are monkey-patched on.\n// EJSON.clone will use toJSONValue and the given factory to produce\n// a clone, but you may specify a method clone() that will be\n// used instead.\n// Similarly, EJSON.equals will use toJSONValue to make comparisons,\n// but you may provide a method equals() instead.\n/**\n * @summary Add a custom datatype to EJSON.\n * @locus Anywhere\n * @param {String} name A tag for your custom type; must be unique among\n *                      custom data types defined in your project, and must\n *                      match the result of your type's `typeName` method.\n * @param {Function} factory A function that deserializes a JSON-compatible\n *                           value into an instance of your type.  This should\n *                           match the serialization performed by your\n *                           type's `toJSONValue` method.\n */\nEJSON.addType = (name, factory) => {\n  if (customTypes.has(name)) {\n    throw new Error(\"Type \".concat(name, \" already present\"));\n  }\n  customTypes.set(name, factory);\n};\nconst builtinConverters = [{\n  // Date\n  matchJSONValue(obj) {\n    return hasOwn(obj, '$date') && lengthOf(obj) === 1;\n  },\n  matchObject(obj) {\n    return obj instanceof Date;\n  },\n  toJSONValue(obj) {\n    return {\n      $date: obj.getTime()\n    };\n  },\n  fromJSONValue(obj) {\n    return new Date(obj.$date);\n  }\n}, {\n  // RegExp\n  matchJSONValue(obj) {\n    return hasOwn(obj, '$regexp') && hasOwn(obj, '$flags') && lengthOf(obj) === 2;\n  },\n  matchObject(obj) {\n    return obj instanceof RegExp;\n  },\n  toJSONValue(regexp) {\n    return {\n      $regexp: regexp.source,\n      $flags: regexp.flags\n    };\n  },\n  fromJSONValue(obj) {\n    // Replaces duplicate / invalid flags.\n    return new RegExp(obj.$regexp, obj.$flags\n    // Cut off flags at 50 chars to avoid abusing RegExp for DOS.\n    .slice(0, 50).replace(/[^gimuy]/g, '').replace(/(.)(?=.*\\1)/g, ''));\n  }\n}, {\n  // NaN, Inf, -Inf. (These are the only objects with typeof !== 'object'\n  // which we match.)\n  matchJSONValue(obj) {\n    return hasOwn(obj, '$InfNaN') && lengthOf(obj) === 1;\n  },\n  matchObject: isInfOrNaN,\n  toJSONValue(obj) {\n    let sign;\n    if (Number.isNaN(obj)) {\n      sign = 0;\n    } else if (obj === Infinity) {\n      sign = 1;\n    } else {\n      sign = -1;\n    }\n    return {\n      $InfNaN: sign\n    };\n  },\n  fromJSONValue(obj) {\n    return obj.$InfNaN / 0;\n  }\n}, {\n  // Binary\n  matchJSONValue(obj) {\n    return hasOwn(obj, '$binary') && lengthOf(obj) === 1;\n  },\n  matchObject(obj) {\n    return typeof Uint8Array !== 'undefined' && obj instanceof Uint8Array || obj && hasOwn(obj, '$Uint8ArrayPolyfill');\n  },\n  toJSONValue(obj) {\n    return {\n      $binary: Base64.encode(obj)\n    };\n  },\n  fromJSONValue(obj) {\n    return Base64.decode(obj.$binary);\n  }\n}, {\n  // Escaping one level\n  matchJSONValue(obj) {\n    return hasOwn(obj, '$escape') && lengthOf(obj) === 1;\n  },\n  matchObject(obj) {\n    let match = false;\n    if (obj) {\n      const keyCount = lengthOf(obj);\n      if (keyCount === 1 || keyCount === 2) {\n        match = builtinConverters.some(converter => converter.matchJSONValue(obj));\n      }\n    }\n    return match;\n  },\n  toJSONValue(obj) {\n    const newObj = {};\n    keysOf(obj).forEach(key => {\n      newObj[key] = EJSON.toJSONValue(obj[key]);\n    });\n    return {\n      $escape: newObj\n    };\n  },\n  fromJSONValue(obj) {\n    const newObj = {};\n    keysOf(obj.$escape).forEach(key => {\n      newObj[key] = EJSON.fromJSONValue(obj.$escape[key]);\n    });\n    return newObj;\n  }\n}, {\n  // Custom\n  matchJSONValue(obj) {\n    return hasOwn(obj, '$type') && hasOwn(obj, '$value') && lengthOf(obj) === 2;\n  },\n  matchObject(obj) {\n    return EJSON._isCustomType(obj);\n  },\n  toJSONValue(obj) {\n    const jsonValue = Meteor._noYieldsAllowed(() => obj.toJSONValue());\n    return {\n      $type: obj.typeName(),\n      $value: jsonValue\n    };\n  },\n  fromJSONValue(obj) {\n    const typeName = obj.$type;\n    if (!customTypes.has(typeName)) {\n      throw new Error(\"Custom EJSON type \".concat(typeName, \" is not defined\"));\n    }\n    const converter = customTypes.get(typeName);\n    return Meteor._noYieldsAllowed(() => converter(obj.$value));\n  }\n}];\nEJSON._isCustomType = obj => obj && isFunction(obj.toJSONValue) && isFunction(obj.typeName) && customTypes.has(obj.typeName());\nEJSON._getTypes = function () {\n  let isOriginal = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n  return isOriginal ? customTypes : convertMapToObject(customTypes);\n};\nEJSON._getConverters = () => builtinConverters;\n\n// Either return the JSON-compatible version of the argument, or undefined (if\n// the item isn't itself replaceable, but maybe some fields in it are)\nconst toJSONValueHelper = item => {\n  for (let i = 0; i < builtinConverters.length; i++) {\n    const converter = builtinConverters[i];\n    if (converter.matchObject(item)) {\n      return converter.toJSONValue(item);\n    }\n  }\n  return undefined;\n};\n\n// for both arrays and objects, in-place modification.\nconst adjustTypesToJSONValue = obj => {\n  // Is it an atom that we need to adjust?\n  if (obj === null) {\n    return null;\n  }\n  const maybeChanged = toJSONValueHelper(obj);\n  if (maybeChanged !== undefined) {\n    return maybeChanged;\n  }\n\n  // Other atoms are unchanged.\n  if (!isObject(obj)) {\n    return obj;\n  }\n\n  // Iterate over array or object structure.\n  keysOf(obj).forEach(key => {\n    const value = obj[key];\n    if (!isObject(value) && value !== undefined && !isInfOrNaN(value)) {\n      return; // continue\n    }\n\n    const changed = toJSONValueHelper(value);\n    if (changed) {\n      obj[key] = changed;\n      return; // on to the next key\n    }\n    // if we get here, value is an object but not adjustable\n    // at this level.  recurse.\n    adjustTypesToJSONValue(value);\n  });\n  return obj;\n};\nEJSON._adjustTypesToJSONValue = adjustTypesToJSONValue;\n\n/**\n * @summary Serialize an EJSON-compatible value into its plain JSON\n *          representation.\n * @locus Anywhere\n * @param {EJSON} val A value to serialize to plain JSON.\n */\nEJSON.toJSONValue = item => {\n  const changed = toJSONValueHelper(item);\n  if (changed !== undefined) {\n    return changed;\n  }\n  let newItem = item;\n  if (isObject(item)) {\n    newItem = EJSON.clone(item);\n    adjustTypesToJSONValue(newItem);\n  }\n  return newItem;\n};\n\n// Either return the argument changed to have the non-json\n// rep of itself (the Object version) or the argument itself.\n// DOES NOT RECURSE.  For actually getting the fully-changed value, use\n// EJSON.fromJSONValue\nconst fromJSONValueHelper = value => {\n  if (isObject(value) && value !== null) {\n    const keys = keysOf(value);\n    if (keys.length <= 2 && keys.every(k => typeof k === 'string' && k.substr(0, 1) === '$')) {\n      for (let i = 0; i < builtinConverters.length; i++) {\n        const converter = builtinConverters[i];\n        if (converter.matchJSONValue(value)) {\n          return converter.fromJSONValue(value);\n        }\n      }\n    }\n  }\n  return value;\n};\n\n// for both arrays and objects. Tries its best to just\n// use the object you hand it, but may return something\n// different if the object you hand it itself needs changing.\nconst adjustTypesFromJSONValue = obj => {\n  if (obj === null) {\n    return null;\n  }\n  const maybeChanged = fromJSONValueHelper(obj);\n  if (maybeChanged !== obj) {\n    return maybeChanged;\n  }\n\n  // Other atoms are unchanged.\n  if (!isObject(obj)) {\n    return obj;\n  }\n  keysOf(obj).forEach(key => {\n    const value = obj[key];\n    if (isObject(value)) {\n      const changed = fromJSONValueHelper(value);\n      if (value !== changed) {\n        obj[key] = changed;\n        return;\n      }\n      // if we get here, value is an object but not adjustable\n      // at this level.  recurse.\n      adjustTypesFromJSONValue(value);\n    }\n  });\n  return obj;\n};\nEJSON._adjustTypesFromJSONValue = adjustTypesFromJSONValue;\n\n/**\n * @summary Deserialize an EJSON value from its plain JSON representation.\n * @locus Anywhere\n * @param {JSONCompatible} val A value to deserialize into EJSON.\n */\nEJSON.fromJSONValue = item => {\n  let changed = fromJSONValueHelper(item);\n  if (changed === item && isObject(item)) {\n    changed = EJSON.clone(item);\n    adjustTypesFromJSONValue(changed);\n  }\n  return changed;\n};\n\n/**\n * @summary Serialize a value to a string. For EJSON values, the serialization\n *          fully represents the value. For non-EJSON values, serializes the\n *          same way as `JSON.stringify`.\n * @locus Anywhere\n * @param {EJSON} val A value to stringify.\n * @param {Object} [options]\n * @param {Boolean | Integer | String} options.indent Indents objects and\n * arrays for easy readability.  When `true`, indents by 2 spaces; when an\n * integer, indents by that number of spaces; and when a string, uses the\n * string as the indentation pattern.\n * @param {Boolean} options.canonical When `true`, stringifies keys in an\n *                                    object in sorted order.\n */\nEJSON.stringify = handleError((item, options) => {\n  let serialized;\n  const json = EJSON.toJSONValue(item);\n  if (options && (options.canonical || options.indent)) {\n    let canonicalStringify;\n    module.link(\"./stringify\", {\n      default(v) {\n        canonicalStringify = v;\n      }\n    }, 1);\n    serialized = canonicalStringify(json, options);\n  } else {\n    serialized = JSON.stringify(json);\n  }\n  return serialized;\n});\n\n/**\n * @summary Parse a string into an EJSON value. Throws an error if the string\n *          is not valid EJSON.\n * @locus Anywhere\n * @param {String} str A string to parse into an EJSON value.\n */\nEJSON.parse = item => {\n  if (typeof item !== 'string') {\n    throw new Error('EJSON.parse argument should be a string');\n  }\n  return EJSON.fromJSONValue(JSON.parse(item));\n};\n\n/**\n * @summary Returns true if `x` is a buffer of binary data, as returned from\n *          [`EJSON.newBinary`](#ejson_new_binary).\n * @param {Object} x The variable to check.\n * @locus Anywhere\n */\nEJSON.isBinary = obj => {\n  return !!(typeof Uint8Array !== 'undefined' && obj instanceof Uint8Array || obj && obj.$Uint8ArrayPolyfill);\n};\n\n/**\n * @summary Return true if `a` and `b` are equal to each other.  Return false\n *          otherwise.  Uses the `equals` method on `a` if present, otherwise\n *          performs a deep comparison.\n * @locus Anywhere\n * @param {EJSON} a\n * @param {EJSON} b\n * @param {Object} [options]\n * @param {Boolean} options.keyOrderSensitive Compare in key sensitive order,\n * if supported by the JavaScript implementation.  For example, `{a: 1, b: 2}`\n * is equal to `{b: 2, a: 1}` only when `keyOrderSensitive` is `false`.  The\n * default is `false`.\n */\nEJSON.equals = (a, b, options) => {\n  let i;\n  const keyOrderSensitive = !!(options && options.keyOrderSensitive);\n  if (a === b) {\n    return true;\n  }\n\n  // This differs from the IEEE spec for NaN equality, b/c we don't want\n  // anything ever with a NaN to be poisoned from becoming equal to anything.\n  if (Number.isNaN(a) && Number.isNaN(b)) {\n    return true;\n  }\n\n  // if either one is falsy, they'd have to be === to be equal\n  if (!a || !b) {\n    return false;\n  }\n  if (!(isObject(a) && isObject(b))) {\n    return false;\n  }\n  if (a instanceof Date && b instanceof Date) {\n    return a.valueOf() === b.valueOf();\n  }\n  if (EJSON.isBinary(a) && EJSON.isBinary(b)) {\n    if (a.length !== b.length) {\n      return false;\n    }\n    for (i = 0; i < a.length; i++) {\n      if (a[i] !== b[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n  if (isFunction(a.equals)) {\n    return a.equals(b, options);\n  }\n  if (isFunction(b.equals)) {\n    return b.equals(a, options);\n  }\n\n  // Array.isArray works across iframes while instanceof won't\n  const aIsArray = Array.isArray(a);\n  const bIsArray = Array.isArray(b);\n\n  // if not both or none are array they are not equal\n  if (aIsArray !== bIsArray) {\n    return false;\n  }\n  if (aIsArray && bIsArray) {\n    if (a.length !== b.length) {\n      return false;\n    }\n    for (i = 0; i < a.length; i++) {\n      if (!EJSON.equals(a[i], b[i], options)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  // fallback for custom types that don't implement their own equals\n  switch (EJSON._isCustomType(a) + EJSON._isCustomType(b)) {\n    case 1:\n      return false;\n    case 2:\n      return EJSON.equals(EJSON.toJSONValue(a), EJSON.toJSONValue(b));\n    default: // Do nothing\n  }\n\n  // fall back to structural equality of objects\n  let ret;\n  const aKeys = keysOf(a);\n  const bKeys = keysOf(b);\n  if (keyOrderSensitive) {\n    i = 0;\n    ret = aKeys.every(key => {\n      if (i >= bKeys.length) {\n        return false;\n      }\n      if (key !== bKeys[i]) {\n        return false;\n      }\n      if (!EJSON.equals(a[key], b[bKeys[i]], options)) {\n        return false;\n      }\n      i++;\n      return true;\n    });\n  } else {\n    i = 0;\n    ret = aKeys.every(key => {\n      if (!hasOwn(b, key)) {\n        return false;\n      }\n      if (!EJSON.equals(a[key], b[key], options)) {\n        return false;\n      }\n      i++;\n      return true;\n    });\n  }\n  return ret && i === bKeys.length;\n};\n\n/**\n * @summary Return a deep copy of `val`.\n * @locus Anywhere\n * @param {EJSON} val A value to copy.\n */\nEJSON.clone = v => {\n  let ret;\n  if (!isObject(v)) {\n    return v;\n  }\n  if (v === null) {\n    return null; // null has typeof \"object\"\n  }\n\n  if (v instanceof Date) {\n    return new Date(v.getTime());\n  }\n\n  // RegExps are not really EJSON elements (eg we don't define a serialization\n  // for them), but they're immutable anyway, so we can support them in clone.\n  if (v instanceof RegExp) {\n    return v;\n  }\n  if (EJSON.isBinary(v)) {\n    ret = EJSON.newBinary(v.length);\n    for (let i = 0; i < v.length; i++) {\n      ret[i] = v[i];\n    }\n    return ret;\n  }\n  if (Array.isArray(v)) {\n    return v.map(EJSON.clone);\n  }\n  if (isArguments(v)) {\n    return Array.from(v).map(EJSON.clone);\n  }\n\n  // handle general user-defined typed Objects if they have a clone method\n  if (isFunction(v.clone)) {\n    return v.clone();\n  }\n\n  // handle other custom types\n  if (EJSON._isCustomType(v)) {\n    return EJSON.fromJSONValue(EJSON.clone(EJSON.toJSONValue(v)), true);\n  }\n\n  // handle other objects\n  ret = {};\n  keysOf(v).forEach(key => {\n    ret[key] = EJSON.clone(v[key]);\n  });\n  return ret;\n};\n\n/**\n * @summary Allocate a new buffer of binary data that EJSON can serialize.\n * @locus Anywhere\n * @param {Number} size The number of bytes of binary data to allocate.\n */\n// EJSON.newBinary is the public documented API for this functionality,\n// but the implementation is in the 'base64' package to avoid\n// introducing a circular dependency. (If the implementation were here,\n// then 'base64' would have to use EJSON.newBinary, and 'ejson' would\n// also have to use 'base64'.)\nEJSON.newBinary = Base64.newBinary;","map":{"version":3,"names":["module","export","EJSON","isFunction","isObject","keysOf","lengthOf","hasOwn","convertMapToObject","isArguments","isInfOrNaN","handleError","link","v","customTypes","Map","addType","name","factory","has","Error","set","builtinConverters","matchJSONValue","obj","matchObject","Date","toJSONValue","$date","getTime","fromJSONValue","RegExp","regexp","$regexp","source","$flags","flags","slice","replace","sign","Number","isNaN","Infinity","$InfNaN","Uint8Array","$binary","Base64","encode","decode","match","keyCount","some","converter","newObj","forEach","key","$escape","_isCustomType","jsonValue","Meteor","_noYieldsAllowed","$type","typeName","$value","get","_getTypes","isOriginal","_getConverters","toJSONValueHelper","item","i","length","undefined","adjustTypesToJSONValue","maybeChanged","value","changed","_adjustTypesToJSONValue","newItem","clone","fromJSONValueHelper","keys","every","k","substr","adjustTypesFromJSONValue","_adjustTypesFromJSONValue","stringify","options","serialized","json","canonical","indent","canonicalStringify","default","JSON","parse","isBinary","$Uint8ArrayPolyfill","equals","a","b","keyOrderSensitive","valueOf","aIsArray","Array","isArray","bIsArray","ret","aKeys","bKeys","newBinary","map","from"],"sources":["packages/ejson/ejson.js"],"sourcesContent":["import {\n  isFunction,\n  isObject,\n  keysOf,\n  lengthOf,\n  hasOwn,\n  convertMapToObject,\n  isArguments,\n  isInfOrNaN,\n  handleError,\n} from './utils';\n\n/**\n * @namespace\n * @summary Namespace for EJSON functions\n */\nconst EJSON = {};\n\n// Custom type interface definition\n/**\n * @class CustomType\n * @instanceName customType\n * @memberOf EJSON\n * @summary The interface that a class must satisfy to be able to become an\n * EJSON custom type via EJSON.addType.\n */\n\n/**\n * @function typeName\n * @memberOf EJSON.CustomType\n * @summary Return the tag used to identify this type.  This must match the\n *          tag used to register this type with\n *          [`EJSON.addType`](#ejson_add_type).\n * @locus Anywhere\n * @instance\n */\n\n/**\n * @function toJSONValue\n * @memberOf EJSON.CustomType\n * @summary Serialize this instance into a JSON-compatible value.\n * @locus Anywhere\n * @instance\n */\n\n/**\n * @function clone\n * @memberOf EJSON.CustomType\n * @summary Return a value `r` such that `this.equals(r)` is true, and\n *          modifications to `r` do not affect `this` and vice versa.\n * @locus Anywhere\n * @instance\n */\n\n/**\n * @function equals\n * @memberOf EJSON.CustomType\n * @summary Return `true` if `other` has a value equal to `this`; `false`\n *          otherwise.\n * @locus Anywhere\n * @param {Object} other Another object to compare this to.\n * @instance\n */\n\nconst customTypes = new Map();\n\n// Add a custom type, using a method of your choice to get to and\n// from a basic JSON-able representation.  The factory argument\n// is a function of JSON-able --> your object\n// The type you add must have:\n// - A toJSONValue() method, so that Meteor can serialize it\n// - a typeName() method, to show how to look it up in our type table.\n// It is okay if these methods are monkey-patched on.\n// EJSON.clone will use toJSONValue and the given factory to produce\n// a clone, but you may specify a method clone() that will be\n// used instead.\n// Similarly, EJSON.equals will use toJSONValue to make comparisons,\n// but you may provide a method equals() instead.\n/**\n * @summary Add a custom datatype to EJSON.\n * @locus Anywhere\n * @param {String} name A tag for your custom type; must be unique among\n *                      custom data types defined in your project, and must\n *                      match the result of your type's `typeName` method.\n * @param {Function} factory A function that deserializes a JSON-compatible\n *                           value into an instance of your type.  This should\n *                           match the serialization performed by your\n *                           type's `toJSONValue` method.\n */\nEJSON.addType = (name, factory) => {\n  if (customTypes.has(name)) {\n    throw new Error(`Type ${name} already present`);\n  }\n  customTypes.set(name, factory);\n};\n\nconst builtinConverters = [\n  { // Date\n    matchJSONValue(obj) {\n      return hasOwn(obj, '$date') && lengthOf(obj) === 1;\n    },\n    matchObject(obj) {\n      return obj instanceof Date;\n    },\n    toJSONValue(obj) {\n      return {$date: obj.getTime()};\n    },\n    fromJSONValue(obj) {\n      return new Date(obj.$date);\n    },\n  },\n  { // RegExp\n    matchJSONValue(obj) {\n      return hasOwn(obj, '$regexp')\n        && hasOwn(obj, '$flags')\n        && lengthOf(obj) === 2;\n    },\n    matchObject(obj) {\n      return obj instanceof RegExp;\n    },\n    toJSONValue(regexp) {\n      return {\n        $regexp: regexp.source,\n        $flags: regexp.flags\n      };\n    },\n    fromJSONValue(obj) {\n      // Replaces duplicate / invalid flags.\n      return new RegExp(\n        obj.$regexp,\n        obj.$flags\n          // Cut off flags at 50 chars to avoid abusing RegExp for DOS.\n          .slice(0, 50)\n          .replace(/[^gimuy]/g,'')\n          .replace(/(.)(?=.*\\1)/g, '')\n      );\n    },\n  },\n  { // NaN, Inf, -Inf. (These are the only objects with typeof !== 'object'\n    // which we match.)\n    matchJSONValue(obj) {\n      return hasOwn(obj, '$InfNaN') && lengthOf(obj) === 1;\n    },\n    matchObject: isInfOrNaN,\n    toJSONValue(obj) {\n      let sign;\n      if (Number.isNaN(obj)) {\n        sign = 0;\n      } else if (obj === Infinity) {\n        sign = 1;\n      } else {\n        sign = -1;\n      }\n      return {$InfNaN: sign};\n    },\n    fromJSONValue(obj) {\n      return obj.$InfNaN / 0;\n    },\n  },\n  { // Binary\n    matchJSONValue(obj) {\n      return hasOwn(obj, '$binary') && lengthOf(obj) === 1;\n    },\n    matchObject(obj) {\n      return typeof Uint8Array !== 'undefined' && obj instanceof Uint8Array\n        || (obj && hasOwn(obj, '$Uint8ArrayPolyfill'));\n    },\n    toJSONValue(obj) {\n      return {$binary: Base64.encode(obj)};\n    },\n    fromJSONValue(obj) {\n      return Base64.decode(obj.$binary);\n    },\n  },\n  { // Escaping one level\n    matchJSONValue(obj) {\n      return hasOwn(obj, '$escape') && lengthOf(obj) === 1;\n    },\n    matchObject(obj) {\n      let match = false;\n      if (obj) {\n        const keyCount = lengthOf(obj);\n        if (keyCount === 1 || keyCount === 2) {\n          match =\n            builtinConverters.some(converter => converter.matchJSONValue(obj));\n        }\n      }\n      return match;\n    },\n    toJSONValue(obj) {\n      const newObj = {};\n      keysOf(obj).forEach(key => {\n        newObj[key] = EJSON.toJSONValue(obj[key]);\n      });\n      return {$escape: newObj};\n    },\n    fromJSONValue(obj) {\n      const newObj = {};\n      keysOf(obj.$escape).forEach(key => {\n        newObj[key] = EJSON.fromJSONValue(obj.$escape[key]);\n      });\n      return newObj;\n    },\n  },\n  { // Custom\n    matchJSONValue(obj) {\n      return hasOwn(obj, '$type')\n        && hasOwn(obj, '$value') && lengthOf(obj) === 2;\n    },\n    matchObject(obj) {\n      return EJSON._isCustomType(obj);\n    },\n    toJSONValue(obj) {\n      const jsonValue = Meteor._noYieldsAllowed(() => obj.toJSONValue());\n      return {$type: obj.typeName(), $value: jsonValue};\n    },\n    fromJSONValue(obj) {\n      const typeName = obj.$type;\n      if (!customTypes.has(typeName)) {\n        throw new Error(`Custom EJSON type ${typeName} is not defined`);\n      }\n      const converter = customTypes.get(typeName);\n      return Meteor._noYieldsAllowed(() => converter(obj.$value));\n    },\n  },\n];\n\nEJSON._isCustomType = (obj) => (\n  obj &&\n  isFunction(obj.toJSONValue) &&\n  isFunction(obj.typeName) &&\n  customTypes.has(obj.typeName())\n);\n\nEJSON._getTypes = (isOriginal = false) => (isOriginal ? customTypes : convertMapToObject(customTypes));\n\nEJSON._getConverters = () => builtinConverters;\n\n// Either return the JSON-compatible version of the argument, or undefined (if\n// the item isn't itself replaceable, but maybe some fields in it are)\nconst toJSONValueHelper = item => {\n  for (let i = 0; i < builtinConverters.length; i++) {\n    const converter = builtinConverters[i];\n    if (converter.matchObject(item)) {\n      return converter.toJSONValue(item);\n    }\n  }\n  return undefined;\n};\n\n// for both arrays and objects, in-place modification.\nconst adjustTypesToJSONValue = obj => {\n  // Is it an atom that we need to adjust?\n  if (obj === null) {\n    return null;\n  }\n\n  const maybeChanged = toJSONValueHelper(obj);\n  if (maybeChanged !== undefined) {\n    return maybeChanged;\n  }\n\n  // Other atoms are unchanged.\n  if (!isObject(obj)) {\n    return obj;\n  }\n\n  // Iterate over array or object structure.\n  keysOf(obj).forEach(key => {\n    const value = obj[key];\n    if (!isObject(value) && value !== undefined &&\n        !isInfOrNaN(value)) {\n      return; // continue\n    }\n\n    const changed = toJSONValueHelper(value);\n    if (changed) {\n      obj[key] = changed;\n      return; // on to the next key\n    }\n    // if we get here, value is an object but not adjustable\n    // at this level.  recurse.\n    adjustTypesToJSONValue(value);\n  });\n  return obj;\n};\n\nEJSON._adjustTypesToJSONValue = adjustTypesToJSONValue;\n\n/**\n * @summary Serialize an EJSON-compatible value into its plain JSON\n *          representation.\n * @locus Anywhere\n * @param {EJSON} val A value to serialize to plain JSON.\n */\nEJSON.toJSONValue = item => {\n  const changed = toJSONValueHelper(item);\n  if (changed !== undefined) {\n    return changed;\n  }\n\n  let newItem = item;\n  if (isObject(item)) {\n    newItem = EJSON.clone(item);\n    adjustTypesToJSONValue(newItem);\n  }\n  return newItem;\n};\n\n// Either return the argument changed to have the non-json\n// rep of itself (the Object version) or the argument itself.\n// DOES NOT RECURSE.  For actually getting the fully-changed value, use\n// EJSON.fromJSONValue\nconst fromJSONValueHelper = value => {\n  if (isObject(value) && value !== null) {\n    const keys = keysOf(value);\n    if (keys.length <= 2\n        && keys.every(k => typeof k === 'string' && k.substr(0, 1) === '$')) {\n      for (let i = 0; i < builtinConverters.length; i++) {\n        const converter = builtinConverters[i];\n        if (converter.matchJSONValue(value)) {\n          return converter.fromJSONValue(value);\n        }\n      }\n    }\n  }\n  return value;\n};\n\n// for both arrays and objects. Tries its best to just\n// use the object you hand it, but may return something\n// different if the object you hand it itself needs changing.\nconst adjustTypesFromJSONValue = obj => {\n  if (obj === null) {\n    return null;\n  }\n\n  const maybeChanged = fromJSONValueHelper(obj);\n  if (maybeChanged !== obj) {\n    return maybeChanged;\n  }\n\n  // Other atoms are unchanged.\n  if (!isObject(obj)) {\n    return obj;\n  }\n\n  keysOf(obj).forEach(key => {\n    const value = obj[key];\n    if (isObject(value)) {\n      const changed = fromJSONValueHelper(value);\n      if (value !== changed) {\n        obj[key] = changed;\n        return;\n      }\n      // if we get here, value is an object but not adjustable\n      // at this level.  recurse.\n      adjustTypesFromJSONValue(value);\n    }\n  });\n  return obj;\n};\n\nEJSON._adjustTypesFromJSONValue = adjustTypesFromJSONValue;\n\n/**\n * @summary Deserialize an EJSON value from its plain JSON representation.\n * @locus Anywhere\n * @param {JSONCompatible} val A value to deserialize into EJSON.\n */\nEJSON.fromJSONValue = item => {\n  let changed = fromJSONValueHelper(item);\n  if (changed === item && isObject(item)) {\n    changed = EJSON.clone(item);\n    adjustTypesFromJSONValue(changed);\n  }\n  return changed;\n};\n\n/**\n * @summary Serialize a value to a string. For EJSON values, the serialization\n *          fully represents the value. For non-EJSON values, serializes the\n *          same way as `JSON.stringify`.\n * @locus Anywhere\n * @param {EJSON} val A value to stringify.\n * @param {Object} [options]\n * @param {Boolean | Integer | String} options.indent Indents objects and\n * arrays for easy readability.  When `true`, indents by 2 spaces; when an\n * integer, indents by that number of spaces; and when a string, uses the\n * string as the indentation pattern.\n * @param {Boolean} options.canonical When `true`, stringifies keys in an\n *                                    object in sorted order.\n */\nEJSON.stringify = handleError((item, options) => {\n  let serialized;\n  const json = EJSON.toJSONValue(item);\n  if (options && (options.canonical || options.indent)) {\n    import canonicalStringify from './stringify';\n    serialized = canonicalStringify(json, options);\n  } else {\n    serialized = JSON.stringify(json);\n  }\n  return serialized;\n});\n\n/**\n * @summary Parse a string into an EJSON value. Throws an error if the string\n *          is not valid EJSON.\n * @locus Anywhere\n * @param {String} str A string to parse into an EJSON value.\n */\nEJSON.parse = item => {\n  if (typeof item !== 'string') {\n    throw new Error('EJSON.parse argument should be a string');\n  }\n  return EJSON.fromJSONValue(JSON.parse(item));\n};\n\n/**\n * @summary Returns true if `x` is a buffer of binary data, as returned from\n *          [`EJSON.newBinary`](#ejson_new_binary).\n * @param {Object} x The variable to check.\n * @locus Anywhere\n */\nEJSON.isBinary = obj => {\n  return !!((typeof Uint8Array !== 'undefined' && obj instanceof Uint8Array) ||\n    (obj && obj.$Uint8ArrayPolyfill));\n};\n\n/**\n * @summary Return true if `a` and `b` are equal to each other.  Return false\n *          otherwise.  Uses the `equals` method on `a` if present, otherwise\n *          performs a deep comparison.\n * @locus Anywhere\n * @param {EJSON} a\n * @param {EJSON} b\n * @param {Object} [options]\n * @param {Boolean} options.keyOrderSensitive Compare in key sensitive order,\n * if supported by the JavaScript implementation.  For example, `{a: 1, b: 2}`\n * is equal to `{b: 2, a: 1}` only when `keyOrderSensitive` is `false`.  The\n * default is `false`.\n */\nEJSON.equals = (a, b, options) => {\n  let i;\n  const keyOrderSensitive = !!(options && options.keyOrderSensitive);\n  if (a === b) {\n    return true;\n  }\n\n  // This differs from the IEEE spec for NaN equality, b/c we don't want\n  // anything ever with a NaN to be poisoned from becoming equal to anything.\n  if (Number.isNaN(a) && Number.isNaN(b)) {\n    return true;\n  }\n\n  // if either one is falsy, they'd have to be === to be equal\n  if (!a || !b) {\n    return false;\n  }\n\n  if (!(isObject(a) && isObject(b))) {\n    return false;\n  }\n\n  if (a instanceof Date && b instanceof Date) {\n    return a.valueOf() === b.valueOf();\n  }\n\n  if (EJSON.isBinary(a) && EJSON.isBinary(b)) {\n    if (a.length !== b.length) {\n      return false;\n    }\n    for (i = 0; i < a.length; i++) {\n      if (a[i] !== b[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  if (isFunction(a.equals)) {\n    return a.equals(b, options);\n  }\n\n  if (isFunction(b.equals)) {\n    return b.equals(a, options);\n  }\n\n  // Array.isArray works across iframes while instanceof won't\n  const aIsArray = Array.isArray(a);\n  const bIsArray = Array.isArray(b);\n\n  // if not both or none are array they are not equal\n  if (aIsArray !== bIsArray) {\n    return false;\n  }\n\n  if (aIsArray && bIsArray) {\n    if (a.length !== b.length) {\n      return false;\n    }\n    for (i = 0; i < a.length; i++) {\n      if (!EJSON.equals(a[i], b[i], options)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  // fallback for custom types that don't implement their own equals\n  switch (EJSON._isCustomType(a) + EJSON._isCustomType(b)) {\n    case 1: return false;\n    case 2: return EJSON.equals(EJSON.toJSONValue(a), EJSON.toJSONValue(b));\n    default: // Do nothing\n  }\n\n  // fall back to structural equality of objects\n  let ret;\n  const aKeys = keysOf(a);\n  const bKeys = keysOf(b);\n  if (keyOrderSensitive) {\n    i = 0;\n    ret = aKeys.every(key => {\n      if (i >= bKeys.length) {\n        return false;\n      }\n      if (key !== bKeys[i]) {\n        return false;\n      }\n      if (!EJSON.equals(a[key], b[bKeys[i]], options)) {\n        return false;\n      }\n      i++;\n      return true;\n    });\n  } else {\n    i = 0;\n    ret = aKeys.every(key => {\n      if (!hasOwn(b, key)) {\n        return false;\n      }\n      if (!EJSON.equals(a[key], b[key], options)) {\n        return false;\n      }\n      i++;\n      return true;\n    });\n  }\n  return ret && i === bKeys.length;\n};\n\n/**\n * @summary Return a deep copy of `val`.\n * @locus Anywhere\n * @param {EJSON} val A value to copy.\n */\nEJSON.clone = v => {\n  let ret;\n  if (!isObject(v)) {\n    return v;\n  }\n\n  if (v === null) {\n    return null; // null has typeof \"object\"\n  }\n\n  if (v instanceof Date) {\n    return new Date(v.getTime());\n  }\n\n  // RegExps are not really EJSON elements (eg we don't define a serialization\n  // for them), but they're immutable anyway, so we can support them in clone.\n  if (v instanceof RegExp) {\n    return v;\n  }\n\n  if (EJSON.isBinary(v)) {\n    ret = EJSON.newBinary(v.length);\n    for (let i = 0; i < v.length; i++) {\n      ret[i] = v[i];\n    }\n    return ret;\n  }\n\n  if (Array.isArray(v)) {\n    return v.map(EJSON.clone);\n  }\n\n  if (isArguments(v)) {\n    return Array.from(v).map(EJSON.clone);\n  }\n\n  // handle general user-defined typed Objects if they have a clone method\n  if (isFunction(v.clone)) {\n    return v.clone();\n  }\n\n  // handle other custom types\n  if (EJSON._isCustomType(v)) {\n    return EJSON.fromJSONValue(EJSON.clone(EJSON.toJSONValue(v)), true);\n  }\n\n  // handle other objects\n  ret = {};\n  keysOf(v).forEach((key) => {\n    ret[key] = EJSON.clone(v[key]);\n  });\n  return ret;\n};\n\n/**\n * @summary Allocate a new buffer of binary data that EJSON can serialize.\n * @locus Anywhere\n * @param {Number} size The number of bytes of binary data to allocate.\n */\n// EJSON.newBinary is the public documented API for this functionality,\n// but the implementation is in the 'base64' package to avoid\n// introducing a circular dependency. (If the implementation were here,\n// then 'base64' would have to use EJSON.newBinary, and 'ejson' would\n// also have to use 'base64'.)\nEJSON.newBinary = Base64.newBinary;\n\nexport { EJSON };\n"],"mappings":"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"},"sourceType":"module","externalDependencies":{},"hash":"47eaa71d89e62b0fcc7bf250440d0d7cd66a7c95"}
