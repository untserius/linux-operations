{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/home/serius/Desktop/Practicals/Projects/todo/packages/minimongo/sorter.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser.legacy"},"sourceFileName":"packages/minimongo/sorter.js","filename":"/home/serius/Desktop/Practicals/Projects/todo/packages/minimongo/sorter.js","targets":{},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/home/serius/Desktop/Practicals/Projects/todo","root":"/home/serius/Desktop/Practicals/Projects/todo","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":true,"enforceStrictMode":false,"dynamicImport":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"base$0$3","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$4","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"_exploded":{},"_verified":{},"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-arrow-functions","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-block-scoped-functions","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-block-scoping","visitor":{"VariableDeclaration":{"enter":[null,null]},"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":{},"_verified":{},"ClassDeclaration":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-classes","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-computed-properties","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-destructuring","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-object-super","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-shorthand-properties","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-spread","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-sticky-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-typeof-symbol","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"StaticBlock":{"enter":[null]},"TSModuleBlock":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectPattern":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-unicode-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-property-literals","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-regenerator","visitor":{"_exploded":{},"_verified":{},"ObjectMethod":{"enter":[null],"exit":[null]},"ClassMethod":{"enter":[null],"exit":[null]},"ClassPrivateMethod":{"enter":[null],"exit":[null]},"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"MemberExpression":{"enter":[null]}},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/home/serius/Desktop/Practicals/Projects/todo/packages/minimongo/sorter.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/minimongo/sorter.js"}},"code":"var _typeof;\nmodule.link(\"@babel/runtime/helpers/typeof\", {\n  default: function (v) {\n    _typeof = v;\n  }\n}, 0);\nmodule.export({\n  \"default\": function () {\n    return Sorter;\n  }\n});\nvar ELEMENT_OPERATORS, equalityElementMatcher, expandArraysInBranches, hasOwn, isOperatorObject, makeLookupFunction, regexpElementMatcher;\nmodule.link(\"./common.js\", {\n  ELEMENT_OPERATORS: function (v) {\n    ELEMENT_OPERATORS = v;\n  },\n  equalityElementMatcher: function (v) {\n    equalityElementMatcher = v;\n  },\n  expandArraysInBranches: function (v) {\n    expandArraysInBranches = v;\n  },\n  hasOwn: function (v) {\n    hasOwn = v;\n  },\n  isOperatorObject: function (v) {\n    isOperatorObject = v;\n  },\n  makeLookupFunction: function (v) {\n    makeLookupFunction = v;\n  },\n  regexpElementMatcher: function (v) {\n    regexpElementMatcher = v;\n  }\n}, 0);\nvar Sorter = /*#__PURE__*/function () {\n  function Sorter(spec) {\n    var _this = this;\n    this._sortSpecParts = [];\n    this._sortFunction = null;\n    var addSpecPart = function (path, ascending) {\n      if (!path) {\n        throw Error('sort keys must be non-empty');\n      }\n      if (path.charAt(0) === '$') {\n        throw Error(\"unsupported sort key: \" + path);\n      }\n      _this._sortSpecParts.push({\n        ascending: ascending,\n        lookup: makeLookupFunction(path, {\n          forSort: true\n        }),\n        path: path\n      });\n    };\n    if (spec instanceof Array) {\n      spec.forEach(function (element) {\n        if (typeof element === 'string') {\n          addSpecPart(element, true);\n        } else {\n          addSpecPart(element[0], element[1] !== 'desc');\n        }\n      });\n    } else if (_typeof(spec) === 'object') {\n      Object.keys(spec).forEach(function (key) {\n        addSpecPart(key, spec[key] >= 0);\n      });\n    } else if (typeof spec === 'function') {\n      this._sortFunction = spec;\n    } else {\n      throw Error(\"Bad sort specification: \" + JSON.stringify(spec));\n    }\n\n    // If a function is specified for sorting, we skip the rest.\n    if (this._sortFunction) {\n      return;\n    }\n\n    // To implement affectedByModifier, we piggy-back on top of Matcher's\n    // affectedByModifier code; we create a selector that is affected by the\n    // same modifiers as this sort order. This is only implemented on the\n    // server.\n    if (this.affectedByModifier) {\n      var selector = {};\n      this._sortSpecParts.forEach(function (spec) {\n        selector[spec.path] = 1;\n      });\n      this._selectorForAffectedByModifier = new Minimongo.Matcher(selector);\n    }\n    this._keyComparator = composeComparators(this._sortSpecParts.map(function (spec, i) {\n      return _this._keyFieldComparator(i);\n    }));\n  }\n  var _proto = Sorter.prototype;\n  _proto.getComparator = function () {\n    function getComparator(options) {\n      // If sort is specified or have no distances, just use the comparator from\n      // the source specification (which defaults to \"everything is equal\".\n      // issue #3599\n      // https://docs.mongodb.com/manual/reference/operator/query/near/#sort-operation\n      // sort effectively overrides $near\n      if (this._sortSpecParts.length || !options || !options.distances) {\n        return this._getBaseComparator();\n      }\n      var distances = options.distances;\n\n      // Return a comparator which compares using $near distances.\n      return function (a, b) {\n        if (!distances.has(a._id)) {\n          throw Error(\"Missing distance for \" + a._id);\n        }\n        if (!distances.has(b._id)) {\n          throw Error(\"Missing distance for \" + b._id);\n        }\n        return distances.get(a._id) - distances.get(b._id);\n      };\n    }\n    return getComparator;\n  }() // Takes in two keys: arrays whose lengths match the number of spec\n  // parts. Returns negative, 0, or positive based on using the sort spec to\n  // compare fields.\n  ;\n  _proto._compareKeys = function () {\n    function _compareKeys(key1, key2) {\n      if (key1.length !== this._sortSpecParts.length || key2.length !== this._sortSpecParts.length) {\n        throw Error('Key has wrong length');\n      }\n      return this._keyComparator(key1, key2);\n    }\n    return _compareKeys;\n  }() // Iterates over each possible \"key\" from doc (ie, over each branch), calling\n  // 'cb' with the key.\n  ;\n  _proto._generateKeysFromDoc = function () {\n    function _generateKeysFromDoc(doc, cb) {\n      if (this._sortSpecParts.length === 0) {\n        throw new Error('can\\'t generate keys without a spec');\n      }\n      var pathFromIndices = function (indices) {\n        return indices.join(',') + \",\";\n      };\n      var knownPaths = null;\n\n      // maps index -> ({'' -> value} or {path -> value})\n      var valuesByIndexAndPath = this._sortSpecParts.map(function (spec) {\n        // Expand any leaf arrays that we find, and ignore those arrays\n        // themselves.  (We never sort based on an array itself.)\n        var branches = expandArraysInBranches(spec.lookup(doc), true);\n\n        // If there are no values for a key (eg, key goes to an empty array),\n        // pretend we found one undefined value.\n        if (!branches.length) {\n          branches = [{\n            value: void 0\n          }];\n        }\n        var element = Object.create(null);\n        var usedPaths = false;\n        branches.forEach(function (branch) {\n          if (!branch.arrayIndices) {\n            // If there are no array indices for a branch, then it must be the\n            // only branch, because the only thing that produces multiple branches\n            // is the use of arrays.\n            if (branches.length > 1) {\n              throw Error('multiple branches but no array used?');\n            }\n            element[''] = branch.value;\n            return;\n          }\n          usedPaths = true;\n          var path = pathFromIndices(branch.arrayIndices);\n          if (hasOwn.call(element, path)) {\n            throw Error(\"duplicate path: \" + path);\n          }\n          element[path] = branch.value;\n\n          // If two sort fields both go into arrays, they have to go into the\n          // exact same arrays and we have to find the same paths.  This is\n          // roughly the same condition that makes MongoDB throw this strange\n          // error message.  eg, the main thing is that if sort spec is {a: 1,\n          // b:1} then a and b cannot both be arrays.\n          //\n          // (In MongoDB it seems to be OK to have {a: 1, 'a.x.y': 1} where 'a'\n          // and 'a.x.y' are both arrays, but we don't allow this for now.\n          // #NestedArraySort\n          // XXX achieve full compatibility here\n          if (knownPaths && !hasOwn.call(knownPaths, path)) {\n            throw Error('cannot index parallel arrays');\n          }\n        });\n        if (knownPaths) {\n          // Similarly to above, paths must match everywhere, unless this is a\n          // non-array field.\n          if (!hasOwn.call(element, '') && Object.keys(knownPaths).length !== Object.keys(element).length) {\n            throw Error('cannot index parallel arrays!');\n          }\n        } else if (usedPaths) {\n          knownPaths = {};\n          Object.keys(element).forEach(function (path) {\n            knownPaths[path] = true;\n          });\n        }\n        return element;\n      });\n      if (!knownPaths) {\n        // Easy case: no use of arrays.\n        var soleKey = valuesByIndexAndPath.map(function (values) {\n          if (!hasOwn.call(values, '')) {\n            throw Error('no value in sole key case?');\n          }\n          return values[''];\n        });\n        cb(soleKey);\n        return;\n      }\n      Object.keys(knownPaths).forEach(function (path) {\n        var key = valuesByIndexAndPath.map(function (values) {\n          if (hasOwn.call(values, '')) {\n            return values[''];\n          }\n          if (!hasOwn.call(values, path)) {\n            throw Error('missing path?');\n          }\n          return values[path];\n        });\n        cb(key);\n      });\n    }\n    return _generateKeysFromDoc;\n  }() // Returns a comparator that represents the sort specification (but not\n  // including a possible geoquery distance tie-breaker).\n  ;\n  _proto._getBaseComparator = function () {\n    function _getBaseComparator() {\n      var _this2 = this;\n      if (this._sortFunction) {\n        return this._sortFunction;\n      }\n\n      // If we're only sorting on geoquery distance and no specs, just say\n      // everything is equal.\n      if (!this._sortSpecParts.length) {\n        return function (doc1, doc2) {\n          return 0;\n        };\n      }\n      return function (doc1, doc2) {\n        var key1 = _this2._getMinKeyFromDoc(doc1);\n        var key2 = _this2._getMinKeyFromDoc(doc2);\n        return _this2._compareKeys(key1, key2);\n      };\n    }\n    return _getBaseComparator;\n  }() // Finds the minimum key from the doc, according to the sort specs.  (We say\n  // \"minimum\" here but this is with respect to the sort spec, so \"descending\"\n  // sort fields mean we're finding the max for that field.)\n  //\n  // Note that this is NOT \"find the minimum value of the first field, the\n  // minimum value of the second field, etc\"... it's \"choose the\n  // lexicographically minimum value of the key vector, allowing only keys which\n  // you can find along the same paths\".  ie, for a doc {a: [{x: 0, y: 5}, {x:\n  // 1, y: 3}]} with sort spec {'a.x': 1, 'a.y': 1}, the only keys are [0,5] and\n  // [1,3], and the minimum key is [0,5]; notably, [0,3] is NOT a key.\n  ;\n  _proto._getMinKeyFromDoc = function () {\n    function _getMinKeyFromDoc(doc) {\n      var _this3 = this;\n      var minKey = null;\n      this._generateKeysFromDoc(doc, function (key) {\n        if (minKey === null) {\n          minKey = key;\n          return;\n        }\n        if (_this3._compareKeys(key, minKey) < 0) {\n          minKey = key;\n        }\n      });\n      return minKey;\n    }\n    return _getMinKeyFromDoc;\n  }();\n  _proto._getPaths = function () {\n    function _getPaths() {\n      return this._sortSpecParts.map(function (part) {\n        return part.path;\n      });\n    }\n    return _getPaths;\n  }() // Given an index 'i', returns a comparator that compares two key arrays based\n  // on field 'i'.\n  ;\n  _proto._keyFieldComparator = function () {\n    function _keyFieldComparator(i) {\n      var invert = !this._sortSpecParts[i].ascending;\n      return function (key1, key2) {\n        var compare = LocalCollection._f._cmp(key1[i], key2[i]);\n        return invert ? -compare : compare;\n      };\n    }\n    return _keyFieldComparator;\n  }();\n  return Sorter;\n}();\n// Given an array of comparators\n// (functions (a,b)->(negative or positive or zero)), returns a single\n// comparator which uses each comparator in order and returns the first\n// non-zero value.\nfunction composeComparators(comparatorArray) {\n  return function (a, b) {\n    for (var i = 0; i < comparatorArray.length; ++i) {\n      var compare = comparatorArray[i](a, b);\n      if (compare !== 0) {\n        return compare;\n      }\n    }\n    return 0;\n  };\n}","map":{"version":3,"names":["_typeof","module","link","default","v","export","Sorter","ELEMENT_OPERATORS","equalityElementMatcher","expandArraysInBranches","hasOwn","isOperatorObject","makeLookupFunction","regexpElementMatcher","spec","_sortSpecParts","_sortFunction","addSpecPart","path","ascending","Error","charAt","push","lookup","forSort","Array","forEach","element","Object","keys","key","JSON","stringify","affectedByModifier","selector","_selectorForAffectedByModifier","Minimongo","Matcher","_keyComparator","composeComparators","map","i","_keyFieldComparator","getComparator","options","length","distances","_getBaseComparator","a","b","has","_id","get","_compareKeys","key1","key2","_generateKeysFromDoc","doc","cb","pathFromIndices","indices","join","knownPaths","valuesByIndexAndPath","branches","value","create","usedPaths","branch","arrayIndices","call","soleKey","values","doc1","doc2","_getMinKeyFromDoc","minKey","_getPaths","part","invert","compare","LocalCollection","_f","_cmp","comparatorArray"],"sources":["packages/minimongo/sorter.js"],"sourcesContent":["import {\n  ELEMENT_OPERATORS,\n  equalityElementMatcher,\n  expandArraysInBranches,\n  hasOwn,\n  isOperatorObject,\n  makeLookupFunction,\n  regexpElementMatcher,\n} from './common.js';\n\n// Give a sort spec, which can be in any of these forms:\n//   {\"key1\": 1, \"key2\": -1}\n//   [[\"key1\", \"asc\"], [\"key2\", \"desc\"]]\n//   [\"key1\", [\"key2\", \"desc\"]]\n//\n// (.. with the first form being dependent on the key enumeration\n// behavior of your javascript VM, which usually does what you mean in\n// this case if the key names don't look like integers ..)\n//\n// return a function that takes two objects, and returns -1 if the\n// first object comes first in order, 1 if the second object comes\n// first, or 0 if neither object comes before the other.\n\nexport default class Sorter {\n  constructor(spec) {\n    this._sortSpecParts = [];\n    this._sortFunction = null;\n\n    const addSpecPart = (path, ascending) => {\n      if (!path) {\n        throw Error('sort keys must be non-empty');\n      }\n\n      if (path.charAt(0) === '$') {\n        throw Error(`unsupported sort key: ${path}`);\n      }\n\n      this._sortSpecParts.push({\n        ascending,\n        lookup: makeLookupFunction(path, {forSort: true}),\n        path\n      });\n    };\n\n    if (spec instanceof Array) {\n      spec.forEach(element => {\n        if (typeof element === 'string') {\n          addSpecPart(element, true);\n        } else {\n          addSpecPart(element[0], element[1] !== 'desc');\n        }\n      });\n    } else if (typeof spec === 'object') {\n      Object.keys(spec).forEach(key => {\n        addSpecPart(key, spec[key] >= 0);\n      });\n    } else if (typeof spec === 'function') {\n      this._sortFunction = spec;\n    } else {\n      throw Error(`Bad sort specification: ${JSON.stringify(spec)}`);\n    }\n\n    // If a function is specified for sorting, we skip the rest.\n    if (this._sortFunction) {\n      return;\n    }\n\n    // To implement affectedByModifier, we piggy-back on top of Matcher's\n    // affectedByModifier code; we create a selector that is affected by the\n    // same modifiers as this sort order. This is only implemented on the\n    // server.\n    if (this.affectedByModifier) {\n      const selector = {};\n\n      this._sortSpecParts.forEach(spec => {\n        selector[spec.path] = 1;\n      });\n\n      this._selectorForAffectedByModifier = new Minimongo.Matcher(selector);\n    }\n\n    this._keyComparator = composeComparators(\n      this._sortSpecParts.map((spec, i) => this._keyFieldComparator(i))\n    );\n  }\n\n  getComparator(options) {\n    // If sort is specified or have no distances, just use the comparator from\n    // the source specification (which defaults to \"everything is equal\".\n    // issue #3599\n    // https://docs.mongodb.com/manual/reference/operator/query/near/#sort-operation\n    // sort effectively overrides $near\n    if (this._sortSpecParts.length || !options || !options.distances) {\n      return this._getBaseComparator();\n    }\n\n    const distances = options.distances;\n\n    // Return a comparator which compares using $near distances.\n    return (a, b) => {\n      if (!distances.has(a._id)) {\n        throw Error(`Missing distance for ${a._id}`);\n      }\n\n      if (!distances.has(b._id)) {\n        throw Error(`Missing distance for ${b._id}`);\n      }\n\n      return distances.get(a._id) - distances.get(b._id);\n    };\n  }\n\n  // Takes in two keys: arrays whose lengths match the number of spec\n  // parts. Returns negative, 0, or positive based on using the sort spec to\n  // compare fields.\n  _compareKeys(key1, key2) {\n    if (key1.length !== this._sortSpecParts.length ||\n        key2.length !== this._sortSpecParts.length) {\n      throw Error('Key has wrong length');\n    }\n\n    return this._keyComparator(key1, key2);\n  }\n\n  // Iterates over each possible \"key\" from doc (ie, over each branch), calling\n  // 'cb' with the key.\n  _generateKeysFromDoc(doc, cb) {\n    if (this._sortSpecParts.length === 0) {\n      throw new Error('can\\'t generate keys without a spec');\n    }\n\n    const pathFromIndices = indices => `${indices.join(',')},`;\n\n    let knownPaths = null;\n\n    // maps index -> ({'' -> value} or {path -> value})\n    const valuesByIndexAndPath = this._sortSpecParts.map(spec => {\n      // Expand any leaf arrays that we find, and ignore those arrays\n      // themselves.  (We never sort based on an array itself.)\n      let branches = expandArraysInBranches(spec.lookup(doc), true);\n\n      // If there are no values for a key (eg, key goes to an empty array),\n      // pretend we found one undefined value.\n      if (!branches.length) {\n        branches = [{ value: void 0 }];\n      }\n\n      const element = Object.create(null);\n      let usedPaths = false;\n\n      branches.forEach(branch => {\n        if (!branch.arrayIndices) {\n          // If there are no array indices for a branch, then it must be the\n          // only branch, because the only thing that produces multiple branches\n          // is the use of arrays.\n          if (branches.length > 1) {\n            throw Error('multiple branches but no array used?');\n          }\n\n          element[''] = branch.value;\n          return;\n        }\n\n        usedPaths = true;\n\n        const path = pathFromIndices(branch.arrayIndices);\n\n        if (hasOwn.call(element, path)) {\n          throw Error(`duplicate path: ${path}`);\n        }\n\n        element[path] = branch.value;\n\n        // If two sort fields both go into arrays, they have to go into the\n        // exact same arrays and we have to find the same paths.  This is\n        // roughly the same condition that makes MongoDB throw this strange\n        // error message.  eg, the main thing is that if sort spec is {a: 1,\n        // b:1} then a and b cannot both be arrays.\n        //\n        // (In MongoDB it seems to be OK to have {a: 1, 'a.x.y': 1} where 'a'\n        // and 'a.x.y' are both arrays, but we don't allow this for now.\n        // #NestedArraySort\n        // XXX achieve full compatibility here\n        if (knownPaths && !hasOwn.call(knownPaths, path)) {\n          throw Error('cannot index parallel arrays');\n        }\n      });\n\n      if (knownPaths) {\n        // Similarly to above, paths must match everywhere, unless this is a\n        // non-array field.\n        if (!hasOwn.call(element, '') &&\n            Object.keys(knownPaths).length !== Object.keys(element).length) {\n          throw Error('cannot index parallel arrays!');\n        }\n      } else if (usedPaths) {\n        knownPaths = {};\n\n        Object.keys(element).forEach(path => {\n          knownPaths[path] = true;\n        });\n      }\n\n      return element;\n    });\n\n    if (!knownPaths) {\n      // Easy case: no use of arrays.\n      const soleKey = valuesByIndexAndPath.map(values => {\n        if (!hasOwn.call(values, '')) {\n          throw Error('no value in sole key case?');\n        }\n\n        return values[''];\n      });\n\n      cb(soleKey);\n\n      return;\n    }\n\n    Object.keys(knownPaths).forEach(path => {\n      const key = valuesByIndexAndPath.map(values => {\n        if (hasOwn.call(values, '')) {\n          return values[''];\n        }\n\n        if (!hasOwn.call(values, path)) {\n          throw Error('missing path?');\n        }\n\n        return values[path];\n      });\n\n      cb(key);\n    });\n  }\n\n  // Returns a comparator that represents the sort specification (but not\n  // including a possible geoquery distance tie-breaker).\n  _getBaseComparator() {\n    if (this._sortFunction) {\n      return this._sortFunction;\n    }\n\n    // If we're only sorting on geoquery distance and no specs, just say\n    // everything is equal.\n    if (!this._sortSpecParts.length) {\n      return (doc1, doc2) => 0;\n    }\n\n    return (doc1, doc2) => {\n      const key1 = this._getMinKeyFromDoc(doc1);\n      const key2 = this._getMinKeyFromDoc(doc2);\n      return this._compareKeys(key1, key2);\n    };\n  }\n\n  // Finds the minimum key from the doc, according to the sort specs.  (We say\n  // \"minimum\" here but this is with respect to the sort spec, so \"descending\"\n  // sort fields mean we're finding the max for that field.)\n  //\n  // Note that this is NOT \"find the minimum value of the first field, the\n  // minimum value of the second field, etc\"... it's \"choose the\n  // lexicographically minimum value of the key vector, allowing only keys which\n  // you can find along the same paths\".  ie, for a doc {a: [{x: 0, y: 5}, {x:\n  // 1, y: 3}]} with sort spec {'a.x': 1, 'a.y': 1}, the only keys are [0,5] and\n  // [1,3], and the minimum key is [0,5]; notably, [0,3] is NOT a key.\n  _getMinKeyFromDoc(doc) {\n    let minKey = null;\n\n    this._generateKeysFromDoc(doc, key => {\n      if (minKey === null) {\n        minKey = key;\n        return;\n      }\n\n      if (this._compareKeys(key, minKey) < 0) {\n        minKey = key;\n      }\n    });\n\n    return minKey;\n  }\n\n  _getPaths() {\n    return this._sortSpecParts.map(part => part.path);\n  }\n\n  // Given an index 'i', returns a comparator that compares two key arrays based\n  // on field 'i'.\n  _keyFieldComparator(i) {\n    const invert = !this._sortSpecParts[i].ascending;\n\n    return (key1, key2) => {\n      const compare = LocalCollection._f._cmp(key1[i], key2[i]);\n      return invert ? -compare : compare;\n    };\n  }\n}\n\n// Given an array of comparators\n// (functions (a,b)->(negative or positive or zero)), returns a single\n// comparator which uses each comparator in order and returns the first\n// non-zero value.\nfunction composeComparators(comparatorArray) {\n  return (a, b) => {\n    for (let i = 0; i < comparatorArray.length; ++i) {\n      const compare = comparatorArray[i](a, b);\n      if (compare !== 0) {\n        return compare;\n      }\n    }\n\n    return 0;\n  };\n}\n"],"mappings":"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"},"sourceType":"module","externalDependencies":{},"hash":"ec2905adea0eabb3611ea9c9f6b06d1515722ca6"}
