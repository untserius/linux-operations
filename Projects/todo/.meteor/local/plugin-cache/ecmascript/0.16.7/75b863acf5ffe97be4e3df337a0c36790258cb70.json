{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/home/serius/Desktop/Practicals/Projects/todo/packages/binary-heap/max-heap.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.linux.x86_64"},"sourceFileName":"packages/binary-heap/max-heap.js","filename":"/home/serius/Desktop/Practicals/Projects/todo/packages/binary-heap/max-heap.js","targets":{},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/home/serius/Desktop/Practicals/Projects/todo","root":"/home/serius/Desktop/Practicals/Projects/todo","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"_exploded":{},"_verified":{},"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/home/serius/Desktop/Practicals/Projects/todo/packages/binary-heap/max-heap.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/binary-heap/max-heap.js"}},"code":"module.export({\n  MaxHeap: () => MaxHeap\n});\nclass MaxHeap {\n  constructor(comparator) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (typeof comparator !== 'function') {\n      throw new Error('Passed comparator is invalid, should be a comparison function');\n    }\n\n    // a C-style comparator that is given two values and returns a number,\n    // negative if the first value is less than the second, positive if the second\n    // value is greater than the first and zero if they are equal.\n    this._comparator = comparator;\n    if (!options.IdMap) {\n      options.IdMap = IdMap;\n    }\n\n    // _heapIdx maps an id to an index in the Heap array the corresponding value\n    // is located on.\n    this._heapIdx = new options.IdMap();\n\n    // The Heap data-structure implemented as a 0-based contiguous array where\n    // every item on index idx is a node in a complete binary tree. Every node can\n    // have children on indexes idx*2+1 and idx*2+2, except for the leaves. Every\n    // node has a parent on index (idx-1)/2;\n    this._heap = [];\n\n    // If the initial array is passed, we can build the heap in linear time\n    // complexity (O(N)) compared to linearithmic time complexity (O(nlogn)) if\n    // we push elements one by one.\n    if (Array.isArray(options.initData)) {\n      this._initFromData(options.initData);\n    }\n  }\n\n  // Builds a new heap in-place in linear time based on passed data\n  _initFromData(data) {\n    this._heap = data.map(_ref => {\n      let {\n        id,\n        value\n      } = _ref;\n      return {\n        id,\n        value\n      };\n    });\n    data.forEach((_ref2, i) => {\n      let {\n        id\n      } = _ref2;\n      return this._heapIdx.set(id, i);\n    });\n    if (!data.length) {\n      return;\n    }\n\n    // start from the first non-leaf - the parent of the last leaf\n    for (let i = parentIdx(data.length - 1); i >= 0; i--) {\n      this._downHeap(i);\n    }\n  }\n  _downHeap(idx) {\n    while (leftChildIdx(idx) < this.size()) {\n      const left = leftChildIdx(idx);\n      const right = rightChildIdx(idx);\n      let largest = idx;\n      if (left < this.size()) {\n        largest = this._maxIndex(largest, left);\n      }\n      if (right < this.size()) {\n        largest = this._maxIndex(largest, right);\n      }\n      if (largest === idx) {\n        break;\n      }\n      this._swap(largest, idx);\n      idx = largest;\n    }\n  }\n  _upHeap(idx) {\n    while (idx > 0) {\n      const parent = parentIdx(idx);\n      if (this._maxIndex(parent, idx) === idx) {\n        this._swap(parent, idx);\n        idx = parent;\n      } else {\n        break;\n      }\n    }\n  }\n  _maxIndex(idxA, idxB) {\n    const valueA = this._get(idxA);\n    const valueB = this._get(idxB);\n    return this._comparator(valueA, valueB) >= 0 ? idxA : idxB;\n  }\n\n  // Internal: gets raw data object placed on idxth place in heap\n  _get(idx) {\n    return this._heap[idx].value;\n  }\n  _swap(idxA, idxB) {\n    const recA = this._heap[idxA];\n    const recB = this._heap[idxB];\n    this._heapIdx.set(recA.id, idxB);\n    this._heapIdx.set(recB.id, idxA);\n    this._heap[idxA] = recB;\n    this._heap[idxB] = recA;\n  }\n  get(id) {\n    return this.has(id) ? this._get(this._heapIdx.get(id)) : null;\n  }\n  set(id, value) {\n    if (this.has(id)) {\n      if (this.get(id) === value) {\n        return;\n      }\n      const idx = this._heapIdx.get(id);\n      this._heap[idx].value = value;\n\n      // Fix the new value's position\n      // Either bubble new value up if it is greater than its parent\n      this._upHeap(idx);\n      // or bubble it down if it is smaller than one of its children\n      this._downHeap(idx);\n    } else {\n      this._heapIdx.set(id, this._heap.length);\n      this._heap.push({\n        id,\n        value\n      });\n      this._upHeap(this._heap.length - 1);\n    }\n  }\n  remove(id) {\n    if (this.has(id)) {\n      const last = this._heap.length - 1;\n      const idx = this._heapIdx.get(id);\n      if (idx !== last) {\n        this._swap(idx, last);\n        this._heap.pop();\n        this._heapIdx.remove(id);\n\n        // Fix the swapped value's position\n        this._upHeap(idx);\n        this._downHeap(idx);\n      } else {\n        this._heap.pop();\n        this._heapIdx.remove(id);\n      }\n    }\n  }\n  has(id) {\n    return this._heapIdx.has(id);\n  }\n  empty() {\n    return !this.size();\n  }\n  clear() {\n    this._heap = [];\n    this._heapIdx.clear();\n  }\n\n  // iterate over values in no particular order\n  forEach(iterator) {\n    this._heap.forEach(obj => iterator(obj.value, obj.id));\n  }\n  size() {\n    return this._heap.length;\n  }\n  setDefault(id, def) {\n    if (this.has(id)) {\n      return this.get(id);\n    }\n    this.set(id, def);\n    return def;\n  }\n  clone() {\n    const clone = new MaxHeap(this._comparator, this._heap);\n    return clone;\n  }\n  maxElementId() {\n    return this.size() ? this._heap[0].id : null;\n  }\n  _selfCheck() {\n    for (let i = 1; i < this._heap.length; i++) {\n      if (this._maxIndex(parentIdx(i), i) !== parentIdx(i)) {\n        throw new Error(\"An item with id \".concat(this._heap[i].id) + \" has a parent younger than it: \" + this._heap[parentIdx(i)].id);\n      }\n    }\n  }\n}\nconst leftChildIdx = i => i * 2 + 1;\nconst rightChildIdx = i => i * 2 + 2;\nconst parentIdx = i => i - 1 >> 1;","map":{"version":3,"names":["module","export","MaxHeap","constructor","comparator","options","Error","_comparator","IdMap","_heapIdx","_heap","Array","isArray","initData","_initFromData","data","map","id","value","forEach","i","set","length","parentIdx","_downHeap","idx","leftChildIdx","size","left","right","rightChildIdx","largest","_maxIndex","_swap","_upHeap","parent","idxA","idxB","valueA","_get","valueB","recA","recB","get","has","push","remove","last","pop","empty","clear","iterator","obj","setDefault","def","clone","maxElementId","_selfCheck"],"sources":["packages/binary-heap/max-heap.js"],"sourcesContent":["// Constructor of Heap\n// - comparator - Function - given two items returns a number\n// - options:\n//   - initData - Array - Optional - the initial data in a format:\n//        Object:\n//          - id - String - unique id of the item\n//          - value - Any - the data value\n//      each value is retained\n//   - IdMap - Constructor - Optional - custom IdMap class to store id->index\n//       mappings internally. Standard IdMap is used by default.\nexport class MaxHeap { \n  constructor(comparator, options = {}) {\n    if (typeof comparator !== 'function') {\n      throw new Error('Passed comparator is invalid, should be a comparison function');\n    }\n\n    // a C-style comparator that is given two values and returns a number,\n    // negative if the first value is less than the second, positive if the second\n    // value is greater than the first and zero if they are equal.\n    this._comparator = comparator;\n\n    if (! options.IdMap) {\n      options.IdMap = IdMap;\n    }\n\n    // _heapIdx maps an id to an index in the Heap array the corresponding value\n    // is located on.\n    this._heapIdx = new options.IdMap;\n\n    // The Heap data-structure implemented as a 0-based contiguous array where\n    // every item on index idx is a node in a complete binary tree. Every node can\n    // have children on indexes idx*2+1 and idx*2+2, except for the leaves. Every\n    // node has a parent on index (idx-1)/2;\n    this._heap = [];\n\n    // If the initial array is passed, we can build the heap in linear time\n    // complexity (O(N)) compared to linearithmic time complexity (O(nlogn)) if\n    // we push elements one by one.\n    if (Array.isArray(options.initData)) {\n      this._initFromData(options.initData);\n    }\n  }\n\n  // Builds a new heap in-place in linear time based on passed data\n  _initFromData(data) {\n    this._heap = data.map(({ id, value }) => ({ id, value }));\n\n    data.forEach(({ id }, i) => this._heapIdx.set(id, i));\n\n    if (! data.length) {\n      return;\n    }\n\n    // start from the first non-leaf - the parent of the last leaf\n    for (let i = parentIdx(data.length - 1); i >= 0; i--) {\n      this._downHeap(i);\n    }\n  }\n\n  _downHeap(idx) {\n    while (leftChildIdx(idx) < this.size()) {\n      const left = leftChildIdx(idx);\n      const right = rightChildIdx(idx);\n      let largest = idx;\n\n      if (left < this.size()) {\n        largest = this._maxIndex(largest, left);\n      }\n\n      if (right < this.size()) {\n        largest = this._maxIndex(largest, right);\n      }\n\n      if (largest === idx) {\n        break;\n      }\n\n      this._swap(largest, idx);\n      idx = largest;\n    }\n  }\n\n  _upHeap(idx) {\n    while (idx > 0) {\n      const parent = parentIdx(idx);\n      if (this._maxIndex(parent, idx) === idx) {\n        this._swap(parent, idx)\n        idx = parent;\n      } else {\n        break;\n      }\n    }\n  }\n\n  _maxIndex(idxA, idxB) {\n    const valueA = this._get(idxA);\n    const valueB = this._get(idxB);\n    return this._comparator(valueA, valueB) >= 0 ? idxA : idxB;\n  }\n\n  // Internal: gets raw data object placed on idxth place in heap\n  _get(idx) {\n    return this._heap[idx].value;\n  }\n\n  _swap(idxA, idxB) {\n    const recA = this._heap[idxA];\n    const recB = this._heap[idxB];\n\n    this._heapIdx.set(recA.id, idxB);\n    this._heapIdx.set(recB.id, idxA);\n\n    this._heap[idxA] = recB;\n    this._heap[idxB] = recA;\n  }\n\n  get(id) {\n    return this.has(id) ?\n      this._get(this._heapIdx.get(id)) :\n      null;\n  }\n\n  set(id, value) {\n    if (this.has(id)) {\n      if (this.get(id) === value) {\n        return;\n      }\n\n      const idx = this._heapIdx.get(id);\n      this._heap[idx].value = value;\n\n      // Fix the new value's position\n      // Either bubble new value up if it is greater than its parent\n      this._upHeap(idx);\n      // or bubble it down if it is smaller than one of its children\n      this._downHeap(idx);\n    } else {\n      this._heapIdx.set(id, this._heap.length);\n      this._heap.push({ id, value });\n      this._upHeap(this._heap.length - 1);\n    }\n  }\n\n  remove(id) {\n    if (this.has(id)) {\n      const last = this._heap.length - 1;\n      const idx = this._heapIdx.get(id);\n\n      if (idx !== last) {\n        this._swap(idx, last);\n        this._heap.pop();\n        this._heapIdx.remove(id);\n\n        // Fix the swapped value's position\n        this._upHeap(idx);\n        this._downHeap(idx);\n      } else {\n        this._heap.pop();\n        this._heapIdx.remove(id);\n      }\n    }\n  }\n\n  has(id) {\n    return this._heapIdx.has(id);\n  }\n\n  empty() {\n    return !this.size();\n  }\n\n  clear() {\n    this._heap = [];\n    this._heapIdx.clear();\n  }\n\n  // iterate over values in no particular order\n  forEach(iterator) {\n    this._heap.forEach(obj => iterator(obj.value, obj.id));\n  }\n\n  size() {\n    return this._heap.length;\n  }\n\n  setDefault(id, def) {\n    if (this.has(id)) {\n      return this.get(id);\n    }\n\n    this.set(id, def);\n    return def;\n  }\n\n  clone() {\n    const clone = new MaxHeap(this._comparator, this._heap);\n    return clone;\n  }\n\n  maxElementId() {\n    return this.size() ? this._heap[0].id : null;\n  }\n\n  _selfCheck() {\n    for (let i = 1; i < this._heap.length; i++) {\n      if (this._maxIndex(parentIdx(i), i) !== parentIdx(i)) {\n          throw new Error(`An item with id ${this._heap[i].id}` +\n                          \" has a parent younger than it: \" +\n                          this._heap[parentIdx(i)].id);\n      }\n    }\n  }\n}\n\nconst leftChildIdx = i => i * 2 + 1;\nconst rightChildIdx = i => i * 2 + 2;\nconst parentIdx = i => (i - 1) >> 1;\n"],"mappings":"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"},"sourceType":"module","externalDependencies":{},"hash":"75b863acf5ffe97be4e3df337a0c36790258cb70"}
