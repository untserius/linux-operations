{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/home/serius/Desktop/Practicals/Projects/todo/packages/mongo/mongo_driver.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.linux.x86_64"},"sourceFileName":"packages/mongo/mongo_driver.js","filename":"/home/serius/Desktop/Practicals/Projects/todo/packages/mongo/mongo_driver.js","targets":{},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/home/serius/Desktop/Practicals/Projects/todo","root":"/home/serius/Desktop/Practicals/Projects/todo","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"_exploded":{},"_verified":{},"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/home/serius/Desktop/Practicals/Projects/todo/packages/mongo/mongo_driver.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/mongo/mongo_driver.js"}},"code":"!function (module1) {\n  let _objectSpread;\n  module1.link(\"@babel/runtime/helpers/objectSpread2\", {\n    default(v) {\n      _objectSpread = v;\n    }\n  }, 0);\n  let normalizeProjection;\n  module1.link(\"./mongo_utils\", {\n    normalizeProjection(v) {\n      normalizeProjection = v;\n    }\n  }, 0);\n  let DocFetcher;\n  module1.link(\"./doc_fetcher.js\", {\n    DocFetcher(v) {\n      DocFetcher = v;\n    }\n  }, 1);\n  let ASYNC_CURSOR_METHODS, getAsyncMethodName;\n  module1.link(\"meteor/minimongo/constants\", {\n    ASYNC_CURSOR_METHODS(v) {\n      ASYNC_CURSOR_METHODS = v;\n    },\n    getAsyncMethodName(v) {\n      getAsyncMethodName = v;\n    }\n  }, 2);\n  /**\n   * Provide a synchronous Collection API using fibers, backed by\n   * MongoDB.  This is only for use on the server, and mostly identical\n   * to the client API.\n   *\n   * NOTE: the public API methods must be run within a fiber. If you call\n   * these outside of a fiber they will explode!\n   */\n\n  const path = require(\"path\");\n  const util = require(\"util\");\n\n  /** @type {import('mongodb')} */\n  var MongoDB = NpmModuleMongodb;\n  var Future = Npm.require('fibers/future');\n  MongoInternals = {};\n  MongoInternals.NpmModules = {\n    mongodb: {\n      version: NpmModuleMongodbVersion,\n      module: MongoDB\n    }\n  };\n\n  // Older version of what is now available via\n  // MongoInternals.NpmModules.mongodb.module.  It was never documented, but\n  // people do use it.\n  // XXX COMPAT WITH 1.0.3.2\n  MongoInternals.NpmModule = MongoDB;\n  const FILE_ASSET_SUFFIX = 'Asset';\n  const ASSETS_FOLDER = 'assets';\n  const APP_FOLDER = 'app';\n\n  // This is used to add or remove EJSON from the beginning of everything nested\n  // inside an EJSON custom type. It should only be called on pure JSON!\n  var replaceNames = function (filter, thing) {\n    if (typeof thing === \"object\" && thing !== null) {\n      if (_.isArray(thing)) {\n        return _.map(thing, _.bind(replaceNames, null, filter));\n      }\n      var ret = {};\n      _.each(thing, function (value, key) {\n        ret[filter(key)] = replaceNames(filter, value);\n      });\n      return ret;\n    }\n    return thing;\n  };\n\n  // Ensure that EJSON.clone keeps a Timestamp as a Timestamp (instead of just\n  // doing a structural clone).\n  // XXX how ok is this? what if there are multiple copies of MongoDB loaded?\n  MongoDB.Timestamp.prototype.clone = function () {\n    // Timestamps should be immutable.\n    return this;\n  };\n  var makeMongoLegal = function (name) {\n    return \"EJSON\" + name;\n  };\n  var unmakeMongoLegal = function (name) {\n    return name.substr(5);\n  };\n  var replaceMongoAtomWithMeteor = function (document) {\n    if (document instanceof MongoDB.Binary) {\n      // for backwards compatibility\n      if (document.sub_type !== 0) {\n        return document;\n      }\n      var buffer = document.value(true);\n      return new Uint8Array(buffer);\n    }\n    if (document instanceof MongoDB.ObjectID) {\n      return new Mongo.ObjectID(document.toHexString());\n    }\n    if (document instanceof MongoDB.Decimal128) {\n      return Decimal(document.toString());\n    }\n    if (document[\"EJSON$type\"] && document[\"EJSON$value\"] && _.size(document) === 2) {\n      return EJSON.fromJSONValue(replaceNames(unmakeMongoLegal, document));\n    }\n    if (document instanceof MongoDB.Timestamp) {\n      // For now, the Meteor representation of a Mongo timestamp type (not a date!\n      // this is a weird internal thing used in the oplog!) is the same as the\n      // Mongo representation. We need to do this explicitly or else we would do a\n      // structural clone and lose the prototype.\n      return document;\n    }\n    return undefined;\n  };\n  var replaceMeteorAtomWithMongo = function (document) {\n    if (EJSON.isBinary(document)) {\n      // This does more copies than we'd like, but is necessary because\n      // MongoDB.BSON only looks like it takes a Uint8Array (and doesn't actually\n      // serialize it correctly).\n      return new MongoDB.Binary(Buffer.from(document));\n    }\n    if (document instanceof MongoDB.Binary) {\n      return document;\n    }\n    if (document instanceof Mongo.ObjectID) {\n      return new MongoDB.ObjectID(document.toHexString());\n    }\n    if (document instanceof MongoDB.Timestamp) {\n      // For now, the Meteor representation of a Mongo timestamp type (not a date!\n      // this is a weird internal thing used in the oplog!) is the same as the\n      // Mongo representation. We need to do this explicitly or else we would do a\n      // structural clone and lose the prototype.\n      return document;\n    }\n    if (document instanceof Decimal) {\n      return MongoDB.Decimal128.fromString(document.toString());\n    }\n    if (EJSON._isCustomType(document)) {\n      return replaceNames(makeMongoLegal, EJSON.toJSONValue(document));\n    }\n    // It is not ordinarily possible to stick dollar-sign keys into mongo\n    // so we don't bother checking for things that need escaping at this time.\n    return undefined;\n  };\n  var replaceTypes = function (document, atomTransformer) {\n    if (typeof document !== 'object' || document === null) return document;\n    var replacedTopLevelAtom = atomTransformer(document);\n    if (replacedTopLevelAtom !== undefined) return replacedTopLevelAtom;\n    var ret = document;\n    _.each(document, function (val, key) {\n      var valReplaced = replaceTypes(val, atomTransformer);\n      if (val !== valReplaced) {\n        // Lazy clone. Shallow copy.\n        if (ret === document) ret = _.clone(document);\n        ret[key] = valReplaced;\n      }\n    });\n    return ret;\n  };\n  MongoConnection = function (url, options) {\n    var _Meteor$settings, _Meteor$settings$pack, _Meteor$settings$pack2;\n    var self = this;\n    options = options || {};\n    self._observeMultiplexers = {};\n    self._onFailoverHook = new Hook();\n    const userOptions = _objectSpread(_objectSpread({}, Mongo._connectionOptions || {}), ((_Meteor$settings = Meteor.settings) === null || _Meteor$settings === void 0 ? void 0 : (_Meteor$settings$pack = _Meteor$settings.packages) === null || _Meteor$settings$pack === void 0 ? void 0 : (_Meteor$settings$pack2 = _Meteor$settings$pack.mongo) === null || _Meteor$settings$pack2 === void 0 ? void 0 : _Meteor$settings$pack2.options) || {});\n    var mongoOptions = Object.assign({\n      ignoreUndefined: true\n    }, userOptions);\n\n    // Internally the oplog connections specify their own maxPoolSize\n    // which we don't want to overwrite with any user defined value\n    if (_.has(options, 'maxPoolSize')) {\n      // If we just set this for \"server\", replSet will override it. If we just\n      // set it for replSet, it will be ignored if we're not using a replSet.\n      mongoOptions.maxPoolSize = options.maxPoolSize;\n    }\n\n    // Transform options like \"tlsCAFileAsset\": \"filename.pem\" into\n    // \"tlsCAFile\": \"/<fullpath>/filename.pem\"\n    Object.entries(mongoOptions || {}).filter(_ref => {\n      let [key] = _ref;\n      return key && key.endsWith(FILE_ASSET_SUFFIX);\n    }).forEach(_ref2 => {\n      let [key, value] = _ref2;\n      const optionName = key.replace(FILE_ASSET_SUFFIX, '');\n      mongoOptions[optionName] = path.join(Assets.getServerDir(), ASSETS_FOLDER, APP_FOLDER, value);\n      delete mongoOptions[key];\n    });\n    self.db = null;\n    self._oplogHandle = null;\n    self._docFetcher = null;\n    self.client = new MongoDB.MongoClient(url, mongoOptions);\n    self.db = self.client.db();\n    self.client.on('serverDescriptionChanged', Meteor.bindEnvironment(event => {\n      // When the connection is no longer against the primary node, execute all\n      // failover hooks. This is important for the driver as it has to re-pool the\n      // query when it happens.\n      if (event.previousDescription.type !== 'RSPrimary' && event.newDescription.type === 'RSPrimary') {\n        self._onFailoverHook.each(callback => {\n          callback();\n          return true;\n        });\n      }\n    }));\n    if (options.oplogUrl && !Package['disable-oplog']) {\n      self._oplogHandle = new OplogHandle(options.oplogUrl, self.db.databaseName);\n      self._docFetcher = new DocFetcher(self);\n    }\n    Promise.await(self.client.connect());\n  };\n  MongoConnection.prototype.close = function () {\n    var self = this;\n    if (!self.db) throw Error(\"close called before Connection created?\");\n\n    // XXX probably untested\n    var oplogHandle = self._oplogHandle;\n    self._oplogHandle = null;\n    if (oplogHandle) oplogHandle.stop();\n\n    // Use Future.wrap so that errors get thrown. This happens to\n    // work even outside a fiber since the 'close' method is not\n    // actually asynchronous.\n    Future.wrap(_.bind(self.client.close, self.client))(true).wait();\n  };\n\n  // Returns the Mongo Collection object; may yield.\n  MongoConnection.prototype.rawCollection = function (collectionName) {\n    var self = this;\n    if (!self.db) throw Error(\"rawCollection called before Connection created?\");\n    return self.db.collection(collectionName);\n  };\n  MongoConnection.prototype._createCappedCollection = function (collectionName, byteSize, maxDocuments) {\n    var self = this;\n    if (!self.db) throw Error(\"_createCappedCollection called before Connection created?\");\n    var future = new Future();\n    self.db.createCollection(collectionName, {\n      capped: true,\n      size: byteSize,\n      max: maxDocuments\n    }, future.resolver());\n    future.wait();\n  };\n\n  // This should be called synchronously with a write, to create a\n  // transaction on the current write fence, if any. After we can read\n  // the write, and after observers have been notified (or at least,\n  // after the observer notifiers have added themselves to the write\n  // fence), you should call 'committed()' on the object returned.\n  MongoConnection.prototype._maybeBeginWrite = function () {\n    var fence = DDPServer._CurrentWriteFence.get();\n    if (fence) {\n      return fence.beginWrite();\n    } else {\n      return {\n        committed: function () {}\n      };\n    }\n  };\n\n  // Internal interface: adds a callback which is called when the Mongo primary\n  // changes. Returns a stop handle.\n  MongoConnection.prototype._onFailover = function (callback) {\n    return this._onFailoverHook.register(callback);\n  };\n\n  //////////// Public API //////////\n\n  // The write methods block until the database has confirmed the write (it may\n  // not be replicated or stable on disk, but one server has confirmed it) if no\n  // callback is provided. If a callback is provided, then they call the callback\n  // when the write is confirmed. They return nothing on success, and raise an\n  // exception on failure.\n  //\n  // After making a write (with insert, update, remove), observers are\n  // notified asynchronously. If you want to receive a callback once all\n  // of the observer notifications have landed for your write, do the\n  // writes inside a write fence (set DDPServer._CurrentWriteFence to a new\n  // _WriteFence, and then set a callback on the write fence.)\n  //\n  // Since our execution environment is single-threaded, this is\n  // well-defined -- a write \"has been made\" if it's returned, and an\n  // observer \"has been notified\" if its callback has returned.\n\n  var writeCallback = function (write, refresh, callback) {\n    return function (err, result) {\n      if (!err) {\n        // XXX We don't have to run this on error, right?\n        try {\n          refresh();\n        } catch (refreshErr) {\n          if (callback) {\n            callback(refreshErr);\n            return;\n          } else {\n            throw refreshErr;\n          }\n        }\n      }\n      write.committed();\n      if (callback) {\n        callback(err, result);\n      } else if (err) {\n        throw err;\n      }\n    };\n  };\n  var bindEnvironmentForWrite = function (callback) {\n    return Meteor.bindEnvironment(callback, \"Mongo write\");\n  };\n  MongoConnection.prototype._insert = function (collection_name, document, callback) {\n    var self = this;\n    var sendError = function (e) {\n      if (callback) return callback(e);\n      throw e;\n    };\n    if (collection_name === \"___meteor_failure_test_collection\") {\n      var e = new Error(\"Failure test\");\n      e._expectedByTest = true;\n      sendError(e);\n      return;\n    }\n    if (!(LocalCollection._isPlainObject(document) && !EJSON._isCustomType(document))) {\n      sendError(new Error(\"Only plain objects may be inserted into MongoDB\"));\n      return;\n    }\n    var write = self._maybeBeginWrite();\n    var refresh = function () {\n      Meteor.refresh({\n        collection: collection_name,\n        id: document._id\n      });\n    };\n    callback = bindEnvironmentForWrite(writeCallback(write, refresh, callback));\n    try {\n      var collection = self.rawCollection(collection_name);\n      collection.insertOne(replaceTypes(document, replaceMeteorAtomWithMongo), {\n        safe: true\n      }).then(_ref3 => {\n        let {\n          insertedId\n        } = _ref3;\n        callback(null, insertedId);\n      }).catch(e => {\n        callback(e, null);\n      });\n    } catch (err) {\n      write.committed();\n      throw err;\n    }\n  };\n\n  // Cause queries that may be affected by the selector to poll in this write\n  // fence.\n  MongoConnection.prototype._refresh = function (collectionName, selector) {\n    var refreshKey = {\n      collection: collectionName\n    };\n    // If we know which documents we're removing, don't poll queries that are\n    // specific to other documents. (Note that multiple notifications here should\n    // not cause multiple polls, since all our listener is doing is enqueueing a\n    // poll.)\n    var specificIds = LocalCollection._idsMatchedBySelector(selector);\n    if (specificIds) {\n      _.each(specificIds, function (id) {\n        Meteor.refresh(_.extend({\n          id: id\n        }, refreshKey));\n      });\n    } else {\n      Meteor.refresh(refreshKey);\n    }\n  };\n  MongoConnection.prototype._remove = function (collection_name, selector, callback) {\n    var self = this;\n    if (collection_name === \"___meteor_failure_test_collection\") {\n      var e = new Error(\"Failure test\");\n      e._expectedByTest = true;\n      if (callback) {\n        return callback(e);\n      } else {\n        throw e;\n      }\n    }\n    var write = self._maybeBeginWrite();\n    var refresh = function () {\n      self._refresh(collection_name, selector);\n    };\n    callback = bindEnvironmentForWrite(writeCallback(write, refresh, callback));\n    try {\n      var collection = self.rawCollection(collection_name);\n      collection.deleteMany(replaceTypes(selector, replaceMeteorAtomWithMongo), {\n        safe: true\n      }).then(_ref4 => {\n        let {\n          deletedCount\n        } = _ref4;\n        callback(null, transformResult({\n          result: {\n            modifiedCount: deletedCount\n          }\n        }).numberAffected);\n      }).catch(err => {\n        callback(err);\n      });\n    } catch (err) {\n      write.committed();\n      throw err;\n    }\n  };\n  MongoConnection.prototype._dropCollection = function (collectionName, cb) {\n    var self = this;\n    var write = self._maybeBeginWrite();\n    var refresh = function () {\n      Meteor.refresh({\n        collection: collectionName,\n        id: null,\n        dropCollection: true\n      });\n    };\n    cb = bindEnvironmentForWrite(writeCallback(write, refresh, cb));\n    try {\n      var collection = self.rawCollection(collectionName);\n      collection.drop(cb);\n    } catch (e) {\n      write.committed();\n      throw e;\n    }\n  };\n\n  // For testing only.  Slightly better than `c.rawDatabase().dropDatabase()`\n  // because it lets the test's fence wait for it to be complete.\n  MongoConnection.prototype._dropDatabase = function (cb) {\n    var self = this;\n    var write = self._maybeBeginWrite();\n    var refresh = function () {\n      Meteor.refresh({\n        dropDatabase: true\n      });\n    };\n    cb = bindEnvironmentForWrite(writeCallback(write, refresh, cb));\n    try {\n      self.db.dropDatabase(cb);\n    } catch (e) {\n      write.committed();\n      throw e;\n    }\n  };\n  MongoConnection.prototype._update = function (collection_name, selector, mod, options, callback) {\n    var self = this;\n    if (!callback && options instanceof Function) {\n      callback = options;\n      options = null;\n    }\n    if (collection_name === \"___meteor_failure_test_collection\") {\n      var e = new Error(\"Failure test\");\n      e._expectedByTest = true;\n      if (callback) {\n        return callback(e);\n      } else {\n        throw e;\n      }\n    }\n\n    // explicit safety check. null and undefined can crash the mongo\n    // driver. Although the node driver and minimongo do 'support'\n    // non-object modifier in that they don't crash, they are not\n    // meaningful operations and do not do anything. Defensively throw an\n    // error here.\n    if (!mod || typeof mod !== 'object') throw new Error(\"Invalid modifier. Modifier must be an object.\");\n    if (!(LocalCollection._isPlainObject(mod) && !EJSON._isCustomType(mod))) {\n      throw new Error(\"Only plain objects may be used as replacement\" + \" documents in MongoDB\");\n    }\n    if (!options) options = {};\n    var write = self._maybeBeginWrite();\n    var refresh = function () {\n      self._refresh(collection_name, selector);\n    };\n    callback = writeCallback(write, refresh, callback);\n    try {\n      var collection = self.rawCollection(collection_name);\n      var mongoOpts = {\n        safe: true\n      };\n      // Add support for filtered positional operator\n      if (options.arrayFilters !== undefined) mongoOpts.arrayFilters = options.arrayFilters;\n      // explictly enumerate options that minimongo supports\n      if (options.upsert) mongoOpts.upsert = true;\n      if (options.multi) mongoOpts.multi = true;\n      // Lets you get a more more full result from MongoDB. Use with caution:\n      // might not work with C.upsert (as opposed to C.update({upsert:true}) or\n      // with simulated upsert.\n      if (options.fullResult) mongoOpts.fullResult = true;\n      var mongoSelector = replaceTypes(selector, replaceMeteorAtomWithMongo);\n      var mongoMod = replaceTypes(mod, replaceMeteorAtomWithMongo);\n      var isModify = LocalCollection._isModificationMod(mongoMod);\n      if (options._forbidReplace && !isModify) {\n        var err = new Error(\"Invalid modifier. Replacements are forbidden.\");\n        if (callback) {\n          return callback(err);\n        } else {\n          throw err;\n        }\n      }\n\n      // We've already run replaceTypes/replaceMeteorAtomWithMongo on\n      // selector and mod.  We assume it doesn't matter, as far as\n      // the behavior of modifiers is concerned, whether `_modify`\n      // is run on EJSON or on mongo-converted EJSON.\n\n      // Run this code up front so that it fails fast if someone uses\n      // a Mongo update operator we don't support.\n      let knownId;\n      if (options.upsert) {\n        try {\n          let newDoc = LocalCollection._createUpsertDocument(selector, mod);\n          knownId = newDoc._id;\n        } catch (err) {\n          if (callback) {\n            return callback(err);\n          } else {\n            throw err;\n          }\n        }\n      }\n      if (options.upsert && !isModify && !knownId && options.insertedId && !(options.insertedId instanceof Mongo.ObjectID && options.generatedId)) {\n        // In case of an upsert with a replacement, where there is no _id defined\n        // in either the query or the replacement doc, mongo will generate an id itself.\n        // Therefore we need this special strategy if we want to control the id ourselves.\n\n        // We don't need to do this when:\n        // - This is not a replacement, so we can add an _id to $setOnInsert\n        // - The id is defined by query or mod we can just add it to the replacement doc\n        // - The user did not specify any id preference and the id is a Mongo ObjectId,\n        //     then we can just let Mongo generate the id\n\n        simulateUpsertWithInsertedId(collection, mongoSelector, mongoMod, options,\n        // This callback does not need to be bindEnvironment'ed because\n        // simulateUpsertWithInsertedId() wraps it and then passes it through\n        // bindEnvironmentForWrite.\n        function (error, result) {\n          // If we got here via a upsert() call, then options._returnObject will\n          // be set and we should return the whole object. Otherwise, we should\n          // just return the number of affected docs to match the mongo API.\n          if (result && !options._returnObject) {\n            callback(error, result.numberAffected);\n          } else {\n            callback(error, result);\n          }\n        });\n      } else {\n        if (options.upsert && !knownId && options.insertedId && isModify) {\n          if (!mongoMod.hasOwnProperty('$setOnInsert')) {\n            mongoMod.$setOnInsert = {};\n          }\n          knownId = options.insertedId;\n          Object.assign(mongoMod.$setOnInsert, replaceTypes({\n            _id: options.insertedId\n          }, replaceMeteorAtomWithMongo));\n        }\n        const strings = Object.keys(mongoMod).filter(key => !key.startsWith(\"$\"));\n        let updateMethod = strings.length > 0 ? 'replaceOne' : 'updateMany';\n        updateMethod = updateMethod === 'updateMany' && !mongoOpts.multi ? 'updateOne' : updateMethod;\n        collection[updateMethod].bind(collection)(mongoSelector, mongoMod, mongoOpts,\n        // mongo driver now returns undefined for err in the callback\n        bindEnvironmentForWrite(function () {\n          let err = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n          let result = arguments.length > 1 ? arguments[1] : undefined;\n          if (!err) {\n            var meteorResult = transformResult({\n              result\n            });\n            if (meteorResult && options._returnObject) {\n              // If this was an upsert() call, and we ended up\n              // inserting a new doc and we know its id, then\n              // return that id as well.\n              if (options.upsert && meteorResult.insertedId) {\n                if (knownId) {\n                  meteorResult.insertedId = knownId;\n                } else if (meteorResult.insertedId instanceof MongoDB.ObjectID) {\n                  meteorResult.insertedId = new Mongo.ObjectID(meteorResult.insertedId.toHexString());\n                }\n              }\n              callback(err, meteorResult);\n            } else {\n              callback(err, meteorResult.numberAffected);\n            }\n          } else {\n            callback(err);\n          }\n        }));\n      }\n    } catch (e) {\n      write.committed();\n      throw e;\n    }\n  };\n  var transformResult = function (driverResult) {\n    var meteorResult = {\n      numberAffected: 0\n    };\n    if (driverResult) {\n      var mongoResult = driverResult.result;\n      // On updates with upsert:true, the inserted values come as a list of\n      // upserted values -- even with options.multi, when the upsert does insert,\n      // it only inserts one element.\n      if (mongoResult.upsertedCount) {\n        meteorResult.numberAffected = mongoResult.upsertedCount;\n        if (mongoResult.upsertedId) {\n          meteorResult.insertedId = mongoResult.upsertedId;\n        }\n      } else {\n        // n was used before Mongo 5.0, in Mongo 5.0 we are not receiving this n\n        // field and so we are using modifiedCount instead\n        meteorResult.numberAffected = mongoResult.n || mongoResult.matchedCount || mongoResult.modifiedCount;\n      }\n    }\n    return meteorResult;\n  };\n  var NUM_OPTIMISTIC_TRIES = 3;\n\n  // exposed for testing\n  MongoConnection._isCannotChangeIdError = function (err) {\n    // Mongo 3.2.* returns error as next Object:\n    // {name: String, code: Number, errmsg: String}\n    // Older Mongo returns:\n    // {name: String, code: Number, err: String}\n    var error = err.errmsg || err.err;\n\n    // We don't use the error code here\n    // because the error code we observed it producing (16837) appears to be\n    // a far more generic error code based on examining the source.\n    if (error.indexOf('The _id field cannot be changed') === 0 || error.indexOf(\"the (immutable) field '_id' was found to have been altered to _id\") !== -1) {\n      return true;\n    }\n    return false;\n  };\n  var simulateUpsertWithInsertedId = function (collection, selector, mod, options, callback) {\n    // STRATEGY: First try doing an upsert with a generated ID.\n    // If this throws an error about changing the ID on an existing document\n    // then without affecting the database, we know we should probably try\n    // an update without the generated ID. If it affected 0 documents,\n    // then without affecting the database, we the document that first\n    // gave the error is probably removed and we need to try an insert again\n    // We go back to step one and repeat.\n    // Like all \"optimistic write\" schemes, we rely on the fact that it's\n    // unlikely our writes will continue to be interfered with under normal\n    // circumstances (though sufficiently heavy contention with writers\n    // disagreeing on the existence of an object will cause writes to fail\n    // in theory).\n\n    var insertedId = options.insertedId; // must exist\n    var mongoOptsForUpdate = {\n      safe: true,\n      multi: options.multi\n    };\n    var mongoOptsForInsert = {\n      safe: true,\n      upsert: true\n    };\n    var replacementWithId = Object.assign(replaceTypes({\n      _id: insertedId\n    }, replaceMeteorAtomWithMongo), mod);\n    var tries = NUM_OPTIMISTIC_TRIES;\n    var doUpdate = function () {\n      tries--;\n      if (!tries) {\n        callback(new Error(\"Upsert failed after \" + NUM_OPTIMISTIC_TRIES + \" tries.\"));\n      } else {\n        let method = collection.updateMany;\n        if (!Object.keys(mod).some(key => key.startsWith(\"$\"))) {\n          method = collection.replaceOne.bind(collection);\n        }\n        method(selector, mod, mongoOptsForUpdate, bindEnvironmentForWrite(function (err, result) {\n          if (err) {\n            callback(err);\n          } else if (result && (result.modifiedCount || result.upsertedCount)) {\n            callback(null, {\n              numberAffected: result.modifiedCount || result.upsertedCount,\n              insertedId: result.upsertedId || undefined\n            });\n          } else {\n            doConditionalInsert();\n          }\n        }));\n      }\n    };\n    var doConditionalInsert = function () {\n      collection.replaceOne(selector, replacementWithId, mongoOptsForInsert, bindEnvironmentForWrite(function (err, result) {\n        if (err) {\n          // figure out if this is a\n          // \"cannot change _id of document\" error, and\n          // if so, try doUpdate() again, up to 3 times.\n          if (MongoConnection._isCannotChangeIdError(err)) {\n            doUpdate();\n          } else {\n            callback(err);\n          }\n        } else {\n          callback(null, {\n            numberAffected: result.upsertedCount,\n            insertedId: result.upsertedId\n          });\n        }\n      }));\n    };\n    doUpdate();\n  };\n  _.each([\"insert\", \"update\", \"remove\", \"dropCollection\", \"dropDatabase\"], function (method) {\n    MongoConnection.prototype[method] = function /* arguments */\n    () {\n      var self = this;\n      return Meteor.wrapAsync(self[\"_\" + method]).apply(self, arguments);\n    };\n  });\n\n  // XXX MongoConnection.upsert() does not return the id of the inserted document\n  // unless you set it explicitly in the selector or modifier (as a replacement\n  // doc).\n  MongoConnection.prototype.upsert = function (collectionName, selector, mod, options, callback) {\n    var self = this;\n    if (typeof options === \"function\" && !callback) {\n      callback = options;\n      options = {};\n    }\n    return self.update(collectionName, selector, mod, _.extend({}, options, {\n      upsert: true,\n      _returnObject: true\n    }), callback);\n  };\n  MongoConnection.prototype.find = function (collectionName, selector, options) {\n    var self = this;\n    if (arguments.length === 1) selector = {};\n    return new Cursor(self, new CursorDescription(collectionName, selector, options));\n  };\n  MongoConnection.prototype.findOneAsync = function (collection_name, selector, options) {\n    return Promise.asyncApply(() => {\n      var self = this;\n      if (arguments.length === 1) selector = {};\n      options = options || {};\n      options.limit = 1;\n      return Promise.await(self.find(collection_name, selector, options).fetchAsync())[0];\n    });\n  };\n  MongoConnection.prototype.findOne = function (collection_name, selector, options) {\n    var self = this;\n    return Future.fromPromise(self.findOneAsync(collection_name, selector, options)).wait();\n  };\n  MongoConnection.prototype.createIndexAsync = function (collectionName, index, options) {\n    var self = this;\n\n    // We expect this function to be called at startup, not from within a method,\n    // so we don't interact with the write fence.\n    var collection = self.rawCollection(collectionName);\n    return collection.createIndex(index, options);\n  };\n\n  // We'll actually design an index API later. For now, we just pass through to\n  // Mongo's, but make it synchronous.\n  MongoConnection.prototype.createIndex = function (collectionName, index, options) {\n    var self = this;\n    return Future.fromPromise(self.createIndexAsync(collectionName, index, options));\n  };\n  MongoConnection.prototype.countDocuments = function (collectionName) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n    args = args.map(arg => replaceTypes(arg, replaceMeteorAtomWithMongo));\n    const collection = this.rawCollection(collectionName);\n    return collection.countDocuments(...args);\n  };\n  MongoConnection.prototype.estimatedDocumentCount = function (collectionName) {\n    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      args[_key2 - 1] = arguments[_key2];\n    }\n    args = args.map(arg => replaceTypes(arg, replaceMeteorAtomWithMongo));\n    const collection = this.rawCollection(collectionName);\n    return collection.estimatedDocumentCount(...args);\n  };\n  MongoConnection.prototype._ensureIndex = MongoConnection.prototype.createIndex;\n  MongoConnection.prototype._dropIndex = function (collectionName, index) {\n    var self = this;\n\n    // This function is only used by test code, not within a method, so we don't\n    // interact with the write fence.\n    var collection = self.rawCollection(collectionName);\n    var future = new Future();\n    var indexName = collection.dropIndex(index, future.resolver());\n    future.wait();\n  };\n\n  // CURSORS\n\n  // There are several classes which relate to cursors:\n  //\n  // CursorDescription represents the arguments used to construct a cursor:\n  // collectionName, selector, and (find) options.  Because it is used as a key\n  // for cursor de-dup, everything in it should either be JSON-stringifiable or\n  // not affect observeChanges output (eg, options.transform functions are not\n  // stringifiable but do not affect observeChanges).\n  //\n  // SynchronousCursor is a wrapper around a MongoDB cursor\n  // which includes fully-synchronous versions of forEach, etc.\n  //\n  // Cursor is the cursor object returned from find(), which implements the\n  // documented Mongo.Collection cursor API.  It wraps a CursorDescription and a\n  // SynchronousCursor (lazily: it doesn't contact Mongo until you call a method\n  // like fetch or forEach on it).\n  //\n  // ObserveHandle is the \"observe handle\" returned from observeChanges. It has a\n  // reference to an ObserveMultiplexer.\n  //\n  // ObserveMultiplexer allows multiple identical ObserveHandles to be driven by a\n  // single observe driver.\n  //\n  // There are two \"observe drivers\" which drive ObserveMultiplexers:\n  //   - PollingObserveDriver caches the results of a query and reruns it when\n  //     necessary.\n  //   - OplogObserveDriver follows the Mongo operation log to directly observe\n  //     database changes.\n  // Both implementations follow the same simple interface: when you create them,\n  // they start sending observeChanges callbacks (and a ready() invocation) to\n  // their ObserveMultiplexer, and you stop them by calling their stop() method.\n\n  CursorDescription = function (collectionName, selector, options) {\n    var self = this;\n    self.collectionName = collectionName;\n    self.selector = Mongo.Collection._rewriteSelector(selector);\n    self.options = options || {};\n  };\n  Cursor = function (mongo, cursorDescription) {\n    var self = this;\n    self._mongo = mongo;\n    self._cursorDescription = cursorDescription;\n    self._synchronousCursor = null;\n  };\n  function setupSynchronousCursor(cursor, method) {\n    // You can only observe a tailable cursor.\n    if (cursor._cursorDescription.options.tailable) throw new Error('Cannot call ' + method + ' on a tailable cursor');\n    if (!cursor._synchronousCursor) {\n      cursor._synchronousCursor = cursor._mongo._createSynchronousCursor(cursor._cursorDescription, {\n        // Make sure that the \"cursor\" argument to forEach/map callbacks is the\n        // Cursor, not the SynchronousCursor.\n        selfForIteration: cursor,\n        useTransform: true\n      });\n    }\n    return cursor._synchronousCursor;\n  }\n  Cursor.prototype.count = function () {\n    const collection = this._mongo.rawCollection(this._cursorDescription.collectionName);\n    return Promise.await(collection.countDocuments(replaceTypes(this._cursorDescription.selector, replaceMeteorAtomWithMongo), replaceTypes(this._cursorDescription.options, replaceMeteorAtomWithMongo)));\n  };\n  [...ASYNC_CURSOR_METHODS, Symbol.iterator, Symbol.asyncIterator].forEach(methodName => {\n    // count is handled specially since we don't want to create a cursor.\n    // it is still included in ASYNC_CURSOR_METHODS because we still want an async version of it to exist.\n    if (methodName !== 'count') {\n      Cursor.prototype[methodName] = function () {\n        const cursor = setupSynchronousCursor(this, methodName);\n        return cursor[methodName](...arguments);\n      };\n    }\n\n    // These methods are handled separately.\n    if (methodName === Symbol.iterator || methodName === Symbol.asyncIterator) {\n      return;\n    }\n    const methodNameAsync = getAsyncMethodName(methodName);\n    Cursor.prototype[methodNameAsync] = function () {\n      try {\n        this[methodName].isCalledFromAsync = true;\n        return Promise.resolve(this[methodName](...arguments));\n      } catch (error) {\n        return Promise.reject(error);\n      }\n    };\n  });\n  Cursor.prototype.getTransform = function () {\n    return this._cursorDescription.options.transform;\n  };\n\n  // When you call Meteor.publish() with a function that returns a Cursor, we need\n  // to transmute it into the equivalent subscription.  This is the function that\n  // does that.\n\n  Cursor.prototype._publishCursor = function (sub) {\n    var self = this;\n    var collection = self._cursorDescription.collectionName;\n    return Mongo.Collection._publishCursor(self, sub, collection);\n  };\n\n  // Used to guarantee that publish functions return at most one cursor per\n  // collection. Private, because we might later have cursors that include\n  // documents from multiple collections somehow.\n  Cursor.prototype._getCollectionName = function () {\n    var self = this;\n    return self._cursorDescription.collectionName;\n  };\n  Cursor.prototype.observe = function (callbacks) {\n    var self = this;\n    return LocalCollection._observeFromObserveChanges(self, callbacks);\n  };\n  Cursor.prototype.observeChanges = function (callbacks) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var self = this;\n    var methods = ['addedAt', 'added', 'changedAt', 'changed', 'removedAt', 'removed', 'movedTo'];\n    var ordered = LocalCollection._observeChangesCallbacksAreOrdered(callbacks);\n    let exceptionName = callbacks._fromObserve ? 'observe' : 'observeChanges';\n    exceptionName += ' callback';\n    methods.forEach(function (method) {\n      if (callbacks[method] && typeof callbacks[method] == \"function\") {\n        callbacks[method] = Meteor.bindEnvironment(callbacks[method], method + exceptionName);\n      }\n    });\n    return self._mongo._observeChanges(self._cursorDescription, ordered, callbacks, options.nonMutatingCallbacks);\n  };\n  MongoConnection.prototype._createSynchronousCursor = function (cursorDescription, options) {\n    var self = this;\n    options = _.pick(options || {}, 'selfForIteration', 'useTransform');\n    var collection = self.rawCollection(cursorDescription.collectionName);\n    var cursorOptions = cursorDescription.options;\n    var mongoOptions = {\n      sort: cursorOptions.sort,\n      limit: cursorOptions.limit,\n      skip: cursorOptions.skip,\n      projection: cursorOptions.fields || cursorOptions.projection,\n      readPreference: cursorOptions.readPreference\n    };\n\n    // Do we want a tailable cursor (which only works on capped collections)?\n    if (cursorOptions.tailable) {\n      mongoOptions.numberOfRetries = -1;\n    }\n    var dbCursor = collection.find(replaceTypes(cursorDescription.selector, replaceMeteorAtomWithMongo), mongoOptions);\n\n    // Do we want a tailable cursor (which only works on capped collections)?\n    if (cursorOptions.tailable) {\n      // We want a tailable cursor...\n      dbCursor.addCursorFlag(\"tailable\", true);\n      // ... and for the server to wait a bit if any getMore has no data (rather\n      // than making us put the relevant sleeps in the client)...\n      dbCursor.addCursorFlag(\"awaitData\", true);\n\n      // And if this is on the oplog collection and the cursor specifies a 'ts',\n      // then set the undocumented oplog replay flag, which does a special scan to\n      // find the first document (instead of creating an index on ts). This is a\n      // very hard-coded Mongo flag which only works on the oplog collection and\n      // only works with the ts field.\n      if (cursorDescription.collectionName === OPLOG_COLLECTION && cursorDescription.selector.ts) {\n        dbCursor.addCursorFlag(\"oplogReplay\", true);\n      }\n    }\n    if (typeof cursorOptions.maxTimeMs !== 'undefined') {\n      dbCursor = dbCursor.maxTimeMS(cursorOptions.maxTimeMs);\n    }\n    if (typeof cursorOptions.hint !== 'undefined') {\n      dbCursor = dbCursor.hint(cursorOptions.hint);\n    }\n    return new SynchronousCursor(dbCursor, cursorDescription, options, collection);\n  };\n  var SynchronousCursor = function (dbCursor, cursorDescription, options, collection) {\n    var self = this;\n    options = _.pick(options || {}, 'selfForIteration', 'useTransform');\n    self._dbCursor = dbCursor;\n    self._cursorDescription = cursorDescription;\n    // The \"self\" argument passed to forEach/map callbacks. If we're wrapped\n    // inside a user-visible Cursor, we want to provide the outer cursor!\n    self._selfForIteration = options.selfForIteration || self;\n    if (options.useTransform && cursorDescription.options.transform) {\n      self._transform = LocalCollection.wrapTransform(cursorDescription.options.transform);\n    } else {\n      self._transform = null;\n    }\n    self._synchronousCount = Future.wrap(collection.countDocuments.bind(collection, replaceTypes(cursorDescription.selector, replaceMeteorAtomWithMongo), replaceTypes(cursorDescription.options, replaceMeteorAtomWithMongo)));\n    self._visitedIds = new LocalCollection._IdMap();\n  };\n  _.extend(SynchronousCursor.prototype, {\n    // Returns a Promise for the next object from the underlying cursor (before\n    // the Mongo->Meteor type replacement).\n    _rawNextObjectPromise: function () {\n      const self = this;\n      return new Promise((resolve, reject) => {\n        self._dbCursor.next((err, doc) => {\n          if (err) {\n            reject(err);\n          } else {\n            resolve(doc);\n          }\n        });\n      });\n    },\n    // Returns a Promise for the next object from the cursor, skipping those whose\n    // IDs we've already seen and replacing Mongo atoms with Meteor atoms.\n    _nextObjectPromise: function () {\n      return Promise.asyncApply(() => {\n        var self = this;\n        while (true) {\n          var doc = Promise.await(self._rawNextObjectPromise());\n          if (!doc) return null;\n          doc = replaceTypes(doc, replaceMongoAtomWithMeteor);\n          if (!self._cursorDescription.options.tailable && _.has(doc, '_id')) {\n            // Did Mongo give us duplicate documents in the same cursor? If so,\n            // ignore this one. (Do this before the transform, since transform might\n            // return some unrelated value.) We don't do this for tailable cursors,\n            // because we want to maintain O(1) memory usage. And if there isn't _id\n            // for some reason (maybe it's the oplog), then we don't do this either.\n            // (Be careful to do this for falsey but existing _id, though.)\n            if (self._visitedIds.has(doc._id)) continue;\n            self._visitedIds.set(doc._id, true);\n          }\n          if (self._transform) doc = self._transform(doc);\n          return doc;\n        }\n      });\n    },\n    // Returns a promise which is resolved with the next object (like with\n    // _nextObjectPromise) or rejected if the cursor doesn't return within\n    // timeoutMS ms.\n    _nextObjectPromiseWithTimeout: function (timeoutMS) {\n      const self = this;\n      if (!timeoutMS) {\n        return self._nextObjectPromise();\n      }\n      const nextObjectPromise = self._nextObjectPromise();\n      const timeoutErr = new Error('Client-side timeout waiting for next object');\n      const timeoutPromise = new Promise((resolve, reject) => {\n        const timer = setTimeout(() => {\n          reject(timeoutErr);\n        }, timeoutMS);\n      });\n      return Promise.race([nextObjectPromise, timeoutPromise]).catch(err => {\n        if (err === timeoutErr) {\n          self.close();\n        }\n        throw err;\n      });\n    },\n    _nextObject: function () {\n      var self = this;\n      return self._nextObjectPromise().await();\n    },\n    forEach: function (callback, thisArg) {\n      var self = this;\n      const wrappedFn = Meteor.wrapFn(callback);\n\n      // Get back to the beginning.\n      self._rewind();\n\n      // We implement the loop ourself instead of using self._dbCursor.each,\n      // because \"each\" will call its callback outside of a fiber which makes it\n      // much more complex to make this function synchronous.\n      var index = 0;\n      while (true) {\n        var doc = self._nextObject();\n        if (!doc) return;\n        wrappedFn.call(thisArg, doc, index++, self._selfForIteration);\n      }\n    },\n    // XXX Allow overlapping callback executions if callback yields.\n    map: function (callback, thisArg) {\n      var self = this;\n      const wrappedFn = Meteor.wrapFn(callback);\n      var res = [];\n      self.forEach(function (doc, index) {\n        res.push(wrappedFn.call(thisArg, doc, index, self._selfForIteration));\n      });\n      return res;\n    },\n    _rewind: function () {\n      var self = this;\n\n      // known to be synchronous\n      self._dbCursor.rewind();\n      self._visitedIds = new LocalCollection._IdMap();\n    },\n    // Mostly usable for tailable cursors.\n    close: function () {\n      var self = this;\n      self._dbCursor.close();\n    },\n    fetch: function () {\n      var self = this;\n      return self.map(_.identity);\n    },\n    count: function () {\n      var self = this;\n      return self._synchronousCount().wait();\n    },\n    // This method is NOT wrapped in Cursor.\n    getRawObjects: function (ordered) {\n      var self = this;\n      if (ordered) {\n        return self.fetch();\n      } else {\n        var results = new LocalCollection._IdMap();\n        self.forEach(function (doc) {\n          results.set(doc._id, doc);\n        });\n        return results;\n      }\n    }\n  });\n  SynchronousCursor.prototype[Symbol.iterator] = function () {\n    var self = this;\n\n    // Get back to the beginning.\n    self._rewind();\n    return {\n      next() {\n        const doc = self._nextObject();\n        return doc ? {\n          value: doc\n        } : {\n          done: true\n        };\n      }\n    };\n  };\n  SynchronousCursor.prototype[Symbol.asyncIterator] = function () {\n    const syncResult = this[Symbol.iterator]();\n    return {\n      next() {\n        return Promise.asyncApply(() => {\n          return Promise.resolve(syncResult.next());\n        });\n      }\n    };\n  };\n\n  // Tails the cursor described by cursorDescription, most likely on the\n  // oplog. Calls docCallback with each document found. Ignores errors and just\n  // restarts the tail on error.\n  //\n  // If timeoutMS is set, then if we don't get a new document every timeoutMS,\n  // kill and restart the cursor. This is primarily a workaround for #8598.\n  MongoConnection.prototype.tail = function (cursorDescription, docCallback, timeoutMS) {\n    var self = this;\n    if (!cursorDescription.options.tailable) throw new Error(\"Can only tail a tailable cursor\");\n    var cursor = self._createSynchronousCursor(cursorDescription);\n    var stopped = false;\n    var lastTS;\n    var loop = function () {\n      var doc = null;\n      while (true) {\n        if (stopped) return;\n        try {\n          doc = cursor._nextObjectPromiseWithTimeout(timeoutMS).await();\n        } catch (err) {\n          // There's no good way to figure out if this was actually an error from\n          // Mongo, or just client-side (including our own timeout error). Ah\n          // well. But either way, we need to retry the cursor (unless the failure\n          // was because the observe got stopped).\n          doc = null;\n        }\n        // Since we awaited a promise above, we need to check again to see if\n        // we've been stopped before calling the callback.\n        if (stopped) return;\n        if (doc) {\n          // If a tailable cursor contains a \"ts\" field, use it to recreate the\n          // cursor on error. (\"ts\" is a standard that Mongo uses internally for\n          // the oplog, and there's a special flag that lets you do binary search\n          // on it instead of needing to use an index.)\n          lastTS = doc.ts;\n          docCallback(doc);\n        } else {\n          var newSelector = _.clone(cursorDescription.selector);\n          if (lastTS) {\n            newSelector.ts = {\n              $gt: lastTS\n            };\n          }\n          cursor = self._createSynchronousCursor(new CursorDescription(cursorDescription.collectionName, newSelector, cursorDescription.options));\n          // Mongo failover takes many seconds.  Retry in a bit.  (Without this\n          // setTimeout, we peg the CPU at 100% and never notice the actual\n          // failover.\n          Meteor.setTimeout(loop, 100);\n          break;\n        }\n      }\n    };\n    Meteor.defer(loop);\n    return {\n      stop: function () {\n        stopped = true;\n        cursor.close();\n      }\n    };\n  };\n  MongoConnection.prototype._observeChanges = function (cursorDescription, ordered, callbacks, nonMutatingCallbacks) {\n    var self = this;\n    if (cursorDescription.options.tailable) {\n      return self._observeChangesTailable(cursorDescription, ordered, callbacks);\n    }\n\n    // You may not filter out _id when observing changes, because the id is a core\n    // part of the observeChanges API.\n    const fieldsOptions = cursorDescription.options.projection || cursorDescription.options.fields;\n    if (fieldsOptions && (fieldsOptions._id === 0 || fieldsOptions._id === false)) {\n      throw Error(\"You may not observe a cursor with {fields: {_id: 0}}\");\n    }\n    var observeKey = EJSON.stringify(_.extend({\n      ordered: ordered\n    }, cursorDescription));\n    var multiplexer, observeDriver;\n    var firstHandle = false;\n\n    // Find a matching ObserveMultiplexer, or create a new one. This next block is\n    // guaranteed to not yield (and it doesn't call anything that can observe a\n    // new query), so no other calls to this function can interleave with it.\n    Meteor._noYieldsAllowed(function () {\n      if (_.has(self._observeMultiplexers, observeKey)) {\n        multiplexer = self._observeMultiplexers[observeKey];\n      } else {\n        firstHandle = true;\n        // Create a new ObserveMultiplexer.\n        multiplexer = new ObserveMultiplexer({\n          ordered: ordered,\n          onStop: function () {\n            delete self._observeMultiplexers[observeKey];\n            observeDriver.stop();\n          }\n        });\n        self._observeMultiplexers[observeKey] = multiplexer;\n      }\n    });\n    var observeHandle = new ObserveHandle(multiplexer, callbacks, nonMutatingCallbacks);\n    if (firstHandle) {\n      var matcher, sorter;\n      var canUseOplog = _.all([function () {\n        // At a bare minimum, using the oplog requires us to have an oplog, to\n        // want unordered callbacks, and to not want a callback on the polls\n        // that won't happen.\n        return self._oplogHandle && !ordered && !callbacks._testOnlyPollCallback;\n      }, function () {\n        // We need to be able to compile the selector. Fall back to polling for\n        // some newfangled $selector that minimongo doesn't support yet.\n        try {\n          matcher = new Minimongo.Matcher(cursorDescription.selector);\n          return true;\n        } catch (e) {\n          // XXX make all compilation errors MinimongoError or something\n          //     so that this doesn't ignore unrelated exceptions\n          return false;\n        }\n      }, function () {\n        // ... and the selector itself needs to support oplog.\n        return OplogObserveDriver.cursorSupported(cursorDescription, matcher);\n      }, function () {\n        // And we need to be able to compile the sort, if any.  eg, can't be\n        // {$natural: 1}.\n        if (!cursorDescription.options.sort) return true;\n        try {\n          sorter = new Minimongo.Sorter(cursorDescription.options.sort);\n          return true;\n        } catch (e) {\n          // XXX make all compilation errors MinimongoError or something\n          //     so that this doesn't ignore unrelated exceptions\n          return false;\n        }\n      }], function (f) {\n        return f();\n      }); // invoke each function\n\n      var driverClass = canUseOplog ? OplogObserveDriver : PollingObserveDriver;\n      observeDriver = new driverClass({\n        cursorDescription: cursorDescription,\n        mongoHandle: self,\n        multiplexer: multiplexer,\n        ordered: ordered,\n        matcher: matcher,\n        // ignored by polling\n        sorter: sorter,\n        // ignored by polling\n        _testOnlyPollCallback: callbacks._testOnlyPollCallback\n      });\n\n      // This field is only set for use in tests.\n      multiplexer._observeDriver = observeDriver;\n    }\n\n    // Blocks until the initial adds have been sent.\n    multiplexer.addHandleAndSendInitialAdds(observeHandle);\n    return observeHandle;\n  };\n\n  // Listen for the invalidation messages that will trigger us to poll the\n  // database for changes. If this selector specifies specific IDs, specify them\n  // here, so that updates to different specific IDs don't cause us to poll.\n  // listenCallback is the same kind of (notification, complete) callback passed\n  // to InvalidationCrossbar.listen.\n\n  listenAll = function (cursorDescription, listenCallback) {\n    var listeners = [];\n    forEachTrigger(cursorDescription, function (trigger) {\n      listeners.push(DDPServer._InvalidationCrossbar.listen(trigger, listenCallback));\n    });\n    return {\n      stop: function () {\n        _.each(listeners, function (listener) {\n          listener.stop();\n        });\n      }\n    };\n  };\n  forEachTrigger = function (cursorDescription, triggerCallback) {\n    var key = {\n      collection: cursorDescription.collectionName\n    };\n    var specificIds = LocalCollection._idsMatchedBySelector(cursorDescription.selector);\n    if (specificIds) {\n      _.each(specificIds, function (id) {\n        triggerCallback(_.extend({\n          id: id\n        }, key));\n      });\n      triggerCallback(_.extend({\n        dropCollection: true,\n        id: null\n      }, key));\n    } else {\n      triggerCallback(key);\n    }\n    // Everyone cares about the database being dropped.\n    triggerCallback({\n      dropDatabase: true\n    });\n  };\n\n  // observeChanges for tailable cursors on capped collections.\n  //\n  // Some differences from normal cursors:\n  //   - Will never produce anything other than 'added' or 'addedBefore'. If you\n  //     do update a document that has already been produced, this will not notice\n  //     it.\n  //   - If you disconnect and reconnect from Mongo, it will essentially restart\n  //     the query, which will lead to duplicate results. This is pretty bad,\n  //     but if you include a field called 'ts' which is inserted as\n  //     new MongoInternals.MongoTimestamp(0, 0) (which is initialized to the\n  //     current Mongo-style timestamp), we'll be able to find the place to\n  //     restart properly. (This field is specifically understood by Mongo with an\n  //     optimization which allows it to find the right place to start without\n  //     an index on ts. It's how the oplog works.)\n  //   - No callbacks are triggered synchronously with the call (there's no\n  //     differentiation between \"initial data\" and \"later changes\"; everything\n  //     that matches the query gets sent asynchronously).\n  //   - De-duplication is not implemented.\n  //   - Does not yet interact with the write fence. Probably, this should work by\n  //     ignoring removes (which don't work on capped collections) and updates\n  //     (which don't affect tailable cursors), and just keeping track of the ID\n  //     of the inserted object, and closing the write fence once you get to that\n  //     ID (or timestamp?).  This doesn't work well if the document doesn't match\n  //     the query, though.  On the other hand, the write fence can close\n  //     immediately if it does not match the query. So if we trust minimongo\n  //     enough to accurately evaluate the query against the write fence, we\n  //     should be able to do this...  Of course, minimongo doesn't even support\n  //     Mongo Timestamps yet.\n  MongoConnection.prototype._observeChangesTailable = function (cursorDescription, ordered, callbacks) {\n    var self = this;\n\n    // Tailable cursors only ever call added/addedBefore callbacks, so it's an\n    // error if you didn't provide them.\n    if (ordered && !callbacks.addedBefore || !ordered && !callbacks.added) {\n      throw new Error(\"Can't observe an \" + (ordered ? \"ordered\" : \"unordered\") + \" tailable cursor without a \" + (ordered ? \"addedBefore\" : \"added\") + \" callback\");\n    }\n    return self.tail(cursorDescription, function (doc) {\n      var id = doc._id;\n      delete doc._id;\n      // The ts is an implementation detail. Hide it.\n      delete doc.ts;\n      if (ordered) {\n        callbacks.addedBefore(id, doc, null);\n      } else {\n        callbacks.added(id, doc);\n      }\n    });\n  };\n\n  // XXX We probably need to find a better way to expose this. Right now\n  // it's only used by tests, but in fact you need it in normal\n  // operation to interact with capped collections.\n  MongoInternals.MongoTimestamp = MongoDB.Timestamp;\n  MongoInternals.Connection = MongoConnection;\n}.call(this, module);","map":{"version":3,"names":["_objectSpread","module1","link","default","v","normalizeProjection","DocFetcher","ASYNC_CURSOR_METHODS","getAsyncMethodName","path","require","util","MongoDB","NpmModuleMongodb","Future","Npm","MongoInternals","NpmModules","mongodb","version","NpmModuleMongodbVersion","module","NpmModule","FILE_ASSET_SUFFIX","ASSETS_FOLDER","APP_FOLDER","replaceNames","filter","thing","_","isArray","map","bind","ret","each","value","key","Timestamp","prototype","clone","makeMongoLegal","name","unmakeMongoLegal","substr","replaceMongoAtomWithMeteor","document","Binary","sub_type","buffer","Uint8Array","ObjectID","Mongo","toHexString","Decimal128","Decimal","toString","size","EJSON","fromJSONValue","undefined","replaceMeteorAtomWithMongo","isBinary","Buffer","from","fromString","_isCustomType","toJSONValue","replaceTypes","atomTransformer","replacedTopLevelAtom","val","valReplaced","MongoConnection","url","options","self","_observeMultiplexers","_onFailoverHook","Hook","userOptions","_connectionOptions","Meteor","settings","packages","mongo","mongoOptions","Object","assign","ignoreUndefined","has","maxPoolSize","entries","endsWith","forEach","optionName","replace","join","Assets","getServerDir","db","_oplogHandle","_docFetcher","client","MongoClient","on","bindEnvironment","event","previousDescription","type","newDescription","callback","oplogUrl","Package","OplogHandle","databaseName","Promise","await","connect","close","Error","oplogHandle","stop","wrap","wait","rawCollection","collectionName","collection","_createCappedCollection","byteSize","maxDocuments","future","createCollection","capped","max","resolver","_maybeBeginWrite","fence","DDPServer","_CurrentWriteFence","get","beginWrite","committed","_onFailover","register","writeCallback","write","refresh","err","result","refreshErr","bindEnvironmentForWrite","_insert","collection_name","sendError","e","_expectedByTest","LocalCollection","_isPlainObject","id","_id","insertOne","safe","then","insertedId","catch","_refresh","selector","refreshKey","specificIds","_idsMatchedBySelector","extend","_remove","deleteMany","deletedCount","transformResult","modifiedCount","numberAffected","_dropCollection","cb","dropCollection","drop","_dropDatabase","dropDatabase","_update","mod","Function","mongoOpts","arrayFilters","upsert","multi","fullResult","mongoSelector","mongoMod","isModify","_isModificationMod","_forbidReplace","knownId","newDoc","_createUpsertDocument","generatedId","simulateUpsertWithInsertedId","error","_returnObject","hasOwnProperty","$setOnInsert","strings","keys","startsWith","updateMethod","length","meteorResult","driverResult","mongoResult","upsertedCount","upsertedId","n","matchedCount","NUM_OPTIMISTIC_TRIES","_isCannotChangeIdError","errmsg","indexOf","mongoOptsForUpdate","mongoOptsForInsert","replacementWithId","tries","doUpdate","method","updateMany","some","replaceOne","doConditionalInsert","wrapAsync","apply","arguments","update","find","Cursor","CursorDescription","findOneAsync","limit","fetchAsync","findOne","fromPromise","createIndexAsync","index","createIndex","countDocuments","args","arg","estimatedDocumentCount","_ensureIndex","_dropIndex","indexName","dropIndex","Collection","_rewriteSelector","cursorDescription","_mongo","_cursorDescription","_synchronousCursor","setupSynchronousCursor","cursor","tailable","_createSynchronousCursor","selfForIteration","useTransform","count","Symbol","iterator","asyncIterator","methodName","methodNameAsync","isCalledFromAsync","resolve","reject","getTransform","transform","_publishCursor","sub","_getCollectionName","observe","callbacks","_observeFromObserveChanges","observeChanges","methods","ordered","_observeChangesCallbacksAreOrdered","exceptionName","_fromObserve","_observeChanges","nonMutatingCallbacks","pick","cursorOptions","sort","skip","projection","fields","readPreference","numberOfRetries","dbCursor","addCursorFlag","OPLOG_COLLECTION","ts","maxTimeMs","maxTimeMS","hint","SynchronousCursor","_dbCursor","_selfForIteration","_transform","wrapTransform","_synchronousCount","_visitedIds","_IdMap","_rawNextObjectPromise","next","doc","_nextObjectPromise","set","_nextObjectPromiseWithTimeout","timeoutMS","nextObjectPromise","timeoutErr","timeoutPromise","timer","setTimeout","race","_nextObject","thisArg","wrappedFn","wrapFn","_rewind","call","res","push","rewind","fetch","identity","getRawObjects","results","done","syncResult","tail","docCallback","stopped","lastTS","loop","newSelector","$gt","defer","_observeChangesTailable","fieldsOptions","observeKey","stringify","multiplexer","observeDriver","firstHandle","_noYieldsAllowed","ObserveMultiplexer","onStop","observeHandle","ObserveHandle","matcher","sorter","canUseOplog","all","_testOnlyPollCallback","Minimongo","Matcher","OplogObserveDriver","cursorSupported","Sorter","f","driverClass","PollingObserveDriver","mongoHandle","_observeDriver","addHandleAndSendInitialAdds","listenAll","listenCallback","listeners","forEachTrigger","trigger","_InvalidationCrossbar","listen","listener","triggerCallback","addedBefore","added","MongoTimestamp","Connection"],"sources":["packages/mongo/mongo_driver.js"],"sourcesContent":["import { normalizeProjection } from \"./mongo_utils\";\n\n/**\n * Provide a synchronous Collection API using fibers, backed by\n * MongoDB.  This is only for use on the server, and mostly identical\n * to the client API.\n *\n * NOTE: the public API methods must be run within a fiber. If you call\n * these outside of a fiber they will explode!\n */\n\nconst path = require(\"path\");\nconst util = require(\"util\");\n\n/** @type {import('mongodb')} */\nvar MongoDB = NpmModuleMongodb;\nvar Future = Npm.require('fibers/future');\nimport { DocFetcher } from \"./doc_fetcher.js\";\nimport {\n  ASYNC_CURSOR_METHODS,\n  getAsyncMethodName\n} from \"meteor/minimongo/constants\";\n\nMongoInternals = {};\n\nMongoInternals.NpmModules = {\n  mongodb: {\n    version: NpmModuleMongodbVersion,\n    module: MongoDB\n  }\n};\n\n// Older version of what is now available via\n// MongoInternals.NpmModules.mongodb.module.  It was never documented, but\n// people do use it.\n// XXX COMPAT WITH 1.0.3.2\nMongoInternals.NpmModule = MongoDB;\n\nconst FILE_ASSET_SUFFIX = 'Asset';\nconst ASSETS_FOLDER = 'assets';\nconst APP_FOLDER = 'app';\n\n// This is used to add or remove EJSON from the beginning of everything nested\n// inside an EJSON custom type. It should only be called on pure JSON!\nvar replaceNames = function (filter, thing) {\n  if (typeof thing === \"object\" && thing !== null) {\n    if (_.isArray(thing)) {\n      return _.map(thing, _.bind(replaceNames, null, filter));\n    }\n    var ret = {};\n    _.each(thing, function (value, key) {\n      ret[filter(key)] = replaceNames(filter, value);\n    });\n    return ret;\n  }\n  return thing;\n};\n\n// Ensure that EJSON.clone keeps a Timestamp as a Timestamp (instead of just\n// doing a structural clone).\n// XXX how ok is this? what if there are multiple copies of MongoDB loaded?\nMongoDB.Timestamp.prototype.clone = function () {\n  // Timestamps should be immutable.\n  return this;\n};\n\nvar makeMongoLegal = function (name) { return \"EJSON\" + name; };\nvar unmakeMongoLegal = function (name) { return name.substr(5); };\n\nvar replaceMongoAtomWithMeteor = function (document) {\n  if (document instanceof MongoDB.Binary) {\n    // for backwards compatibility\n    if (document.sub_type !== 0) {\n      return document;\n    }\n    var buffer = document.value(true);\n    return new Uint8Array(buffer);\n  }\n  if (document instanceof MongoDB.ObjectID) {\n    return new Mongo.ObjectID(document.toHexString());\n  }\n  if (document instanceof MongoDB.Decimal128) {\n    return Decimal(document.toString());\n  }\n  if (document[\"EJSON$type\"] && document[\"EJSON$value\"] && _.size(document) === 2) {\n    return EJSON.fromJSONValue(replaceNames(unmakeMongoLegal, document));\n  }\n  if (document instanceof MongoDB.Timestamp) {\n    // For now, the Meteor representation of a Mongo timestamp type (not a date!\n    // this is a weird internal thing used in the oplog!) is the same as the\n    // Mongo representation. We need to do this explicitly or else we would do a\n    // structural clone and lose the prototype.\n    return document;\n  }\n  return undefined;\n};\n\nvar replaceMeteorAtomWithMongo = function (document) {\n  if (EJSON.isBinary(document)) {\n    // This does more copies than we'd like, but is necessary because\n    // MongoDB.BSON only looks like it takes a Uint8Array (and doesn't actually\n    // serialize it correctly).\n    return new MongoDB.Binary(Buffer.from(document));\n  }\n  if (document instanceof MongoDB.Binary) {\n     return document;\n  }\n  if (document instanceof Mongo.ObjectID) {\n    return new MongoDB.ObjectID(document.toHexString());\n  }\n  if (document instanceof MongoDB.Timestamp) {\n    // For now, the Meteor representation of a Mongo timestamp type (not a date!\n    // this is a weird internal thing used in the oplog!) is the same as the\n    // Mongo representation. We need to do this explicitly or else we would do a\n    // structural clone and lose the prototype.\n    return document;\n  }\n  if (document instanceof Decimal) {\n    return MongoDB.Decimal128.fromString(document.toString());\n  }\n  if (EJSON._isCustomType(document)) {\n    return replaceNames(makeMongoLegal, EJSON.toJSONValue(document));\n  }\n  // It is not ordinarily possible to stick dollar-sign keys into mongo\n  // so we don't bother checking for things that need escaping at this time.\n  return undefined;\n};\n\nvar replaceTypes = function (document, atomTransformer) {\n  if (typeof document !== 'object' || document === null)\n    return document;\n\n  var replacedTopLevelAtom = atomTransformer(document);\n  if (replacedTopLevelAtom !== undefined)\n    return replacedTopLevelAtom;\n\n  var ret = document;\n  _.each(document, function (val, key) {\n    var valReplaced = replaceTypes(val, atomTransformer);\n    if (val !== valReplaced) {\n      // Lazy clone. Shallow copy.\n      if (ret === document)\n        ret = _.clone(document);\n      ret[key] = valReplaced;\n    }\n  });\n  return ret;\n};\n\n\nMongoConnection = function (url, options) {\n  var self = this;\n  options = options || {};\n  self._observeMultiplexers = {};\n  self._onFailoverHook = new Hook;\n\n  const userOptions = {\n    ...(Mongo._connectionOptions || {}),\n    ...(Meteor.settings?.packages?.mongo?.options || {})\n  };\n\n  var mongoOptions = Object.assign({\n    ignoreUndefined: true,\n  }, userOptions);\n\n\n\n  // Internally the oplog connections specify their own maxPoolSize\n  // which we don't want to overwrite with any user defined value\n  if (_.has(options, 'maxPoolSize')) {\n    // If we just set this for \"server\", replSet will override it. If we just\n    // set it for replSet, it will be ignored if we're not using a replSet.\n    mongoOptions.maxPoolSize = options.maxPoolSize;\n  }\n\n  // Transform options like \"tlsCAFileAsset\": \"filename.pem\" into\n  // \"tlsCAFile\": \"/<fullpath>/filename.pem\"\n  Object.entries(mongoOptions || {})\n    .filter(([key]) => key && key.endsWith(FILE_ASSET_SUFFIX))\n    .forEach(([key, value]) => {\n      const optionName = key.replace(FILE_ASSET_SUFFIX, '');\n      mongoOptions[optionName] = path.join(Assets.getServerDir(),\n        ASSETS_FOLDER, APP_FOLDER, value);\n      delete mongoOptions[key];\n    });\n\n  self.db = null;\n  self._oplogHandle = null;\n  self._docFetcher = null;\n\n  self.client = new MongoDB.MongoClient(url, mongoOptions);\n  self.db = self.client.db();\n\n  self.client.on('serverDescriptionChanged', Meteor.bindEnvironment(event => {\n    // When the connection is no longer against the primary node, execute all\n    // failover hooks. This is important for the driver as it has to re-pool the\n    // query when it happens.\n    if (\n      event.previousDescription.type !== 'RSPrimary' &&\n      event.newDescription.type === 'RSPrimary'\n    ) {\n      self._onFailoverHook.each(callback => {\n        callback();\n        return true;\n      });\n    }\n  }));\n\n  if (options.oplogUrl && ! Package['disable-oplog']) {\n    self._oplogHandle = new OplogHandle(options.oplogUrl, self.db.databaseName);\n    self._docFetcher = new DocFetcher(self);\n  }\n  Promise.await(self.client.connect())\n};\n\nMongoConnection.prototype.close = function() {\n  var self = this;\n\n  if (! self.db)\n    throw Error(\"close called before Connection created?\");\n\n  // XXX probably untested\n  var oplogHandle = self._oplogHandle;\n  self._oplogHandle = null;\n  if (oplogHandle)\n    oplogHandle.stop();\n\n  // Use Future.wrap so that errors get thrown. This happens to\n  // work even outside a fiber since the 'close' method is not\n  // actually asynchronous.\n  Future.wrap(_.bind(self.client.close, self.client))(true).wait();\n};\n\n// Returns the Mongo Collection object; may yield.\nMongoConnection.prototype.rawCollection = function (collectionName) {\n  var self = this;\n\n  if (! self.db)\n    throw Error(\"rawCollection called before Connection created?\");\n\n  return self.db.collection(collectionName);\n};\n\nMongoConnection.prototype._createCappedCollection = function (\n    collectionName, byteSize, maxDocuments) {\n  var self = this;\n\n  if (! self.db)\n    throw Error(\"_createCappedCollection called before Connection created?\");\n\n\n  var future = new Future();\n  self.db.createCollection(\n    collectionName,\n    { capped: true, size: byteSize, max: maxDocuments },\n    future.resolver());\n  future.wait();\n};\n\n// This should be called synchronously with a write, to create a\n// transaction on the current write fence, if any. After we can read\n// the write, and after observers have been notified (or at least,\n// after the observer notifiers have added themselves to the write\n// fence), you should call 'committed()' on the object returned.\nMongoConnection.prototype._maybeBeginWrite = function () {\n  var fence = DDPServer._CurrentWriteFence.get();\n  if (fence) {\n    return fence.beginWrite();\n  } else {\n    return {committed: function () {}};\n  }\n};\n\n// Internal interface: adds a callback which is called when the Mongo primary\n// changes. Returns a stop handle.\nMongoConnection.prototype._onFailover = function (callback) {\n  return this._onFailoverHook.register(callback);\n};\n\n\n//////////// Public API //////////\n\n// The write methods block until the database has confirmed the write (it may\n// not be replicated or stable on disk, but one server has confirmed it) if no\n// callback is provided. If a callback is provided, then they call the callback\n// when the write is confirmed. They return nothing on success, and raise an\n// exception on failure.\n//\n// After making a write (with insert, update, remove), observers are\n// notified asynchronously. If you want to receive a callback once all\n// of the observer notifications have landed for your write, do the\n// writes inside a write fence (set DDPServer._CurrentWriteFence to a new\n// _WriteFence, and then set a callback on the write fence.)\n//\n// Since our execution environment is single-threaded, this is\n// well-defined -- a write \"has been made\" if it's returned, and an\n// observer \"has been notified\" if its callback has returned.\n\nvar writeCallback = function (write, refresh, callback) {\n  return function (err, result) {\n    if (! err) {\n      // XXX We don't have to run this on error, right?\n      try {\n        refresh();\n      } catch (refreshErr) {\n        if (callback) {\n          callback(refreshErr);\n          return;\n        } else {\n          throw refreshErr;\n        }\n      }\n    }\n    write.committed();\n    if (callback) {\n      callback(err, result);\n    } else if (err) {\n      throw err;\n    }\n  };\n};\n\nvar bindEnvironmentForWrite = function (callback) {\n  return Meteor.bindEnvironment(callback, \"Mongo write\");\n};\n\nMongoConnection.prototype._insert = function (collection_name, document,\n                                              callback) {\n  var self = this;\n\n  var sendError = function (e) {\n    if (callback)\n      return callback(e);\n    throw e;\n  };\n\n  if (collection_name === \"___meteor_failure_test_collection\") {\n    var e = new Error(\"Failure test\");\n    e._expectedByTest = true;\n    sendError(e);\n    return;\n  }\n\n  if (!(LocalCollection._isPlainObject(document) &&\n        !EJSON._isCustomType(document))) {\n    sendError(new Error(\n      \"Only plain objects may be inserted into MongoDB\"));\n    return;\n  }\n\n  var write = self._maybeBeginWrite();\n  var refresh = function () {\n    Meteor.refresh({collection: collection_name, id: document._id });\n  };\n  callback = bindEnvironmentForWrite(writeCallback(write, refresh, callback));\n  try {\n    var collection = self.rawCollection(collection_name);\n    collection.insertOne(\n      replaceTypes(document, replaceMeteorAtomWithMongo),\n      {\n        safe: true,\n      }\n    ).then(({insertedId}) => {\n      callback(null, insertedId);\n    }).catch((e) => {\n      callback(e, null)\n    });\n  } catch (err) {\n    write.committed();\n    throw err;\n  }\n};\n\n// Cause queries that may be affected by the selector to poll in this write\n// fence.\nMongoConnection.prototype._refresh = function (collectionName, selector) {\n  var refreshKey = {collection: collectionName};\n  // If we know which documents we're removing, don't poll queries that are\n  // specific to other documents. (Note that multiple notifications here should\n  // not cause multiple polls, since all our listener is doing is enqueueing a\n  // poll.)\n  var specificIds = LocalCollection._idsMatchedBySelector(selector);\n  if (specificIds) {\n    _.each(specificIds, function (id) {\n      Meteor.refresh(_.extend({id: id}, refreshKey));\n    });\n  } else {\n    Meteor.refresh(refreshKey);\n  }\n};\n\nMongoConnection.prototype._remove = function (collection_name, selector,\n                                              callback) {\n  var self = this;\n\n  if (collection_name === \"___meteor_failure_test_collection\") {\n    var e = new Error(\"Failure test\");\n    e._expectedByTest = true;\n    if (callback) {\n      return callback(e);\n    } else {\n      throw e;\n    }\n  }\n\n  var write = self._maybeBeginWrite();\n  var refresh = function () {\n    self._refresh(collection_name, selector);\n  };\n  callback = bindEnvironmentForWrite(writeCallback(write, refresh, callback));\n\n  try {\n    var collection = self.rawCollection(collection_name);\n    collection\n      .deleteMany(replaceTypes(selector, replaceMeteorAtomWithMongo), {\n        safe: true,\n      })\n      .then(({ deletedCount }) => {\n        callback(null, transformResult({ result : {modifiedCount : deletedCount} }).numberAffected);\n      }).catch((err) => {\n      callback(err);\n    });\n  } catch (err) {\n    write.committed();\n    throw err;\n  }\n};\n\nMongoConnection.prototype._dropCollection = function (collectionName, cb) {\n  var self = this;\n\n\n  var write = self._maybeBeginWrite();\n  var refresh = function () {\n    Meteor.refresh({collection: collectionName, id: null,\n                    dropCollection: true});\n  };\n\n\n  cb = bindEnvironmentForWrite(writeCallback(write, refresh, cb));\n\n  try {\n    var collection = self.rawCollection(collectionName);\n    collection.drop(cb);\n  } catch (e) {\n    write.committed();\n    throw e;\n  }\n};\n\n// For testing only.  Slightly better than `c.rawDatabase().dropDatabase()`\n// because it lets the test's fence wait for it to be complete.\nMongoConnection.prototype._dropDatabase = function (cb) {\n  var self = this;\n\n  var write = self._maybeBeginWrite();\n  var refresh = function () {\n    Meteor.refresh({ dropDatabase: true });\n  };\n  cb = bindEnvironmentForWrite(writeCallback(write, refresh, cb));\n\n  try {\n    self.db.dropDatabase(cb);\n  } catch (e) {\n    write.committed();\n    throw e;\n  }\n};\n\nMongoConnection.prototype._update = function (collection_name, selector, mod,\n                                              options, callback) {\n  var self = this;\n\n\n\n  if (! callback && options instanceof Function) {\n    callback = options;\n    options = null;\n  }\n\n  if (collection_name === \"___meteor_failure_test_collection\") {\n    var e = new Error(\"Failure test\");\n    e._expectedByTest = true;\n    if (callback) {\n      return callback(e);\n    } else {\n      throw e;\n    }\n  }\n\n  // explicit safety check. null and undefined can crash the mongo\n  // driver. Although the node driver and minimongo do 'support'\n  // non-object modifier in that they don't crash, they are not\n  // meaningful operations and do not do anything. Defensively throw an\n  // error here.\n  if (!mod || typeof mod !== 'object')\n    throw new Error(\"Invalid modifier. Modifier must be an object.\");\n\n  if (!(LocalCollection._isPlainObject(mod) &&\n        !EJSON._isCustomType(mod))) {\n    throw new Error(\n      \"Only plain objects may be used as replacement\" +\n        \" documents in MongoDB\");\n  }\n\n  if (!options) options = {};\n\n  var write = self._maybeBeginWrite();\n  var refresh = function () {\n    self._refresh(collection_name, selector);\n  };\n  callback = writeCallback(write, refresh, callback);\n  try {\n    var collection = self.rawCollection(collection_name);\n    var mongoOpts = {safe: true};\n    // Add support for filtered positional operator\n    if (options.arrayFilters !== undefined) mongoOpts.arrayFilters = options.arrayFilters;\n    // explictly enumerate options that minimongo supports\n    if (options.upsert) mongoOpts.upsert = true;\n    if (options.multi) mongoOpts.multi = true;\n    // Lets you get a more more full result from MongoDB. Use with caution:\n    // might not work with C.upsert (as opposed to C.update({upsert:true}) or\n    // with simulated upsert.\n    if (options.fullResult) mongoOpts.fullResult = true;\n\n    var mongoSelector = replaceTypes(selector, replaceMeteorAtomWithMongo);\n    var mongoMod = replaceTypes(mod, replaceMeteorAtomWithMongo);\n\n    var isModify = LocalCollection._isModificationMod(mongoMod);\n\n    if (options._forbidReplace && !isModify) {\n      var err = new Error(\"Invalid modifier. Replacements are forbidden.\");\n      if (callback) {\n        return callback(err);\n      } else {\n        throw err;\n      }\n    }\n\n    // We've already run replaceTypes/replaceMeteorAtomWithMongo on\n    // selector and mod.  We assume it doesn't matter, as far as\n    // the behavior of modifiers is concerned, whether `_modify`\n    // is run on EJSON or on mongo-converted EJSON.\n\n    // Run this code up front so that it fails fast if someone uses\n    // a Mongo update operator we don't support.\n    let knownId;\n    if (options.upsert) {\n      try {\n        let newDoc = LocalCollection._createUpsertDocument(selector, mod);\n        knownId = newDoc._id;\n      } catch (err) {\n        if (callback) {\n          return callback(err);\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    if (options.upsert &&\n        ! isModify &&\n        ! knownId &&\n        options.insertedId &&\n        ! (options.insertedId instanceof Mongo.ObjectID &&\n           options.generatedId)) {\n      // In case of an upsert with a replacement, where there is no _id defined\n      // in either the query or the replacement doc, mongo will generate an id itself.\n      // Therefore we need this special strategy if we want to control the id ourselves.\n\n      // We don't need to do this when:\n      // - This is not a replacement, so we can add an _id to $setOnInsert\n      // - The id is defined by query or mod we can just add it to the replacement doc\n      // - The user did not specify any id preference and the id is a Mongo ObjectId,\n      //     then we can just let Mongo generate the id\n\n      simulateUpsertWithInsertedId(\n        collection, mongoSelector, mongoMod, options,\n        // This callback does not need to be bindEnvironment'ed because\n        // simulateUpsertWithInsertedId() wraps it and then passes it through\n        // bindEnvironmentForWrite.\n        function (error, result) {\n          // If we got here via a upsert() call, then options._returnObject will\n          // be set and we should return the whole object. Otherwise, we should\n          // just return the number of affected docs to match the mongo API.\n          if (result && ! options._returnObject) {\n            callback(error, result.numberAffected);\n          } else {\n            callback(error, result);\n          }\n        }\n      );\n    } else {\n\n      if (options.upsert && !knownId && options.insertedId && isModify) {\n        if (!mongoMod.hasOwnProperty('$setOnInsert')) {\n          mongoMod.$setOnInsert = {};\n        }\n        knownId = options.insertedId;\n        Object.assign(mongoMod.$setOnInsert, replaceTypes({_id: options.insertedId}, replaceMeteorAtomWithMongo));\n      }\n\n      const strings = Object.keys(mongoMod).filter((key) => !key.startsWith(\"$\"));\n      let updateMethod = strings.length > 0 ? 'replaceOne' : 'updateMany';\n      updateMethod =\n        updateMethod === 'updateMany' && !mongoOpts.multi\n          ? 'updateOne'\n          : updateMethod;\n      collection[updateMethod].bind(collection)(\n        mongoSelector, mongoMod, mongoOpts,\n          // mongo driver now returns undefined for err in the callback\n          bindEnvironmentForWrite(function (err = null, result) {\n          if (! err) {\n            var meteorResult = transformResult({result});\n            if (meteorResult && options._returnObject) {\n              // If this was an upsert() call, and we ended up\n              // inserting a new doc and we know its id, then\n              // return that id as well.\n              if (options.upsert && meteorResult.insertedId) {\n                if (knownId) {\n                  meteorResult.insertedId = knownId;\n                } else if (meteorResult.insertedId instanceof MongoDB.ObjectID) {\n                  meteorResult.insertedId = new Mongo.ObjectID(meteorResult.insertedId.toHexString());\n                }\n              }\n\n              callback(err, meteorResult);\n            } else {\n              callback(err, meteorResult.numberAffected);\n            }\n          } else {\n            callback(err);\n          }\n        }));\n    }\n  } catch (e) {\n    write.committed();\n    throw e;\n  }\n};\n\nvar transformResult = function (driverResult) {\n  var meteorResult = { numberAffected: 0 };\n  if (driverResult) {\n    var mongoResult = driverResult.result;\n    // On updates with upsert:true, the inserted values come as a list of\n    // upserted values -- even with options.multi, when the upsert does insert,\n    // it only inserts one element.\n    if (mongoResult.upsertedCount) {\n      meteorResult.numberAffected = mongoResult.upsertedCount;\n\n      if (mongoResult.upsertedId) {\n        meteorResult.insertedId = mongoResult.upsertedId;\n      }\n    } else {\n      // n was used before Mongo 5.0, in Mongo 5.0 we are not receiving this n\n      // field and so we are using modifiedCount instead\n      meteorResult.numberAffected = mongoResult.n || mongoResult.matchedCount || mongoResult.modifiedCount;\n    }\n  }\n\n  return meteorResult;\n};\n\n\nvar NUM_OPTIMISTIC_TRIES = 3;\n\n// exposed for testing\nMongoConnection._isCannotChangeIdError = function (err) {\n\n  // Mongo 3.2.* returns error as next Object:\n  // {name: String, code: Number, errmsg: String}\n  // Older Mongo returns:\n  // {name: String, code: Number, err: String}\n  var error = err.errmsg || err.err;\n\n  // We don't use the error code here\n  // because the error code we observed it producing (16837) appears to be\n  // a far more generic error code based on examining the source.\n  if (error.indexOf('The _id field cannot be changed') === 0\n    || error.indexOf(\"the (immutable) field '_id' was found to have been altered to _id\") !== -1) {\n    return true;\n  }\n\n  return false;\n};\n\nvar simulateUpsertWithInsertedId = function (collection, selector, mod,\n                                             options, callback) {\n  // STRATEGY: First try doing an upsert with a generated ID.\n  // If this throws an error about changing the ID on an existing document\n  // then without affecting the database, we know we should probably try\n  // an update without the generated ID. If it affected 0 documents,\n  // then without affecting the database, we the document that first\n  // gave the error is probably removed and we need to try an insert again\n  // We go back to step one and repeat.\n  // Like all \"optimistic write\" schemes, we rely on the fact that it's\n  // unlikely our writes will continue to be interfered with under normal\n  // circumstances (though sufficiently heavy contention with writers\n  // disagreeing on the existence of an object will cause writes to fail\n  // in theory).\n\n  var insertedId = options.insertedId; // must exist\n  var mongoOptsForUpdate = {\n    safe: true,\n    multi: options.multi\n  };\n  var mongoOptsForInsert = {\n    safe: true,\n    upsert: true\n  };\n\n  var replacementWithId = Object.assign(\n    replaceTypes({_id: insertedId}, replaceMeteorAtomWithMongo),\n    mod);\n\n  var tries = NUM_OPTIMISTIC_TRIES;\n\n  var doUpdate = function () {\n    tries--;\n    if (! tries) {\n      callback(new Error(\"Upsert failed after \" + NUM_OPTIMISTIC_TRIES + \" tries.\"));\n    } else {\n      let method = collection.updateMany;\n      if(!Object.keys(mod).some(key => key.startsWith(\"$\"))){\n        method = collection.replaceOne.bind(collection);\n      }\n      method(\n        selector,\n        mod,\n        mongoOptsForUpdate,\n        bindEnvironmentForWrite(function(err, result) {\n          if (err) {\n            callback(err);\n          } else if (result && (result.modifiedCount || result.upsertedCount)) {\n            callback(null, {\n              numberAffected: result.modifiedCount || result.upsertedCount,\n              insertedId: result.upsertedId || undefined,\n            });\n          } else {\n            doConditionalInsert();\n          }\n        })\n      );\n    }\n  };\n\n  var doConditionalInsert = function() {\n    collection.replaceOne(\n      selector,\n      replacementWithId,\n      mongoOptsForInsert,\n      bindEnvironmentForWrite(function(err, result) {\n        if (err) {\n          // figure out if this is a\n          // \"cannot change _id of document\" error, and\n          // if so, try doUpdate() again, up to 3 times.\n          if (MongoConnection._isCannotChangeIdError(err)) {\n            doUpdate();\n          } else {\n            callback(err);\n          }\n        } else {\n          callback(null, {\n            numberAffected: result.upsertedCount,\n            insertedId: result.upsertedId,\n          });\n        }\n      })\n    );\n  };\n\n  doUpdate();\n};\n\n_.each([\"insert\", \"update\", \"remove\", \"dropCollection\", \"dropDatabase\"], function (method) {\n  MongoConnection.prototype[method] = function (/* arguments */) {\n    var self = this;\n    return Meteor.wrapAsync(self[\"_\" + method]).apply(self, arguments);\n  };\n});\n\n// XXX MongoConnection.upsert() does not return the id of the inserted document\n// unless you set it explicitly in the selector or modifier (as a replacement\n// doc).\nMongoConnection.prototype.upsert = function (collectionName, selector, mod,\n                                             options, callback) {\n  var self = this;\n\n\n  \n  if (typeof options === \"function\" && ! callback) {\n    callback = options;\n    options = {};\n  }\n\n  return self.update(collectionName, selector, mod,\n                     _.extend({}, options, {\n                       upsert: true,\n                       _returnObject: true\n                     }), callback);\n};\n\nMongoConnection.prototype.find = function (collectionName, selector, options) {\n  var self = this;\n\n  if (arguments.length === 1)\n    selector = {};\n\n  return new Cursor(\n    self, new CursorDescription(collectionName, selector, options));\n};\n\nMongoConnection.prototype.findOneAsync = async function (collection_name, selector,\n                                               options) {\n  var self = this;\n  if (arguments.length === 1)\n    selector = {};\n\n  options = options || {};\n  options.limit = 1;\n  return (await self.find(collection_name, selector, options).fetchAsync())[0];\n};\n\nMongoConnection.prototype.findOne = function (collection_name, selector,\n                                              options) {\n  var self = this;\n\n  return Future.fromPromise(self.findOneAsync(collection_name, selector, options)).wait();\n};\n\nMongoConnection.prototype.createIndexAsync = function (collectionName, index,\n                                                  options) {\n  var self = this;\n\n  // We expect this function to be called at startup, not from within a method,\n  // so we don't interact with the write fence.\n  var collection = self.rawCollection(collectionName);\n  return collection.createIndex(index, options);\n};\n\n// We'll actually design an index API later. For now, we just pass through to\n// Mongo's, but make it synchronous.\nMongoConnection.prototype.createIndex = function (collectionName, index,\n                                                   options) {\n  var self = this;\n  \n\n  return Future.fromPromise(self.createIndexAsync(collectionName, index, options));\n};\n\nMongoConnection.prototype.countDocuments = function (collectionName, ...args) {\n  args = args.map(arg => replaceTypes(arg, replaceMeteorAtomWithMongo));\n  const collection = this.rawCollection(collectionName);\n  return collection.countDocuments(...args);\n};\n\nMongoConnection.prototype.estimatedDocumentCount = function (collectionName, ...args) {\n  args = args.map(arg => replaceTypes(arg, replaceMeteorAtomWithMongo));\n  const collection = this.rawCollection(collectionName);\n  return collection.estimatedDocumentCount(...args);\n};\n\nMongoConnection.prototype._ensureIndex = MongoConnection.prototype.createIndex;\n\nMongoConnection.prototype._dropIndex = function (collectionName, index) {\n  var self = this;\n\n  \n  // This function is only used by test code, not within a method, so we don't\n  // interact with the write fence.\n  var collection = self.rawCollection(collectionName);\n  var future = new Future;\n  var indexName = collection.dropIndex(index, future.resolver());\n  future.wait();\n};\n\n// CURSORS\n\n// There are several classes which relate to cursors:\n//\n// CursorDescription represents the arguments used to construct a cursor:\n// collectionName, selector, and (find) options.  Because it is used as a key\n// for cursor de-dup, everything in it should either be JSON-stringifiable or\n// not affect observeChanges output (eg, options.transform functions are not\n// stringifiable but do not affect observeChanges).\n//\n// SynchronousCursor is a wrapper around a MongoDB cursor\n// which includes fully-synchronous versions of forEach, etc.\n//\n// Cursor is the cursor object returned from find(), which implements the\n// documented Mongo.Collection cursor API.  It wraps a CursorDescription and a\n// SynchronousCursor (lazily: it doesn't contact Mongo until you call a method\n// like fetch or forEach on it).\n//\n// ObserveHandle is the \"observe handle\" returned from observeChanges. It has a\n// reference to an ObserveMultiplexer.\n//\n// ObserveMultiplexer allows multiple identical ObserveHandles to be driven by a\n// single observe driver.\n//\n// There are two \"observe drivers\" which drive ObserveMultiplexers:\n//   - PollingObserveDriver caches the results of a query and reruns it when\n//     necessary.\n//   - OplogObserveDriver follows the Mongo operation log to directly observe\n//     database changes.\n// Both implementations follow the same simple interface: when you create them,\n// they start sending observeChanges callbacks (and a ready() invocation) to\n// their ObserveMultiplexer, and you stop them by calling their stop() method.\n\nCursorDescription = function (collectionName, selector, options) {\n  var self = this;\n  self.collectionName = collectionName;\n  self.selector = Mongo.Collection._rewriteSelector(selector);\n  self.options = options || {};\n};\n\nCursor = function (mongo, cursorDescription) {\n  var self = this;\n\n  self._mongo = mongo;\n  self._cursorDescription = cursorDescription;\n  self._synchronousCursor = null;\n};\n\nfunction setupSynchronousCursor(cursor, method) {\n  // You can only observe a tailable cursor.\n  if (cursor._cursorDescription.options.tailable)\n    throw new Error('Cannot call ' + method + ' on a tailable cursor');\n\n  if (!cursor._synchronousCursor) {\n    cursor._synchronousCursor = cursor._mongo._createSynchronousCursor(\n      cursor._cursorDescription,\n      {\n        // Make sure that the \"cursor\" argument to forEach/map callbacks is the\n        // Cursor, not the SynchronousCursor.\n        selfForIteration: cursor,\n        useTransform: true,\n      }\n    );\n  }\n\n  return cursor._synchronousCursor;\n}\n\n\nCursor.prototype.count = function () {\n\n  const collection = this._mongo.rawCollection(this._cursorDescription.collectionName);\n  return Promise.await(collection.countDocuments(\n    replaceTypes(this._cursorDescription.selector, replaceMeteorAtomWithMongo),\n    replaceTypes(this._cursorDescription.options, replaceMeteorAtomWithMongo),\n  ));\n};\n\n[...ASYNC_CURSOR_METHODS, Symbol.iterator, Symbol.asyncIterator].forEach(methodName => {\n  // count is handled specially since we don't want to create a cursor.\n  // it is still included in ASYNC_CURSOR_METHODS because we still want an async version of it to exist.\n  if (methodName !== 'count') {\n    Cursor.prototype[methodName] = function (...args) {\n      const cursor = setupSynchronousCursor(this, methodName);\n      return cursor[methodName](...args);\n    };\n  }\n\n  // These methods are handled separately.\n  if (methodName === Symbol.iterator || methodName === Symbol.asyncIterator) {\n    return;\n  }\n\n  const methodNameAsync = getAsyncMethodName(methodName);\n  Cursor.prototype[methodNameAsync] = function (...args) {\n    try {\n      this[methodName].isCalledFromAsync = true;\n      return Promise.resolve(this[methodName](...args));\n    } catch (error) {\n      return Promise.reject(error);\n    }\n  };\n});\n\nCursor.prototype.getTransform = function () {\n  return this._cursorDescription.options.transform;\n};\n\n// When you call Meteor.publish() with a function that returns a Cursor, we need\n// to transmute it into the equivalent subscription.  This is the function that\n// does that.\n\nCursor.prototype._publishCursor = function (sub) {\n  var self = this;\n  var collection = self._cursorDescription.collectionName;\n  return Mongo.Collection._publishCursor(self, sub, collection);\n};\n\n// Used to guarantee that publish functions return at most one cursor per\n// collection. Private, because we might later have cursors that include\n// documents from multiple collections somehow.\nCursor.prototype._getCollectionName = function () {\n  var self = this;\n  return self._cursorDescription.collectionName;\n};\n\nCursor.prototype.observe = function (callbacks) {\n  var self = this;\n  return LocalCollection._observeFromObserveChanges(self, callbacks);\n};\n\nCursor.prototype.observeChanges = function (callbacks, options = {}) {\n  var self = this;\n  var methods = [\n    'addedAt',\n    'added',\n    'changedAt',\n    'changed',\n    'removedAt',\n    'removed',\n    'movedTo'\n  ];\n  var ordered = LocalCollection._observeChangesCallbacksAreOrdered(callbacks);\n\n  let exceptionName = callbacks._fromObserve ? 'observe' : 'observeChanges';\n  exceptionName += ' callback';\n  methods.forEach(function (method) {\n    if (callbacks[method] && typeof callbacks[method] == \"function\") {\n      callbacks[method] = Meteor.bindEnvironment(callbacks[method], method + exceptionName);\n    }\n  });\n\n  return self._mongo._observeChanges(\n    self._cursorDescription, ordered, callbacks, options.nonMutatingCallbacks);\n};\n\nMongoConnection.prototype._createSynchronousCursor = function(\n    cursorDescription, options) {\n  var self = this;\n  options = _.pick(options || {}, 'selfForIteration', 'useTransform');\n\n  var collection = self.rawCollection(cursorDescription.collectionName);\n  var cursorOptions = cursorDescription.options;\n  var mongoOptions = {\n    sort: cursorOptions.sort,\n    limit: cursorOptions.limit,\n    skip: cursorOptions.skip,\n    projection: cursorOptions.fields || cursorOptions.projection,\n    readPreference: cursorOptions.readPreference,\n  };\n\n  // Do we want a tailable cursor (which only works on capped collections)?\n  if (cursorOptions.tailable) {\n    mongoOptions.numberOfRetries = -1;\n  }\n\n  var dbCursor = collection.find(\n    replaceTypes(cursorDescription.selector, replaceMeteorAtomWithMongo),\n    mongoOptions);\n\n  // Do we want a tailable cursor (which only works on capped collections)?\n  if (cursorOptions.tailable) {\n    // We want a tailable cursor...\n    dbCursor.addCursorFlag(\"tailable\", true)\n    // ... and for the server to wait a bit if any getMore has no data (rather\n    // than making us put the relevant sleeps in the client)...\n    dbCursor.addCursorFlag(\"awaitData\", true)\n\n    // And if this is on the oplog collection and the cursor specifies a 'ts',\n    // then set the undocumented oplog replay flag, which does a special scan to\n    // find the first document (instead of creating an index on ts). This is a\n    // very hard-coded Mongo flag which only works on the oplog collection and\n    // only works with the ts field.\n    if (cursorDescription.collectionName === OPLOG_COLLECTION &&\n        cursorDescription.selector.ts) {\n      dbCursor.addCursorFlag(\"oplogReplay\", true)\n    }\n  }\n\n  if (typeof cursorOptions.maxTimeMs !== 'undefined') {\n    dbCursor = dbCursor.maxTimeMS(cursorOptions.maxTimeMs);\n  }\n  if (typeof cursorOptions.hint !== 'undefined') {\n    dbCursor = dbCursor.hint(cursorOptions.hint);\n  }\n\n  return new SynchronousCursor(dbCursor, cursorDescription, options, collection);\n};\n\nvar SynchronousCursor = function (dbCursor, cursorDescription, options, collection) {\n  var self = this;\n  options = _.pick(options || {}, 'selfForIteration', 'useTransform');\n\n  self._dbCursor = dbCursor;\n  self._cursorDescription = cursorDescription;\n  // The \"self\" argument passed to forEach/map callbacks. If we're wrapped\n  // inside a user-visible Cursor, we want to provide the outer cursor!\n  self._selfForIteration = options.selfForIteration || self;\n  if (options.useTransform && cursorDescription.options.transform) {\n    self._transform = LocalCollection.wrapTransform(\n      cursorDescription.options.transform);\n  } else {\n    self._transform = null;\n  }\n\n  self._synchronousCount = Future.wrap(\n    collection.countDocuments.bind(\n      collection,\n      replaceTypes(cursorDescription.selector, replaceMeteorAtomWithMongo),\n      replaceTypes(cursorDescription.options, replaceMeteorAtomWithMongo),\n    )\n  );\n  self._visitedIds = new LocalCollection._IdMap;\n};\n\n_.extend(SynchronousCursor.prototype, {\n  // Returns a Promise for the next object from the underlying cursor (before\n  // the Mongo->Meteor type replacement).\n  _rawNextObjectPromise: function () {\n    const self = this;\n    return new Promise((resolve, reject) => {\n      self._dbCursor.next((err, doc) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(doc);\n        }\n      });\n    });\n  },\n\n  // Returns a Promise for the next object from the cursor, skipping those whose\n  // IDs we've already seen and replacing Mongo atoms with Meteor atoms.\n  _nextObjectPromise: async function () {\n    var self = this;\n\n    while (true) {\n      var doc = await self._rawNextObjectPromise();\n\n      if (!doc) return null;\n      doc = replaceTypes(doc, replaceMongoAtomWithMeteor);\n\n      if (!self._cursorDescription.options.tailable && _.has(doc, '_id')) {\n        // Did Mongo give us duplicate documents in the same cursor? If so,\n        // ignore this one. (Do this before the transform, since transform might\n        // return some unrelated value.) We don't do this for tailable cursors,\n        // because we want to maintain O(1) memory usage. And if there isn't _id\n        // for some reason (maybe it's the oplog), then we don't do this either.\n        // (Be careful to do this for falsey but existing _id, though.)\n        if (self._visitedIds.has(doc._id)) continue;\n        self._visitedIds.set(doc._id, true);\n      }\n\n      if (self._transform)\n        doc = self._transform(doc);\n\n      return doc;\n    }\n  },\n\n  // Returns a promise which is resolved with the next object (like with\n  // _nextObjectPromise) or rejected if the cursor doesn't return within\n  // timeoutMS ms.\n  _nextObjectPromiseWithTimeout: function (timeoutMS) {\n    const self = this;\n    if (!timeoutMS) {\n      return self._nextObjectPromise();\n    }\n    const nextObjectPromise = self._nextObjectPromise();\n    const timeoutErr = new Error('Client-side timeout waiting for next object');\n    const timeoutPromise = new Promise((resolve, reject) => {\n      const timer = setTimeout(() => {\n        reject(timeoutErr);\n      }, timeoutMS);\n    });\n    return Promise.race([nextObjectPromise, timeoutPromise])\n      .catch((err) => {\n        if (err === timeoutErr) {\n          self.close();\n        }\n        throw err;\n      });\n  },\n\n  _nextObject: function () {\n    var self = this;\n    return self._nextObjectPromise().await();\n  },\n\n  forEach: function (callback, thisArg) {\n    var self = this;\n    const wrappedFn = Meteor.wrapFn(callback);\n\n    // Get back to the beginning.\n    self._rewind();\n\n    // We implement the loop ourself instead of using self._dbCursor.each,\n    // because \"each\" will call its callback outside of a fiber which makes it\n    // much more complex to make this function synchronous.\n    var index = 0;\n    while (true) {\n      var doc = self._nextObject();\n      if (!doc) return;\n      wrappedFn.call(thisArg, doc, index++, self._selfForIteration);\n    }\n  },\n\n  // XXX Allow overlapping callback executions if callback yields.\n  map: function (callback, thisArg) {\n    var self = this;\n    const wrappedFn = Meteor.wrapFn(callback);\n    var res = [];\n    self.forEach(function (doc, index) {\n      res.push(wrappedFn.call(thisArg, doc, index, self._selfForIteration));\n    });\n    return res;\n  },\n\n  _rewind: function () {\n    var self = this;\n\n    // known to be synchronous\n    self._dbCursor.rewind();\n\n    self._visitedIds = new LocalCollection._IdMap;\n  },\n\n  // Mostly usable for tailable cursors.\n  close: function () {\n    var self = this;\n\n    self._dbCursor.close();\n  },\n\n  fetch: function () {\n    var self = this;\n    return self.map(_.identity);\n  },\n\n  count: function () {\n    var self = this;\n    return self._synchronousCount().wait();\n  },\n\n  // This method is NOT wrapped in Cursor.\n  getRawObjects: function (ordered) {\n    var self = this;\n    if (ordered) {\n      return self.fetch();\n    } else {\n      var results = new LocalCollection._IdMap;\n      self.forEach(function (doc) {\n        results.set(doc._id, doc);\n      });\n      return results;\n    }\n  }\n});\n\nSynchronousCursor.prototype[Symbol.iterator] = function () {\n  var self = this;\n\n  // Get back to the beginning.\n  self._rewind();\n\n  return {\n    next() {\n      const doc = self._nextObject();\n      return doc ? {\n        value: doc\n      } : {\n        done: true\n      };\n    }\n  };\n};\n\nSynchronousCursor.prototype[Symbol.asyncIterator] = function () {\n  const syncResult = this[Symbol.iterator]();\n  return {\n    async next() {\n      return Promise.resolve(syncResult.next());\n    }\n  };\n}\n\n// Tails the cursor described by cursorDescription, most likely on the\n// oplog. Calls docCallback with each document found. Ignores errors and just\n// restarts the tail on error.\n//\n// If timeoutMS is set, then if we don't get a new document every timeoutMS,\n// kill and restart the cursor. This is primarily a workaround for #8598.\nMongoConnection.prototype.tail = function (cursorDescription, docCallback, timeoutMS) {\n  var self = this;\n  if (!cursorDescription.options.tailable)\n    throw new Error(\"Can only tail a tailable cursor\");\n\n  var cursor = self._createSynchronousCursor(cursorDescription);\n\n  var stopped = false;\n  var lastTS;\n  var loop = function () {\n    var doc = null;\n    while (true) {\n      if (stopped)\n        return;\n      try {\n        doc = cursor._nextObjectPromiseWithTimeout(timeoutMS).await();\n      } catch (err) {\n        // There's no good way to figure out if this was actually an error from\n        // Mongo, or just client-side (including our own timeout error). Ah\n        // well. But either way, we need to retry the cursor (unless the failure\n        // was because the observe got stopped).\n        doc = null;\n      }\n      // Since we awaited a promise above, we need to check again to see if\n      // we've been stopped before calling the callback.\n      if (stopped)\n        return;\n      if (doc) {\n        // If a tailable cursor contains a \"ts\" field, use it to recreate the\n        // cursor on error. (\"ts\" is a standard that Mongo uses internally for\n        // the oplog, and there's a special flag that lets you do binary search\n        // on it instead of needing to use an index.)\n        lastTS = doc.ts;\n        docCallback(doc);\n      } else {\n        var newSelector = _.clone(cursorDescription.selector);\n        if (lastTS) {\n          newSelector.ts = {$gt: lastTS};\n        }\n        cursor = self._createSynchronousCursor(new CursorDescription(\n          cursorDescription.collectionName,\n          newSelector,\n          cursorDescription.options));\n        // Mongo failover takes many seconds.  Retry in a bit.  (Without this\n        // setTimeout, we peg the CPU at 100% and never notice the actual\n        // failover.\n        Meteor.setTimeout(loop, 100);\n        break;\n      }\n    }\n  };\n\n  Meteor.defer(loop);\n\n  return {\n    stop: function () {\n      stopped = true;\n      cursor.close();\n    }\n  };\n};\n\nMongoConnection.prototype._observeChanges = function (\n    cursorDescription, ordered, callbacks, nonMutatingCallbacks) {\n  var self = this;\n\n  if (cursorDescription.options.tailable) {\n    return self._observeChangesTailable(cursorDescription, ordered, callbacks);\n  }\n\n  // You may not filter out _id when observing changes, because the id is a core\n  // part of the observeChanges API.\n  const fieldsOptions = cursorDescription.options.projection || cursorDescription.options.fields;\n  if (fieldsOptions &&\n      (fieldsOptions._id === 0 ||\n       fieldsOptions._id === false)) {\n    throw Error(\"You may not observe a cursor with {fields: {_id: 0}}\");\n  }\n\n  var observeKey = EJSON.stringify(\n    _.extend({ordered: ordered}, cursorDescription));\n\n  var multiplexer, observeDriver;\n  var firstHandle = false;\n\n  // Find a matching ObserveMultiplexer, or create a new one. This next block is\n  // guaranteed to not yield (and it doesn't call anything that can observe a\n  // new query), so no other calls to this function can interleave with it.\n  Meteor._noYieldsAllowed(function () {\n    if (_.has(self._observeMultiplexers, observeKey)) {\n      multiplexer = self._observeMultiplexers[observeKey];\n    } else {\n      firstHandle = true;\n      // Create a new ObserveMultiplexer.\n      multiplexer = new ObserveMultiplexer({\n        ordered: ordered,\n        onStop: function () {\n          delete self._observeMultiplexers[observeKey];\n          observeDriver.stop();\n        }\n      });\n      self._observeMultiplexers[observeKey] = multiplexer;\n    }\n  });\n\n  var observeHandle = new ObserveHandle(multiplexer,\n    callbacks,\n    nonMutatingCallbacks,\n  );\n\n  if (firstHandle) {\n    var matcher, sorter;\n    var canUseOplog = _.all([\n      function () {\n        // At a bare minimum, using the oplog requires us to have an oplog, to\n        // want unordered callbacks, and to not want a callback on the polls\n        // that won't happen.\n        return self._oplogHandle && !ordered &&\n          !callbacks._testOnlyPollCallback;\n      }, function () {\n        // We need to be able to compile the selector. Fall back to polling for\n        // some newfangled $selector that minimongo doesn't support yet.\n        try {\n          matcher = new Minimongo.Matcher(cursorDescription.selector);\n          return true;\n        } catch (e) {\n          // XXX make all compilation errors MinimongoError or something\n          //     so that this doesn't ignore unrelated exceptions\n          return false;\n        }\n      }, function () {\n        // ... and the selector itself needs to support oplog.\n        return OplogObserveDriver.cursorSupported(cursorDescription, matcher);\n      }, function () {\n        // And we need to be able to compile the sort, if any.  eg, can't be\n        // {$natural: 1}.\n        if (!cursorDescription.options.sort)\n          return true;\n        try {\n          sorter = new Minimongo.Sorter(cursorDescription.options.sort);\n          return true;\n        } catch (e) {\n          // XXX make all compilation errors MinimongoError or something\n          //     so that this doesn't ignore unrelated exceptions\n          return false;\n        }\n      }], function (f) { return f(); });  // invoke each function\n\n    var driverClass = canUseOplog ? OplogObserveDriver : PollingObserveDriver;\n    observeDriver = new driverClass({\n      cursorDescription: cursorDescription,\n      mongoHandle: self,\n      multiplexer: multiplexer,\n      ordered: ordered,\n      matcher: matcher,  // ignored by polling\n      sorter: sorter,  // ignored by polling\n      _testOnlyPollCallback: callbacks._testOnlyPollCallback\n    });\n\n    // This field is only set for use in tests.\n    multiplexer._observeDriver = observeDriver;\n  }\n\n  // Blocks until the initial adds have been sent.\n  multiplexer.addHandleAndSendInitialAdds(observeHandle);\n\n  return observeHandle;\n};\n\n// Listen for the invalidation messages that will trigger us to poll the\n// database for changes. If this selector specifies specific IDs, specify them\n// here, so that updates to different specific IDs don't cause us to poll.\n// listenCallback is the same kind of (notification, complete) callback passed\n// to InvalidationCrossbar.listen.\n\nlistenAll = function (cursorDescription, listenCallback) {\n  var listeners = [];\n  forEachTrigger(cursorDescription, function (trigger) {\n    listeners.push(DDPServer._InvalidationCrossbar.listen(\n      trigger, listenCallback));\n  });\n\n  return {\n    stop: function () {\n      _.each(listeners, function (listener) {\n        listener.stop();\n      });\n    }\n  };\n};\n\nforEachTrigger = function (cursorDescription, triggerCallback) {\n  var key = {collection: cursorDescription.collectionName};\n  var specificIds = LocalCollection._idsMatchedBySelector(\n    cursorDescription.selector);\n  if (specificIds) {\n    _.each(specificIds, function (id) {\n      triggerCallback(_.extend({id: id}, key));\n    });\n    triggerCallback(_.extend({dropCollection: true, id: null}, key));\n  } else {\n    triggerCallback(key);\n  }\n  // Everyone cares about the database being dropped.\n  triggerCallback({ dropDatabase: true });\n};\n\n// observeChanges for tailable cursors on capped collections.\n//\n// Some differences from normal cursors:\n//   - Will never produce anything other than 'added' or 'addedBefore'. If you\n//     do update a document that has already been produced, this will not notice\n//     it.\n//   - If you disconnect and reconnect from Mongo, it will essentially restart\n//     the query, which will lead to duplicate results. This is pretty bad,\n//     but if you include a field called 'ts' which is inserted as\n//     new MongoInternals.MongoTimestamp(0, 0) (which is initialized to the\n//     current Mongo-style timestamp), we'll be able to find the place to\n//     restart properly. (This field is specifically understood by Mongo with an\n//     optimization which allows it to find the right place to start without\n//     an index on ts. It's how the oplog works.)\n//   - No callbacks are triggered synchronously with the call (there's no\n//     differentiation between \"initial data\" and \"later changes\"; everything\n//     that matches the query gets sent asynchronously).\n//   - De-duplication is not implemented.\n//   - Does not yet interact with the write fence. Probably, this should work by\n//     ignoring removes (which don't work on capped collections) and updates\n//     (which don't affect tailable cursors), and just keeping track of the ID\n//     of the inserted object, and closing the write fence once you get to that\n//     ID (or timestamp?).  This doesn't work well if the document doesn't match\n//     the query, though.  On the other hand, the write fence can close\n//     immediately if it does not match the query. So if we trust minimongo\n//     enough to accurately evaluate the query against the write fence, we\n//     should be able to do this...  Of course, minimongo doesn't even support\n//     Mongo Timestamps yet.\nMongoConnection.prototype._observeChangesTailable = function (\n    cursorDescription, ordered, callbacks) {\n  var self = this;\n\n  // Tailable cursors only ever call added/addedBefore callbacks, so it's an\n  // error if you didn't provide them.\n  if ((ordered && !callbacks.addedBefore) ||\n      (!ordered && !callbacks.added)) {\n    throw new Error(\"Can't observe an \" + (ordered ? \"ordered\" : \"unordered\")\n                    + \" tailable cursor without a \"\n                    + (ordered ? \"addedBefore\" : \"added\") + \" callback\");\n  }\n\n  return self.tail(cursorDescription, function (doc) {\n    var id = doc._id;\n    delete doc._id;\n    // The ts is an implementation detail. Hide it.\n    delete doc.ts;\n    if (ordered) {\n      callbacks.addedBefore(id, doc, null);\n    } else {\n      callbacks.added(id, doc);\n    }\n  });\n};\n\n// XXX We probably need to find a better way to expose this. Right now\n// it's only used by tests, but in fact you need it in normal\n// operation to interact with capped collections.\nMongoInternals.MongoTimestamp = MongoDB.Timestamp;\n\nMongoInternals.Connection = MongoConnection;\n"],"mappings":"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"},"sourceType":"module","externalDependencies":{},"hash":"e7902aac007f222ab323d8fa8536d7641e60d6ac"}
