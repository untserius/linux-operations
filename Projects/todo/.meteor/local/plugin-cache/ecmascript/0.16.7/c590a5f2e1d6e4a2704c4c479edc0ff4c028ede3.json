{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/home/serius/Desktop/Practicals/Projects/todo/packages/mongo/oplog_v2_converter.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.linux.x86_64"},"sourceFileName":"packages/mongo/oplog_v2_converter.js","filename":"/home/serius/Desktop/Practicals/Projects/todo/packages/mongo/oplog_v2_converter.js","targets":{},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/home/serius/Desktop/Practicals/Projects/todo","root":"/home/serius/Desktop/Practicals/Projects/todo","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"_exploded":{},"_verified":{},"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/home/serius/Desktop/Practicals/Projects/todo/packages/mongo/oplog_v2_converter.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/mongo/oplog_v2_converter.js"}},"code":"module.export({\n  oplogV2V1Converter: () => oplogV2V1Converter\n});\n// Converter of the new MongoDB Oplog format (>=5.0) to the one that Meteor\n// handles well, i.e., `$set` and `$unset`. The new format is completely new,\n// and looks as follows:\n//\n//   { $v: 2, diff: Diff }\n//\n// where `Diff` is a recursive structure:\n//\n//   {\n//     // Nested updates (sometimes also represented with an s-field).\n//     // Example: `{ $set: { 'foo.bar': 1 } }`.\n//     i: { <key>: <value>, ... },\n//\n//     // Top-level updates.\n//     // Example: `{ $set: { foo: { bar: 1 } } }`.\n//     u: { <key>: <value>, ... },\n//\n//     // Unsets.\n//     // Example: `{ $unset: { foo: '' } }`.\n//     d: { <key>: false, ... },\n//\n//     // Array operations.\n//     // Example: `{ $push: { foo: 'bar' } }`.\n//     s<key>: { a: true, u<index>: <value>, ... },\n//     ...\n//\n//     // Nested operations (sometimes also represented in the `i` field).\n//     // Example: `{ $set: { 'foo.bar': 1 } }`.\n//     s<key>: Diff,\n//     ...\n//   }\n//\n// (all fields are optional).\n\nfunction join(prefix, key) {\n  return prefix ? \"\".concat(prefix, \".\").concat(key) : key;\n}\nconst arrayOperatorKeyRegex = /^(a|[su]\\d+)$/;\nfunction isArrayOperatorKey(field) {\n  return arrayOperatorKeyRegex.test(field);\n}\nfunction isArrayOperator(operator) {\n  return operator.a === true && Object.keys(operator).every(isArrayOperatorKey);\n}\nfunction flattenObjectInto(target, source, prefix) {\n  if (Array.isArray(source) || typeof source !== 'object' || source === null) {\n    target[prefix] = source;\n  } else {\n    const entries = Object.entries(source);\n    if (entries.length) {\n      entries.forEach(_ref => {\n        let [key, value] = _ref;\n        flattenObjectInto(target, value, join(prefix, key));\n      });\n    } else {\n      target[prefix] = source;\n    }\n  }\n}\nconst logDebugMessages = !!process.env.OPLOG_CONVERTER_DEBUG;\nfunction convertOplogDiff(oplogEntry, diff, prefix) {\n  if (logDebugMessages) {\n    console.log(\"convertOplogDiff(\".concat(JSON.stringify(oplogEntry), \", \").concat(JSON.stringify(diff), \", \").concat(JSON.stringify(prefix), \")\"));\n  }\n  Object.entries(diff).forEach(_ref2 => {\n    let [diffKey, value] = _ref2;\n    if (diffKey === 'd') {\n      var _oplogEntry$$unset;\n      // Handle `$unset`s.\n      (_oplogEntry$$unset = oplogEntry.$unset) !== null && _oplogEntry$$unset !== void 0 ? _oplogEntry$$unset : oplogEntry.$unset = {};\n      Object.keys(value).forEach(key => {\n        oplogEntry.$unset[join(prefix, key)] = true;\n      });\n    } else if (diffKey === 'i') {\n      var _oplogEntry$$set;\n      // Handle (potentially) nested `$set`s.\n      (_oplogEntry$$set = oplogEntry.$set) !== null && _oplogEntry$$set !== void 0 ? _oplogEntry$$set : oplogEntry.$set = {};\n      flattenObjectInto(oplogEntry.$set, value, prefix);\n    } else if (diffKey === 'u') {\n      var _oplogEntry$$set2;\n      // Handle flat `$set`s.\n      (_oplogEntry$$set2 = oplogEntry.$set) !== null && _oplogEntry$$set2 !== void 0 ? _oplogEntry$$set2 : oplogEntry.$set = {};\n      Object.entries(value).forEach(_ref3 => {\n        let [key, value] = _ref3;\n        oplogEntry.$set[join(prefix, key)] = value;\n      });\n    } else {\n      // Handle s-fields.\n      const key = diffKey.slice(1);\n      if (isArrayOperator(value)) {\n        // Array operator.\n        Object.entries(value).forEach(_ref4 => {\n          let [position, value] = _ref4;\n          if (position === 'a') {\n            return;\n          }\n          const positionKey = join(join(prefix, key), position.slice(1));\n          if (position[0] === 's') {\n            convertOplogDiff(oplogEntry, value, positionKey);\n          } else if (value === null) {\n            var _oplogEntry$$unset2;\n            (_oplogEntry$$unset2 = oplogEntry.$unset) !== null && _oplogEntry$$unset2 !== void 0 ? _oplogEntry$$unset2 : oplogEntry.$unset = {};\n            oplogEntry.$unset[positionKey] = true;\n          } else {\n            var _oplogEntry$$set3;\n            (_oplogEntry$$set3 = oplogEntry.$set) !== null && _oplogEntry$$set3 !== void 0 ? _oplogEntry$$set3 : oplogEntry.$set = {};\n            oplogEntry.$set[positionKey] = value;\n          }\n        });\n      } else if (key) {\n        // Nested object.\n        convertOplogDiff(oplogEntry, value, join(prefix, key));\n      }\n    }\n  });\n}\nfunction oplogV2V1Converter(oplogEntry) {\n  // Pass-through v1 and (probably) invalid entries.\n  if (oplogEntry.$v !== 2 || !oplogEntry.diff) {\n    return oplogEntry;\n  }\n  const convertedOplogEntry = {\n    $v: 2\n  };\n  convertOplogDiff(convertedOplogEntry, oplogEntry.diff, '');\n  return convertedOplogEntry;\n}","map":{"version":3,"names":["module","export","oplogV2V1Converter","join","prefix","key","arrayOperatorKeyRegex","isArrayOperatorKey","field","test","isArrayOperator","operator","a","Object","keys","every","flattenObjectInto","target","source","Array","isArray","entries","length","forEach","value","logDebugMessages","process","env","OPLOG_CONVERTER_DEBUG","convertOplogDiff","oplogEntry","diff","console","log","JSON","stringify","diffKey","$unset","$set","slice","position","positionKey","$v","convertedOplogEntry"],"sources":["packages/mongo/oplog_v2_converter.js"],"sourcesContent":["// Converter of the new MongoDB Oplog format (>=5.0) to the one that Meteor\n// handles well, i.e., `$set` and `$unset`. The new format is completely new,\n// and looks as follows:\n//\n//   { $v: 2, diff: Diff }\n//\n// where `Diff` is a recursive structure:\n//\n//   {\n//     // Nested updates (sometimes also represented with an s-field).\n//     // Example: `{ $set: { 'foo.bar': 1 } }`.\n//     i: { <key>: <value>, ... },\n//\n//     // Top-level updates.\n//     // Example: `{ $set: { foo: { bar: 1 } } }`.\n//     u: { <key>: <value>, ... },\n//\n//     // Unsets.\n//     // Example: `{ $unset: { foo: '' } }`.\n//     d: { <key>: false, ... },\n//\n//     // Array operations.\n//     // Example: `{ $push: { foo: 'bar' } }`.\n//     s<key>: { a: true, u<index>: <value>, ... },\n//     ...\n//\n//     // Nested operations (sometimes also represented in the `i` field).\n//     // Example: `{ $set: { 'foo.bar': 1 } }`.\n//     s<key>: Diff,\n//     ...\n//   }\n//\n// (all fields are optional).\n\nfunction join(prefix, key) {\n  return prefix ? `${prefix}.${key}` : key;\n}\n\nconst arrayOperatorKeyRegex = /^(a|[su]\\d+)$/;\n\nfunction isArrayOperatorKey(field) {\n  return arrayOperatorKeyRegex.test(field);\n}\n\nfunction isArrayOperator(operator) {\n  return operator.a === true && Object.keys(operator).every(isArrayOperatorKey);\n}\n\nfunction flattenObjectInto(target, source, prefix) {\n  if (Array.isArray(source) || typeof source !== 'object' || source === null) {\n    target[prefix] = source;\n  } else {\n    const entries = Object.entries(source);\n    if (entries.length) {\n      entries.forEach(([key, value]) => {\n        flattenObjectInto(target, value, join(prefix, key));\n      });\n    } else {\n      target[prefix] = source;\n    }\n  }\n}\n\nconst logDebugMessages = !!process.env.OPLOG_CONVERTER_DEBUG;\n\nfunction convertOplogDiff(oplogEntry, diff, prefix) {\n  if (logDebugMessages) {\n    console.log(`convertOplogDiff(${JSON.stringify(oplogEntry)}, ${JSON.stringify(diff)}, ${JSON.stringify(prefix)})`);\n  }\n\n  Object.entries(diff).forEach(([diffKey, value]) => {\n    if (diffKey === 'd') {\n      // Handle `$unset`s.\n      oplogEntry.$unset ??= {};\n      Object.keys(value).forEach(key => {\n        oplogEntry.$unset[join(prefix, key)] = true;\n      });\n    } else if (diffKey === 'i') {\n      // Handle (potentially) nested `$set`s.\n      oplogEntry.$set ??= {};\n      flattenObjectInto(oplogEntry.$set, value, prefix);\n    } else if (diffKey === 'u') {\n      // Handle flat `$set`s.\n      oplogEntry.$set ??= {};\n      Object.entries(value).forEach(([key, value]) => {\n        oplogEntry.$set[join(prefix, key)] = value;\n      });\n    } else {\n      // Handle s-fields.\n      const key = diffKey.slice(1);\n      if (isArrayOperator(value)) {\n        // Array operator.\n        Object.entries(value).forEach(([position, value]) => {\n          if (position === 'a') {\n            return;\n          }\n\n          const positionKey = join(join(prefix, key), position.slice(1));\n          if (position[0] === 's') {\n            convertOplogDiff(oplogEntry, value, positionKey);\n          } else if (value === null) {\n            oplogEntry.$unset ??= {};\n            oplogEntry.$unset[positionKey] = true;\n          } else {\n            oplogEntry.$set ??= {};\n            oplogEntry.$set[positionKey] = value;\n          }\n        });\n      } else if (key) {\n        // Nested object.\n        convertOplogDiff(oplogEntry, value, join(prefix, key));\n      }\n    }\n  });\n}\n\nexport function oplogV2V1Converter(oplogEntry) {\n  // Pass-through v1 and (probably) invalid entries.\n  if (oplogEntry.$v !== 2 || !oplogEntry.diff) {\n    return oplogEntry;\n  }\n\n  const convertedOplogEntry = { $v: 2 };\n  convertOplogDiff(convertedOplogEntry, oplogEntry.diff, '');\n  return convertedOplogEntry;\n}\n"],"mappings":"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"},"sourceType":"module","externalDependencies":{},"hash":"c590a5f2e1d6e4a2704c4c479edc0ff4c028ede3"}
